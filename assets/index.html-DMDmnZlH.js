import{_ as n,c as s,o as a,d as t}from"./app-DMpemI32.js";const p={},e=t(`<h1 id="vuerouter从基础到原理" tabindex="-1"><a class="header-anchor" href="#vuerouter从基础到原理"><span>vueRouter从基础到原理</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>vue-router封装了一个全局混入，定义了两个挂载在原型上的变量，注册了两个组件;<br> 支持三种路由方式：hash, history, abstract<br> 提供两种组件:<code>&lt;router-link&gt;</code>、 <code>&lt;router-view&gt;</code><br> 定义两个变量：<code>$router</code>, <code>$route</code><br> 暴露了一系列实例方法和钩子函数<br> vue-router 3.<em>.</em> 版本<a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener noreferrer">项目地址</a></p><p>路由导航解析流程:</p><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h2><p>详细使用方法见:<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">官方文档</a></p><ul><li>路由的绑定与vuex类似</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// router/index.js  </span></span>
<span class="line"><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>  </span>
<span class="line"><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&#39;../component/MyComponent&#39;</span> <span class="token comment">// 引入自定义组件  </span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>  </span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/myComponent&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> MyComponent<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 配置项  </span></span>
<span class="line">    <span class="token punctuation">{</span>  </span>
<span class="line">      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/mutilRouter&#39;</span><span class="token punctuation">,</span>  </span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;namedRouter&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 命名路由  </span></span>
<span class="line">      <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token operator">:</span>MyComponent1<span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span>MyComponent2<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 对应命名视图  </span></span>
<span class="line">      <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 多级路由children配置与routes类似  </span></span>
<span class="line">        <span class="token punctuation">{</span>path：<span class="token string">&#39;child1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>child1<span class="token punctuation">}</span> <span class="token comment">// 子路由中可省略根路径&#39;/&#39;字符  </span></span>
<span class="line">        <span class="token punctuation">{</span>path：<span class="token string">&#39;child2/:arg1/:arg2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>child2<span class="token punctuation">}</span> <span class="token comment">// 配置:arg1占位表示params方式路由传参  </span></span>
<span class="line">      <span class="token punctuation">]</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token punctuation">]</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment">// main.js  </span></span>
<span class="line"><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>  </span>
<span class="line"><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>  </span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token literal-property property">router</span><span class="token operator">:</span>router<span class="token punctuation">,</span>  </span>
<span class="line">  <span class="token operator">...</span> <span class="token comment">// 此处省略了其他配置项  </span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>路由的使用</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token comment">&lt;!-- 导航组件中 --&gt;</span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/myComponent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我的组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 最终会被编译为&lt;a&gt;标签 --&gt;</span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/mutilRouter/child1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>子组件中的多级路由<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token comment">&lt;!-- 导航组件中内容展示区占位 --&gt;</span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span>路由占位符/多级路由也适用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>命名视图占位符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  </span>
<span class="line"><span class="token comment">&lt;!-- 路由传参 --&gt;</span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`/mutilRouter/child1?arg1=\${this.arg1}&amp;arg2=\${this.arg2}\`<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>拼字符串的形式传递路由query参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`/mutilRouter/child2/\${this.arg1}/\${this.arg2}\`<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>拼字符串的形式传递路由params参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{  </span>
<span class="line">  path:&#39;/mutilRouter/child1&#39;,  </span>
<span class="line">  // name:namedRouter, // 若定义了命名路由可直接写name不用写path属性  </span>
<span class="line">  query:{arg1:this.arg1, arg2:this.arg2},  </span>
<span class="line">  // params:{arg1:this.arg1, arg2:this.arg2} //params方式传参  </span>
<span class="line">}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>传对象形式传递路由query参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token comment">&lt;!-- 被路由的组件中 --&gt;</span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{$route.query.arg1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由配置中可传递固定参数props,子组件中能够通过props属性访问到对应的参数</p><ul><li>路由方式与编程式路由导航</li></ul><p>默认路由方式为push模式,url访问历史以push的方式记录,设置标签replace属性:<code>&lt;router-link replace&gt;</code>该路由模式改为replace模式,新的url访问历史将不断替换上一条记录</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> <span class="token comment">// Object参数与标签中to参数类似  </span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> <span class="token comment">// 以replace模式路由  </span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 后退  </span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 前进  </span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 前进或后退n条记录  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在路由中使用keep-alive</li></ul><p>通过vue内置组件keep-alive可以缓存路由组件,以便进行快速路由切换.被缓存的组件中定时器等回调不会停止运行</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>要缓存的路由组件名<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token comment">&lt;!-- &lt;keep-alive :include=&quot;[&#39;组件1&#39;, &#39;组件2&#39;]&quot;&gt; --&gt;</span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token comment">&lt;!-- 若跳转至其上级路由，由于父组件被销毁，因此子组件也会被销毁 --&gt;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被keep-alive的组件中独有的两个生命周期函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token comment">// 被路由展示时触发  </span></span>
<span class="line">  <span class="token comment">// 在此函数中启动激活交互所需的事件/定时器  </span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token comment">// 路由切走,组件被缓存时触发  </span></span>
<span class="line">  <span class="token comment">// 在此事件中停止失活后不需要的事件/定时器  </span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>路由守卫</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 全局路由守卫,初始化及每次路由切换之前被调用  </span></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token comment">// to 要路由到的目标route  </span></span>
<span class="line">  <span class="token comment">// from 发起跳转的来源  </span></span>
<span class="line">  <span class="token comment">// next回调函数,调用对该路由请求放行  </span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment">// 后置路由守卫,初始化及每次路由切换后调用  </span></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment">// 独享路由守卫,通过beforeEnter属性添加到routes配置对应的路由中  </span></span>
<span class="line"><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;要守卫的路由&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/before&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>  </span>
<span class="line">  <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 仅该路由及其子路由会被拦截  </span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token comment">// 组件内路由守卫路由规则卸载组件内,与生命周期函数平级  </span></span>
<span class="line"><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  </span>
<span class="line">  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 通过路由规则进入该组件时被调用  </span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 通过路由规则离开该组件时被调用  </span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>history 模式依赖于 <code>window.history.pushState()</code>，<code>replaceState()</code>等api完成跳转而无需重新加载页面 TODO</p><h2 id="源码核心简读" tabindex="-1"><a class="header-anchor" href="#源码核心简读"><span>源码核心简读</span></a></h2><h2 id="手写实现" tabindex="-1"><a class="header-anchor" href="#手写实现"><span>手写实现</span></a></h2>`,26),l=[e];function o(c,i){return a(),s("div",null,l)}const r=n(p,[["render",o],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/vue/vueRouter/","title":"vueRouter从基础到原理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"源码核心简读","slug":"源码核心简读","link":"#源码核心简读","children":[]},{"level":2,"title":"手写实现","slug":"手写实现","link":"#手写实现","children":[]}],"git":{"updatedTime":1665496343000,"contributors":[{"name":"vito","email":"vitotu@qq.com","commits":5}]},"filePathRelative":"vue/vueRouter/README.md"}');export{r as comp,k as data};
