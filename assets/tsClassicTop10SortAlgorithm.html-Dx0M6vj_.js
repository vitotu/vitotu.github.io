import{_ as s,a,b as p,c as t,d as e,e as o,f as l,g as c}from"./countingSort-Cm7uLBWz.js";import{_ as i,c as u,a as r,o as k}from"./app-CP25aJTt.js";const d="/assets/heap-DGWgeE4-.png",m="/assets/heapArray-D9L1kLC9.png",v={};function b(g,n){return k(),u("div",null,n[0]||(n[0]=[r('<h1 id="ts实现十大经典排序算法" tabindex="-1"><a class="header-anchor" href="#ts实现十大经典排序算法"><span>ts实现十大经典排序算法</span></a></h1><h2 id="no-1-冒泡排序法-bubblesort" tabindex="-1"><a class="header-anchor" href="#no-1-冒泡排序法-bubblesort"><span>NO.1 冒泡排序法(bubbleSort)</span></a></h2><ol><li>遍历长度为n的数组，比较相邻位置的大小</li><li>将较大的放置右边，保证了第一次遍历后数组末尾为最大</li><li>将遍历长度减1，重复上述操作，直到遍历长度为2即可得到从小到大的排序的数组</li></ol><p>若想要从大到小排序，则将较小的放置在右边即可</p><ul><li>图解：</li></ul><picture><source srcset="https://cdnjson.com/images/2024/05/13/bubbleSortb5be109d39f7ca53.gif"><img src="'+s+`" alt="bubbleSort.gif"></picture><ul><li>ts实现:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@description</span>: 定义比较函数接口</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T<span class="token punctuation">}</span> 泛型T</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SortAlgorithm</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">bubbleSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> exchangeFlag<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否发生交换的标志</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        exchangeFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 每轮循环开始时，初始化是否交换标志</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">            exchangeFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exchangeFlag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 若未发生交换，则此轮循环已排好序，直接跳出即可</span></span>
<span class="line">          <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 内置数字比较函数</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">NumberLE</span><span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">NumberGE</span><span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * <span class="token keyword">@description</span>: 测试用例</span>
<span class="line">   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>*<span class="token punctuation">}</span></span>
<span class="line">   * <span class="token keyword">@return</span> <span class="token punctuation">{</span>*<span class="token punctuation">}</span></span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// nums = [];</span></span>
<span class="line">    <span class="token keyword">let</span> result<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>SortAlgorithm<span class="token punctuation">.</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> SortAlgorithm<span class="token punctuation">.</span>NumberLE<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">SortAlgorithm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-2-选择排序法-selectionsort" tabindex="-1"><a class="header-anchor" href="#no-2-选择排序法-selectionsort"><span>NO.2 选择排序法(SelectionSort)</span></a></h2><p>每次从未排序序列中选择一个最小值(最大值)放入已排序序列的末尾</p><ul><li>图解：<br><img src="`+a+`" alt="selectionSort.gif"></li><li>ts实现：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 接上述类的静态方法</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">selectionSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> targetIndex <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        targetIndex <span class="token operator">=</span> j<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> temp<span class="token operator">:</span><span class="token constant">T</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    arr<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> arr</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-3-插入排序法-insertionsort" tabindex="-1"><a class="header-anchor" href="#no-3-插入排序法-insertionsort"><span>NO.3 插入排序法(InsertionSort)</span></a></h2><p>通过构建有序序列，对未排序的数据，在已排序数列中从后向前扫描<br> 记当前位置为temp，若扫描位的元素比temp大，则将该元素后移一位<br> 直到找到比temp小的元素为止，把temp插入到该元素的后一位。</p><ul><li>步骤：</li></ul><ol><li>将列表看做排好序的前半部分和没排序的后半部分，使用target指针从第二个元素起遍历列表</li><li>使用compare指针，将排好序的前半部分从后向前进行遍历</li><li>若target &lt; compare则交换所指向的值</li><li>向左移动target指针(target指向compare的指向的位置)，保持target始终指向本次遍历初始指向的元素</li><li>继续compare的下一次遍历，若不满足步骤3则说明target大于compare前面的元素，直接跳出内层循环，执行步骤2</li></ol><ul><li>图解：<br><img src="`+p+`" alt="insertionSort.gif"></li><li>ts实现:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">insertionSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 该算法对元素操作太多，仅适合用于链表类数组排序</span></span>
<span class="line">  <span class="token keyword">let</span> length<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> target <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> compare <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> compare <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> compare<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>compare<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>compare<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>compare<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">        target <span class="token operator">=</span> compare<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-4-希尔排序-shellsort" tabindex="-1"><a class="header-anchor" href="#no-4-希尔排序-shellsort"><span>NO.4 希尔排序(shellSort)</span></a></h2><p>shellSort是insertionSort的升级版，算法假定大小不同的数字为均匀分布，<br> 通过间距插入排序法在每次迭代中尽可能的将数字插入到其大小合适的位置，<br> 最后可得到精确的位置，即排序好的数组。</p><p>通常shellSort的比较次数和数字交换次数会小于insertionSort<br> 因此性能表现更好即平均算法复杂度更小O( n^1.3 )，但其最坏算法复杂度相同O( n^2 )</p><ul><li>步骤</li></ul><ol><li>设置间距gap，通过gap间距将数组分割gap个组，通常gap取length/2仅保留整数</li><li>对组内使用插入排序法</li><li>将gap除2重复步骤1，直到gap等于1再进行最后一次插入排序即可获得排序好的数组</li></ol><ul><li>图解 <img src="`+t+`" alt="shellSort.gif"></li><li>ts实现</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">shellSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>gap<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> gap<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 分gap组进行插入排序</span></span>
<span class="line">      <span class="token comment">// j指向组内第二个元素，向后遍历</span></span>
<span class="line">      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> gap<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j <span class="token operator">+=</span> gap<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> target <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 初始化目标指针,compare指针指向前一个排序好的元素</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> compare <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">;</span> compare <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>compare <span class="token operator">-=</span> gap<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>compare<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>compare<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>compare<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">            target <span class="token operator">=</span> compare<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-5-归并排序-mergesort" tabindex="-1"><a class="header-anchor" href="#no-5-归并排序-mergesort"><span>NO.5 归并排序(mergeSort)</span></a></h2><ul><li>步骤</li></ul><ol><li>把长度为n的输入序列分成两个长度为n/2的子序列</li><li>对着两个子序列分别采用归并排序，将两个排序好的子序列合并成一个最终的排序序列</li><li>反复递归直到子序列不可分</li></ol><ul><li>图解 <img src="`+e+`" alt="mergeSort.gif"></li><li>ts实现</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@description</span>: 归并排序中用于合并左右两个数组</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T[]<span class="token punctuation">}</span> left 存储T类型的左数组</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T[]<span class="token punctuation">}</span> right 存储T类型的左数组</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>COMPARE<span class="token punctuation">}</span> fn 用于比较的函数</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span>T[]<span class="token punctuation">}</span> 返回值也是T类型的数组</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">mergeArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span> left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      l<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      r<span class="token operator">++</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>left<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>right<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@description</span>: 递归调用此方法，将数组左右细分下去，并调用mergeArray合并两数组</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T[]<span class="token punctuation">}</span> arr 传入存储T类型的数组</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>COMPARE<span class="token punctuation">}</span> fn 用于比较的方法</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span>T[]<span class="token punctuation">}</span> 返回排好序的T类型的数组</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">mergeSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> left <span class="token operator">=</span> SortAlgorithm<span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> right <span class="token operator">=</span> SortAlgorithm<span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> SortAlgorithm<span class="token punctuation">.</span><span class="token function">mergeArray</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-6-快速排序-quicksort" tabindex="-1"><a class="header-anchor" href="#no-6-快速排序-quicksort"><span>NO.6 快速排序(quickSort)</span></a></h2><ul><li>步骤</li></ul><ol><li>从数列中挑出一个元素作为基准，比基准小的元素全部排在左边，反之在右边。</li><li>递归的对基准左右两边的数列进行快速排序。</li><li>合并左边序列、基准和右边序列并返回</li></ol><ul><li>图解 <img src="`+o+`" alt="quickSort.gif"></li><li>ts实现</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">quickSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> leftArr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> rightArr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      leftArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">      rightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  leftArr <span class="token operator">=</span> SortAlgorithm<span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  rightArr <span class="token operator">=</span> SortAlgorithm<span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  leftArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> leftArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-7-堆排序-heapsort" tabindex="-1"><a class="header-anchor" href="#no-7-堆排序-heapsort"><span>NO.7 堆排序(heapSort)</span></a></h2><p>利用堆数据结构所设计的排序算法，通过每次弹出堆顶元素实现排序</p><ul><li>堆数据结构 堆是一种二叉树，子节点从左到右填充，父节点必定大于/小于其子节点，对应最大堆/最小堆<br> 堆通常使用数组的方式存储，数组节点索引和堆节点对应如下：<br> parent(i)=floor((i - 1) / 2)<br> left(i)=2i+1<br> right(i)=2i+2<br> 超出索引的表示没有子节点，其层级和数组表示范例如下图：</li></ul><p><img src="`+d+'" alt="heap.png"></p><p><img src="'+m+'" alt="heapArray.png"></p><p>高度为h的堆有h+1层，n个节点的堆高度为h=floor(log2(n))，层数为h+1，倒数第二层的索引为2^h-2</p><ul><li>步骤</li></ul><ol><li>对数组进行建堆buildHeap 1). 从倒数第二层的最后一个节点是 2^h - 2 向前遍历到根节点0 2). 对每个节点进行heapify</li><li>heapify算法： 1). 比较父节点、左右子节点之间的大小，将符合条件的与父节点交换位置 2). 对进行了交换的子节点递归的进行heapify，保证该支子树满足最大或最小堆条件</li><li>heapSort算法： 1). 对步骤1中的堆，堆顶与堆尾交换位置，记堆长度减1，数组末尾为已排好序的序列 2). 将交换后的堆顶进行heapify，维持最大堆或最小堆条件 3). 遍历数组到倒数第二个节点，每次重复1)~2)步骤，完成后即可获得排序好的数组</li></ol><ul><li>图解 <img src="'+l+`" alt="heapSort.gif"></li><li>ts实现</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@description</span>: 对任意数组进行建堆</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T<span class="token punctuation">}</span> arr</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>COMPARE<span class="token punctuation">}</span> fn</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span>*<span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">buildHeap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// debugger</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    SortAlgorithm<span class="token punctuation">.</span><span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@description</span>: 堆化函数，对传入的数组及给定的父节点以下的各级子节点进行堆化，保证</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T[]<span class="token punctuation">}</span> arr 传入数组</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>COMPARE<span class="token punctuation">}</span> fn 用于比较的函数</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>number<span class="token punctuation">}</span> parent 父节点索引值</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>number<span class="token punctuation">}</span> end 限定进行堆化的范围0-end</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">heapify</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> parent<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>parent <span class="token operator">&gt;</span> end <span class="token operator">||</span> parent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> left <span class="token operator">=</span> parent <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> right <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> target <span class="token operator">=</span> parent<span class="token punctuation">;</span> <span class="token comment">// 最小值或最大值指针，默认指向父节点</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> end<span class="token operator">&amp;&amp;</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    target <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token comment">// 若左子节点没越界，不满足排序条件则将target指向左子节点</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    target <span class="token operator">=</span> right<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!==</span> parent<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 若target不指向当前parent，则交换parent和target的值</span></span>
<span class="line">    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    arr<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    SortAlgorithm<span class="token punctuation">.</span><span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> target<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换后向下传播heapify</span></span>
<span class="line">    <span class="token comment">// SortAlgorithm.heapify(arr, fn, Math.floor((parent - 1) / 2), end); // 向上传播heapify</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">heapSort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span><span class="token constant">COMPARE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    SortAlgorithm<span class="token punctuation">.</span><span class="token function">buildHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先对数组建堆</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      arr<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">// 将堆顶的最大或最小值与堆尾交换，并标记为已排序的学历，缩短堆的节点长度</span></span>
<span class="line">      SortAlgorithm<span class="token punctuation">.</span><span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 堆剩余的堆元素进行堆化维持最大堆或最小堆</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-8-计数排序法-countingsort" tabindex="-1"><a class="header-anchor" href="#no-8-计数排序法-countingsort"><span>NO.8 计数排序法(countingSort)</span></a></h2><p>计数排序法将输入的数据值转化为键存储在额外开辟的数组空间中，是一种线性复杂度的排序算法，计数排序要求输入的数据必须是有确定范围的整数</p><ul><li>步骤</li></ul><ol><li>找出待排序的数组arr中最大max和最小min的元素，开辟长度为max-min的数组C</li><li>统计arr中每个值为i的元素出现的次数，存入数组C的第i项</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li></ol><ul><li>图解 <img src="`+c+`" alt="countingSort.gif"></li><li>ts实现</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// TODO:待实现</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,51)]))}const y=i(v,[["render",b]]),w=JSON.parse('{"path":"/algorithm/tsClassicTop10SortAlgorithm.html","title":"ts实现十大经典排序算法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"NO.1 冒泡排序法(bubbleSort)","slug":"no-1-冒泡排序法-bubblesort","link":"#no-1-冒泡排序法-bubblesort","children":[]},{"level":2,"title":"NO.2 选择排序法(SelectionSort)","slug":"no-2-选择排序法-selectionsort","link":"#no-2-选择排序法-selectionsort","children":[]},{"level":2,"title":"NO.3 插入排序法(InsertionSort)","slug":"no-3-插入排序法-insertionsort","link":"#no-3-插入排序法-insertionsort","children":[]},{"level":2,"title":"NO.4 希尔排序(shellSort)","slug":"no-4-希尔排序-shellsort","link":"#no-4-希尔排序-shellsort","children":[]},{"level":2,"title":"NO.5 归并排序(mergeSort)","slug":"no-5-归并排序-mergesort","link":"#no-5-归并排序-mergesort","children":[]},{"level":2,"title":"NO.6 快速排序(quickSort)","slug":"no-6-快速排序-quicksort","link":"#no-6-快速排序-quicksort","children":[]},{"level":2,"title":"NO.7 堆排序(heapSort)","slug":"no-7-堆排序-heapsort","link":"#no-7-堆排序-heapsort","children":[]},{"level":2,"title":"NO.8 计数排序法(countingSort)","slug":"no-8-计数排序法-countingsort","link":"#no-8-计数排序法-countingsort","children":[]}],"git":{"updatedTime":1715706754000,"contributors":[{"name":"vito","username":"vito","email":"vitotu@qq.com","commits":5,"url":"https://github.com/vito"}],"changelog":[{"hash":"7eefab34b0e8d0d9d1e9814856456a661024e6dd","time":1715706754000,"email":"vitotu@qq.com","author":"vito","message":"udpate cdn img urls"},{"hash":"7b0874241616a1f8eec8b1af5c5853dd820cfe1e","time":1655394154000,"email":"vitotu@qq.com","author":"vito","message":"finished sword4offer &amp;&amp; adjust nav menu"},{"hash":"6d8c4ac3800e3c21ae85446ac223ce64a37620ca","time":1651768003000,"email":"vitotu@qq.com","author":"vito","message":"update format"},{"hash":"2ab75a4ac137ecec8d8944936a6f715ba5b2ac6a","time":1651570358000,"email":"vitotu@qq.com","author":"vito","message":"fix path"},{"hash":"5d4013bbab22c3330a48db00e3b5401351e82a9e","time":1651510828000,"email":"vitotu@qq.com","author":"vito","message":"move note to github"}]},"filePathRelative":"algorithm/tsClassicTop10SortAlgorithm.md"}');export{y as comp,w as data};
