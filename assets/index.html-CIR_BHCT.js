import{_ as o,r as l,c as i,a as n,b as a,w as p,d as e,o as u,e as t}from"./app-BhmseFdi.js";const r="/assets/vueReactive-Dg0PtT8u.png",k="/assets/reactive-CWCgLf8Z.png",d={},m=e('<h1 id="vue2进阶知识汇总整理" tabindex="-1"><a class="header-anchor" href="#vue2进阶知识汇总整理"><span>vue2进阶知识汇总整理</span></a></h1><h2 id="双向绑定与响应式" tabindex="-1"><a class="header-anchor" href="#双向绑定与响应式"><span>双向绑定与响应式</span></a></h2><ul><li>响应式原理</li></ul><p>vue2通过数据劫持，利用<code>Object.defineProperty(target, key, descriptor)</code>方法，设置get，set拦截读取和设置操作，通过发布订阅模式通知更新实现响应式<br> 而对于Array类型的数据通过改写push, pop, shift, unshift, splice, sort, reverse方法拦截写操作，并对数组内每个对象进行响应式设置<br> Vue中双向数据大致可以划分三个模块：Observer、Compile、Watcher，如图：<br><img src="'+r+`" alt="vueReactive.png"></p><ul><li>数据劫持</li></ul><blockquote><p>Object.defineProperty(target, key, descriptor)参数描述：<br> target目标对象<br> key目标对象的属性<br> descriptor属性描述符，格式如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 属性的值</span></span>
<span class="line">  <span class="token literal-property property">get</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>   <span class="token comment">// 获取属性值时触发的方法</span></span>
<span class="line">  <span class="token literal-property property">set</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>   <span class="token comment">// 设置属性值时触发的方法</span></span>
<span class="line">  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 属性值是否可修改，false不可改</span></span>
<span class="line">  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 属性是否可以用for...in 和 Object.keys()枚举</span></span>
<span class="line">  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// 该属性是否可以用delete删除，false不可删除，为false时也不能再修改该参数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Vue是响应式吗？&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get方法被触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里进行依赖收集</span></span>
<span class="line">    <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>       </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;set方法被触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// self.render();</span></span>
<span class="line">    dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里进行virtualDom更新，通知需要更新的组件render</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>         <span class="token comment">// get方法被触发</span></span>
<span class="line">obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Vue是响应式的&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// set方法被触发</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>发布订阅</li></ul><p>Observer对象利用Object.defineProperty()方法对数据进行监听，并借助dep对象添加订阅者，或发布更新，而watcher对象即为订阅者，初始化时利用get触发Observer中的get并强制将自己添加到dep对象中，完成订阅，当收到订阅消息后dep依次执行存储的watcher对象中的更新函数</p><p>每个data声明的属性，都拥有一个的专属依赖收集器Dep.subs，依赖收集器subs保存的依赖是watcher，watcher可进行视图更新</p><p>至此当数据变动时，会触发set方法，而set中通过dep.notify方法遍历watcher数组，并调用其update方法更新视图完成响应式</p><ul><li>双向绑定</li></ul><p>而当视图发生更新时，仅需在compile增加input事件监听，由回调函数修改数据，完成从视图到数据的更新。结合上述的数据劫持和发布订阅共同构成双向绑定。</p><p>流程图如下：<br><img src="`+k+'" alt="reactive.png"></p>',14),v={class:"custom-container tip"},g=n("p",{class:"custom-container-title"},"简单手写实现演示如下",-1),b=["src"],h=e(`<p><a href="https://blog.nowcoder.net/n/8517450fe4fd4220b4078f9c61e42ec1" target="_blank" rel="noopener noreferrer">参考文档1</a><br><a href="https://segmentfault.com/a/1190000023824423" target="_blank" rel="noopener noreferrer">参考文档2</a></p><h2 id="computed原理" tabindex="-1"><a class="header-anchor" href="#computed原理"><span>computed原理</span></a></h2><p>computed属性在响应式的基础上增加了缓存，当computed捕获到依赖变化时会将缓存控制位dirty置为true，重新读取computed时会执行get进行重新计算，并将计算值进行缓存，计算完成后翻转dirty状态，方便再次读取时使用缓存<br> computed会让依赖的data数据项收集到computed对应的watcher，从而对应data数据项变化时，会同时通知computed和依赖computed(页面等)的地方。</p><ol><li>页面更新，读取computed的时候，Dep.target会设置为页面watcher，从而让computed的watcher中的get方法收集到页面watcher的dep对象。</li><li>computed被读取，createComputedGetter包装的函数触发，第一次会进行计算。<br> computed-watcher.evaluted被调用，进而computed-watcher.get被调用，Dep.target被设置为computed-watcher，旧值页面watcher被缓存起来。</li><li>computed计算会读取data，此时data就收集到computed-watcher。 也就是computed-watcher也会被保存到data的依赖收集器dep中（用于下一步）。<br> computed计算完毕，释放Dep.target，并且Dep.target恢复上一个watcher（页面watcher）。</li><li>在computed.watcher.get退出之前，手动watcher.depend，让data再收集一次Dep.target，于是data又收集到之前缓存了的页面watcher。</li></ol><p>综上，此时data的dep依赖收集器=[computed - watcher，页面-watcher] data改变，正序遍历通知，computed先更新，页面再更新。<br> data改变首先调用computed - watcher的update方法，将dirty更改为true，表示缓存已无效，注意：此时不会重新计算。 在调用computed - watcher.update之后，再调用 页面-watcher，通知页面更新。页面更新时，会重新读取computed的值。此时，由于dirty=true，执行computed - evaluate方法，重新计算computed。</p><p><a href="https://zhuanlan.zhihu.com/p/357250216" target="_blank" rel="noopener noreferrer">参考文档</a></p><h2 id="watch监听原理" tabindex="-1"><a class="header-anchor" href="#watch监听原理"><span>watch监听原理</span></a></h2><p>接上文响应式基础简单理解：</p><ul><li>监听的数据改变的时，watch 如何工作</li></ul><p>watch在一开始初始化的时候，会读取一遍监听的数据的值，于是，此时那个数据就收集到watch的watcher了<br> 然后给watch设置的handler，watch会放入watcher的更新函数中<br> 当数据改变时，通知watch的watcher进行更新，于是上一步设置的handler就被调用了</p><ul><li>设置 immediate 时，watch 如何工作</li></ul><p>当设置了immediate时，就不需要在数据改变的时候才会触发。<br> 而是在初始化watch时，在读取了监听的数据的值之后，便立即调用一遍你设置的监听回调，然后传入刚读取的值</p><ul><li>设置了deep时，watch如何工作</li></ul><p>因为读取了监听的data的属性，watch的watcher被收集在这个属性的收集器中<br> 当设置了deep时<br> 在读取data属性的时候，发现设置了deep而且值是一个对象，会递归遍历这个值，把内部所有属性逐个读取一遍，于是属性和它的对象值内每一个属性都会收集到watch的watcher</p><h2 id="ast-abstract-syntax-tree-抽象语法树" tabindex="-1"><a class="header-anchor" href="#ast-abstract-syntax-tree-抽象语法树"><span>AST(abstract syntax tree)抽象语法树</span></a></h2><p>AST主要将字符串转换为可利用的树状数据结构，为后续的DOM API和js处理提供支持，可以过滤不安全的DOM结构，便于浏览器渲染</p><h3 id="预设算法题" tabindex="-1"><a class="header-anchor" href="#预设算法题"><span>预设算法题</span></a></h3><p>解码字符串压缩算法，如：<code>3[a]</code>复原为<code>aaa</code>,<code>2[1[a]2[b]]</code>复原为<code>abbabb</code></p><ul><li><p>思路：利用栈数据结构存入重复频次，缓存栈存入字符容器，遍历字符串，每次入栈数字则缓存栈一起入栈空字符串容器，遇到字符则将字符放入缓存栈顶容器内，若遇到<code>]</code>号，则出栈频次，出栈缓存，并将出栈的缓存字符串复制频次数后添加到新的栈顶容器中 遍历结束后将缓存栈顶(也是最后一个容器)中的字符串重复最后一个频次数返回即可</p></li><li><p>js实现</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">repeatStr</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> rest <span class="token operator">=</span> str<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> regNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d+)\\[</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 匹配并捕获数字开头的正括号模式</span></span>
<span class="line">    <span class="token keyword">let</span> regWord <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\w+)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 匹配并捕获字符开头的反括号模式</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      rest <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跟随p指针每次返回剩余的字符串</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 匹配到数字模式</span></span>
<span class="line">        <span class="token keyword">let</span> times <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regNum<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 提取数字</span></span>
<span class="line">        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符转数字入栈</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用空字符串作为容器压入缓存栈中</span></span>
<span class="line">        p <span class="token operator">+=</span> times<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 移动指针数字长度外加&#39;[&#39;长度</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>regWord<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 匹配到字符模式</span></span>
<span class="line">        <span class="token keyword">let</span> word <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regWord<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 提取字符</span></span>
<span class="line">        cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token punctuation">;</span> <span class="token comment">// 将字符放入栈顶容器</span></span>
<span class="line">        p <span class="token operator">+=</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 移动指针字符长度</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匹配到反括号</span></span>
<span class="line">        <span class="token keyword">let</span> times <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出栈频次</span></span>
<span class="line">        <span class="token keyword">let</span> word <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出栈字符容器</span></span>
<span class="line">        <span class="token comment">// 将出栈字符word重复times次放入新的栈顶</span></span>
<span class="line">        cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> word<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">++</span> <span class="token comment">// 移动指针&#39;]&#39;长度</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历结束后还剩最后的容器和频次</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 测试用例</span></span>
<span class="line">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;03[02[3[a]1[b]]4[d]]&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Solution<span class="token punctuation">.</span><span class="token function">repeatStr</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">&#39;aaabaaabdddd&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">Solution<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="html解析" tabindex="-1"><a class="header-anchor" href="#html解析"><span>html解析</span></a></h3><p>对html的AST解析思路与上述预设算法基本相同，利用栈的先进后出特性对标签进行配对和对中间结果进行缓存整理<br> 使用正则表达式进行词法分析</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> rest <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> startRegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&lt;([a-z]+[1-6]?)(\\s[^\\&lt;]+)?\\&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 开始标记;</span></span>
<span class="line">    <span class="token keyword">let</span> endRegRxp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&lt;\\/([a-z]+[1-6]?)\\&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 结束标记</span></span>
<span class="line">    <span class="token keyword">let</span> wordRegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([^\\&lt;]+)\\&lt;\\/[a-z]+[1-6]?\\&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 结束标记结束前的文字;</span></span>
<span class="line">    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始容器中预设children属性</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      rest <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>startRegExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 处理开始标签</span></span>
<span class="line">        <span class="token keyword">let</span> tag <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startRegExp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> attrsString <span class="token operator">=</span> tag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 提取标签中的属性</span></span>
<span class="line">        tag <span class="token operator">=</span> tag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈标签名</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span>tag<span class="token punctuation">,</span> <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;attrs&#39;</span><span class="token operator">:</span> Solution<span class="token punctuation">.</span><span class="token function">parseAttrs</span><span class="token punctuation">(</span>attrsString<span class="token punctuation">)</span> <span class="token comment">// 解析标签中的属性</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> attrsLength <span class="token operator">=</span> attrsString <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> attrsString<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        p <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> attrsLength<span class="token punctuation">;</span> <span class="token comment">// 移动指针，&#39;&lt;&gt;&#39;长度为2所以加2</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endRegRxp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 处理结束标签</span></span>
<span class="line">        <span class="token keyword">let</span> tag <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endRegRxp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> pop_tag <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> pop_tag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 检查结束标签是否与栈顶弹出的标签相同，相同则继续处理</span></span>
<span class="line">          <span class="token keyword">let</span> pop_arr <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 将弹出的标签对象添加到新栈顶的children属性上</span></span>
<span class="line">            cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop_arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 不同则抛出语法错误</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>pop_tag <span class="token operator">+</span> <span class="token string">&#39;标签未封闭!!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        p <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 移动指针 &#39;&lt;/&gt;&#39;长度为3，需要额外移动3个单位</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wordRegExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 处理文本节点</span></span>
<span class="line">        <span class="token keyword">let</span> word <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>wordRegExp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 若文本节点不为空，则进行处理</span></span>
<span class="line">          cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 对于文本节点直接加入栈顶children属性中即可</span></span>
<span class="line">            <span class="token string-property property">&#39;text&#39;</span><span class="token operator">:</span> word<span class="token punctuation">,</span> <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span><span class="token number">3</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        p <span class="token operator">+=</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 移动指针</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">        p<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 遍历结束后返回最初容器中的内容</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">parseAttrs</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 解析标签的属性字符串</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> inQuotes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否处于引号中的标志位</span></span>
<span class="line">    <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 断点位置指针</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> char <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 若遇到引号则将引号中标志位进行翻转，保证引号内为true</span></span>
<span class="line">        inQuotes <span class="token operator">=</span> <span class="token operator">!</span>inQuotes<span class="token punctuation">;</span> <span class="token comment">// 保证属性值中出现空格不会出错，但出现引号则会有问题</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inQuotes<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 发现空格且不在引号内则断点至当前位置需要处理</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 断点至当前位置子串不为空则处理</span></span>
<span class="line">          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接取的key=&quot;value&quot;键值对</span></span>
<span class="line">          point <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 移动断点指针继续遍历</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将最后的键值对推入结果数组</span></span>
<span class="line">    result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 将key=&quot;value&quot;键值对进行分离形成新数组</span></span>
<span class="line">      <span class="token keyword">let</span> cache <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(.+)=&quot;(.+)&quot;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">value</span><span class="token operator">:</span> cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> templateString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span>
<span class="line">      &lt;h3 class=&quot;aa bb cc&quot; data-n=&quot;7&quot; id=&quot;mybox&quot;&gt;你好&lt;/h3&gt;</span>
<span class="line">      &lt;ul&gt;</span>
<span class="line">        &lt;li&gt;A&lt;/li&gt;</span>
<span class="line">        &lt;li&gt;B&lt;/li&gt;</span>
<span class="line">        &lt;li&gt;C&lt;/li&gt;</span>
<span class="line">      &lt;/ul&gt;</span>
<span class="line">    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Solution<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>templateString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">Solution<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板引擎mustache" tabindex="-1"><a class="header-anchor" href="#模板引擎mustache"><span>模板引擎mustache</span></a></h2><p>模板引擎用于将数据变为视图，如：</p><ul><li>模板</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {{#students}}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myli<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      学生{{name}}的爱好是</span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        {{#hobbies}}</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{.}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        {{/hobbies}}</span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {{/students}}</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">students</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;hobbies&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;编程&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;游泳&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;hobbies&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;看书&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;弹琴&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;画画&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;小强&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;hobbies&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;锻炼&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>转换为</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myli<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>学生小明的爱好是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>编程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myli<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>学生小红的爱好是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>看书<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>弹琴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>画画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myli<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>学生小强的爱好是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>锻炼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除mustache之外，通过</p><p>a) 纯DOM的方法<br> b) 数组join方法<br> c) es6的模板字符串等方法也可进行转换</p><p>mustache算法 首先将模板字符串解析分词为 tokens 形式，然后将 tokens 结合数据解析为新的 dom 字符串<br> mustache 先于 vue 出现，后来被 vue 所采用，mustache官方<a href="https://github.com/janl/mustache.js" target="_blank" rel="noopener noreferrer">项目地址</a></p>`,34),f={class:"custom-container tip"},y=n("p",{class:"custom-container-title"},"实现简单的mustache",-1),w=e('<p>除mustache之外，还有比较流行的模板引擎有：Jade,EJS,JSHTML, Handlebars等</p><h2 id="虚拟dom和diff算法" tabindex="-1"><a class="header-anchor" href="#虚拟dom和diff算法"><span>虚拟DOM和Diff算法</span></a></h2><p>snabbdom是著名的虚拟DOM库，diff算法的鼻祖，vue源码借鉴了snabbdom，<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener noreferrer">snabbdom地址</a><br> 虚拟DOM:用JavaScript对象描述DOM的层次结构。DOM中的一切属性都在虚拟DOM中有对应的属性。 snabbdom使用渲染函数(h函数)生成虚拟DOM，通过diff算法将虚拟DOM转换为真实DOM，并提交真实DOM渲染任务</p><h3 id="h函数" tabindex="-1"><a class="header-anchor" href="#h函数"><span>h函数</span></a></h3><p>h函数使用解析好的tokens来递归的生成虚拟节点VNode对象，便于后续diff算法比较</p><h3 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法"><span>diff算法</span></a></h3><p>采用深度优先遍历，把树形结构按层级分解，只比较同级元素 同一VNode的判定标准：新旧VNode的key和sel(标签名)相同(ps:只以此为标准，并不代表两VNode完全相同，因此还会进行精细化比较)<br> 判定为同一个VNode然后进行精细化比较，只进行同层比较不进行跨层比较(不会进行父子VNode交叉比较，算是一种算法效率的权衡)</p><p>单个VNode的精细化比较策略：</p><ol><li>若新旧VNode指向内存中同一对象则无需更新</li><li>比较VNode的text是否相同，否则更新对应的真实DOM文本node</li><li>若旧VNode和新VNode中都存在children VNode序列，则调用同层比较策略进行比较</li><li>若旧VNode中不存在children VNode，而新VNode中存在，则将新VNode中全部children VNode插入到旧VNode对应的真实DOM中</li></ol><p>同层比较策略：</p><ol><li>使用左右双指针对撞分别对新旧序列进行遍历，跳过空VNode</li><li>若旧序列左指针指向VNode(以下简称旧左VNode，其他简称以此类推)与新左VNode相同，则递归调用精细化比较策略，右移新旧序列的左指针</li><li>判定新旧序列的右指针指向VNode是否相等，若相等，则递归进行精细化比较，并左移新旧序列的右指针</li><li>判定旧左VNode和新右VNode是否相等，若相等(表明该node被移动到了后方，因此进行对应更新)，则对两VNode递归进行精细化比较，同时将旧左VNode对应真实DOM的node移动到旧右VNode对应真实DOM的node后方，右移旧左指针，左移新右指针</li><li>判定旧右VNode和新左VNode是否相等，若相等(表明该node被移动到了前方，因此进行对应更新)，对两VNode递归进行精细化比较，同时将旧右VNode对应真实DOM的node移动到旧左VNode对应真实DOM的node前方，左移旧右指针，右移新左指针</li><li>若新旧左右指针均未匹配上，则利用辅助Map在旧左和旧右之间查找匹配新左节点，若不存在则创建并在旧左VNode对应真实DOM的node之前插入新左VNode，若存在则进行精细化比较，并在真实DOM中移动对应节点到旧左位置之前，将当前匹配的旧左VNode置空，方便后续跳过该节点的遍历，右移新左指针</li><li>遍历结束的条件为新序列或旧序列指针对撞完成</li><li>遍历完成后若，新序列中还有VNode剩余(说明旧序列先遍历完成)，循环创建并插入新序列中剩余VNode</li><li>若旧序列中还有VNode剩余则循环删除剩余的VNode</li></ol>',11),x={class:"custom-container tip"},_=n("p",{class:"custom-container-title"},"简单手写实现演示如下",-1),N=["src"];function V(c,q){const s=l("RouteLink");return u(),i("div",null,[m,n("div",v,[g,n("iframe",{id:"reactive-demo",height:"100",width:"100%",frameborder:"0",src:c.$withBase("/demo/reactive.html")},null,8,b),n("p",null,[a(s,{to:"/vue/vue2plus/reactive.html"},{default:p(()=>[t("代码")]),_:1})])]),h,n("div",f,[y,n("p",null,[a(s,{to:"/vue/vue2plus/mustache.html"},{default:p(()=>[t("源码")]),_:1})])]),w,n("div",x,[_,n("iframe",{id:"vDom-demo",height:"100px",width:"100%",frameborder:"0",src:c.$withBase("/demo/vDom.html")},null,8,N),n("p",null,[a(s,{to:"/vue/vue2plus/vDom.html"},{default:p(()=>[t("源码")]),_:1})])])])}const j=o(d,[["render",V],["__file","index.html.vue"]]),O=JSON.parse('{"path":"/vue/vue2plus/","title":"vue2进阶知识汇总整理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"双向绑定与响应式","slug":"双向绑定与响应式","link":"#双向绑定与响应式","children":[]},{"level":2,"title":"computed原理","slug":"computed原理","link":"#computed原理","children":[]},{"level":2,"title":"watch监听原理","slug":"watch监听原理","link":"#watch监听原理","children":[]},{"level":2,"title":"AST(abstract syntax tree)抽象语法树","slug":"ast-abstract-syntax-tree-抽象语法树","link":"#ast-abstract-syntax-tree-抽象语法树","children":[{"level":3,"title":"预设算法题","slug":"预设算法题","link":"#预设算法题","children":[]},{"level":3,"title":"html解析","slug":"html解析","link":"#html解析","children":[]}]},{"level":2,"title":"模板引擎mustache","slug":"模板引擎mustache","link":"#模板引擎mustache","children":[]},{"level":2,"title":"虚拟DOM和Diff算法","slug":"虚拟dom和diff算法","link":"#虚拟dom和diff算法","children":[{"level":3,"title":"h函数","slug":"h函数","link":"#h函数","children":[]},{"level":3,"title":"diff算法","slug":"diff算法","link":"#diff算法","children":[]}]}],"git":{"updatedTime":1679846575000,"contributors":[{"name":"vito","email":"vitotu@qq.com","commits":14}]},"filePathRelative":"vue/vue2plus/README.md"}');export{j as comp,O as data};
