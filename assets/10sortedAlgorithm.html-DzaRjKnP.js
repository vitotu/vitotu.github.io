import{_ as s,a,b as p,c as e,d as t,e as o,f as c,g as l}from"./countingSort-Cm7uLBWz.js";import{_ as i,c as u,a as r,o as k}from"./app-BpN4Y1f5.js";const d="/assets/overviewSort-CSVZS1AV.png",m="/assets/sortComplexity-DSLVsjHt.png",b="/assets/bucketSort-YDFu8gTF.gif",v="/assets/radixSort-Bwrylu8F.gif",h={};function g(y,n){return k(),u("div",null,n[0]||(n[0]=[r('<h1 id="十大经典排序算法python实现" tabindex="-1"><a class="header-anchor" href="#十大经典排序算法python实现"><span>十大经典排序算法python实现</span></a></h1><p><img src="'+d+'" alt="overviewSort.png"><img src="'+m+'" alt="sortComplexity.png"></p><h2 id="冒泡排序法-bubblesort" tabindex="-1"><a class="header-anchor" href="#冒泡排序法-bubblesort"><span>冒泡排序法(bubbleSort)</span></a></h2><p>相邻元素比较大小进行互换</p><picture><source srcset="https://cdnjson.com/images/2024/05/13/bubbleSortb5be109d39f7ca53.gif"><img src="'+s+`" alt="bubbleSort.gif"></picture><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                flag <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">#flag为False说明arr已经是排好序的无须再进行排序直接眺出节约时间</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">return</span> arr</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>bubbleSort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="选择排序-选择最小值放入排序序列" tabindex="-1"><a class="header-anchor" href="#选择排序-选择最小值放入排序序列"><span>选择排序(选择最小值放入排序序列)</span></a></h2><p>每次从未排序序列中选择一个最小值放入已排序序列的末尾<br><img src="`+a+`" alt="selectionSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        min_index <span class="token operator">=</span> i  <span class="token comment">#默认未排序序列第一位为最小值，因此循环从第二位开始，找到最小值后与之互换值</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">                min_index <span class="token operator">=</span> j</span>
<span class="line">        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> arr</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>select_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h2><p>通过构建有序序列，对未排序的数据，在已知数列中从后向前扫描，记当前位置为temp，若扫描位的元素比temp大，则将该元素后移一位，直到找到比temp小的元素为止，把temp插入到该元素的后一位。 <img src="`+p+`" alt="insertionSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">:</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment">#j+1等于i,将较大的元素后移一位</span></span>
<span class="line">            j <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line">        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp</span>
<span class="line">    <span class="token keyword">return</span> arr</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序"><span>希尔排序</span></a></h2><p><img src="`+e+`" alt="shellSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># TODO：更新 python解法错误</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    step <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">    group <span class="token operator">=</span> count <span class="token operator">//</span> step <span class="token comment">#the number of divie</span></span>
<span class="line">    <span class="token keyword">while</span> group <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            j <span class="token operator">=</span> i <span class="token operator">+</span> group</span>
<span class="line">            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">:</span></span>
<span class="line">                key <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment">#the later</span></span>
<span class="line"><span class="token comment">#                 k = j - group #the former</span></span>
<span class="line">                </span>
<span class="line">                <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">:</span> <span class="token comment">#used little insert sort</span></span>
<span class="line">                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key</span>
<span class="line">                    i <span class="token operator">-=</span> group</span>
<span class="line">                </span>
<span class="line">                j <span class="token operator">+=</span> group <span class="token comment">#the index of later</span></span>
<span class="line">        group <span class="token operator">//=</span> step</span>
<span class="line">    <span class="token keyword">return</span> arr</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">592</span><span class="token punctuation">,</span><span class="token number">401</span><span class="token punctuation">,</span><span class="token number">874</span><span class="token punctuation">,</span><span class="token number">141</span><span class="token punctuation">,</span><span class="token number">348</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">911</span><span class="token punctuation">,</span><span class="token number">887</span><span class="token punctuation">,</span><span class="token number">820</span><span class="token punctuation">,</span><span class="token number">283</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[911, 911, 911, 911, 887, 72, 911, 887, 911, 911]
</code></pre><h2 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h2><p>把长度为n的输入序列分成两个长度为n/2的子序列，对着两个子序列分别采用归并排序，将两个排序好的子序列合并成一个最终的排序序列</p><p><img src="`+t+`" alt="mergeSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="line">    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#must exhaust i or j</span></span>
<span class="line">        <span class="token keyword">if</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            i <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment">#move i to next left index</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            j <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment">#move j to next right index</span></span>
<span class="line">    res <span class="token operator">+=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">#merge over left or right</span></span>
<span class="line">    res <span class="token operator">+=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> arr</span>
<span class="line">    num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span></span>
<span class="line">    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#分而治之，分别对左右递归调用归并排序知道arr长度为1</span></span>
<span class="line">    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token comment">#函数返回合并的左右序列，排序运算主要在merge中完成</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>merge_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h2><p>从数列中挑出一个元素作为基准，比基准小的元素全部排在左边，反之在右边。这个分区结束之后，基准尽量位于中间。递归的对基准左右两边的数列进行排序。 <img src="`+o+`" alt="quickSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> random</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">fastSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&#39;&#39;&#39;sort a list object array use fast sorting algorithm</span>
<span class="line">    arg:</span>
<span class="line">        input a list object array</span>
<span class="line">    </span>
<span class="line">    return:</span>
<span class="line">        a list sorted from small to big used fast sort</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> array</span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        base_num <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token comment">#假定第一个数为基准</span></span>
<span class="line"><span class="token comment">#         base_num = random.choice(array) #随机选择一个数</span></span>
<span class="line">        smaller <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> base_num<span class="token punctuation">]</span></span>
<span class="line">        bigger <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">&gt;</span> base_num<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">return</span> fastSort<span class="token punctuation">(</span>smaller<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>base_num<span class="token punctuation">]</span> <span class="token operator">+</span> fastSort<span class="token punctuation">(</span>bigger<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fastSort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h2><p>利用堆数据结构所设计的排序算法，通过每次弹出堆顶元素实现排序 <img src="`+c+`" alt="heapSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> heapq</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">while</span> arr<span class="token punctuation">:</span></span>
<span class="line">        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>heap_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序"><span>计数排序</span></a></h2><p>将输入数据值转化为键存储在额外开辟的数组空间中，找出待排序数组中最大的元素，建立该长度的数组c，统计数组中每个值为i的元素出现的次数，对所有计数累加，表示该元素位于有序表中第几项，反向填充目标数组，将每个元素i放在新数组第c[j]项，每放一个元素就将c[i]-1 <img src="`+l+`" alt="countingSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    max_arr <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> a <span class="token keyword">in</span> arr<span class="token punctuation">:</span> <span class="token comment">#对arr中元素进行计数</span></span>
<span class="line">        c<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_arr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#计算下标所代表的数在即将排好序的列表中第一次出现在第几个位置</span></span>
<span class="line">        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        res<span class="token punctuation">[</span>c<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">#c[arr[i]]-1表示arr[i]所代表值在有序表中的索引位</span></span>
<span class="line">        c<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>          <span class="token comment">#对已排序数字对应位置进行计数，保证有多位相同数字时上式索引正确</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>count_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序"><span>桶排序</span></a></h2><p>假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序。假定一个定量长度的数组当空桶，遍历输入数据，并且把数据一个个放进对应的桶中，对每个不是空的桶进行排序，从不是空的桶里把排好序的数据拼接起来 <img src="`+b+`" alt="bucketSort"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    pre_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> a <span class="token keyword">in</span> arr<span class="token punctuation">:</span> <span class="token comment">#对arr元素进行统计</span></span>
<span class="line">        pre_lst<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pre_lst<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        j <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> pre_lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            j <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        i <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>bucket_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre><h2 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序"><span>基数排序</span></a></h2><p><img src="`+v+`" alt="radixSort.gif"></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    max_arr <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    d <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>max_arr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">:</span></span>
<span class="line">            s<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span>k<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    </span>
<span class="line">        arr <span class="token operator">=</span> <span class="token punctuation">[</span>j <span class="token keyword">for</span> i <span class="token keyword">in</span> s <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> arr</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>radix_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 5, 5, 5, 8]
</code></pre>`,44)]))}const _=i(h,[["render",g]]),j=JSON.parse('{"path":"/algorithm/10sortedAlgorithm.html","title":"十大经典排序算法python实现","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"冒泡排序法(bubbleSort)","slug":"冒泡排序法-bubblesort","link":"#冒泡排序法-bubblesort","children":[]},{"level":2,"title":"选择排序(选择最小值放入排序序列)","slug":"选择排序-选择最小值放入排序序列","link":"#选择排序-选择最小值放入排序序列","children":[]},{"level":2,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]},{"level":2,"title":"希尔排序","slug":"希尔排序","link":"#希尔排序","children":[]},{"level":2,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":2,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":2,"title":"堆排序","slug":"堆排序","link":"#堆排序","children":[]},{"level":2,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[]},{"level":2,"title":"桶排序","slug":"桶排序","link":"#桶排序","children":[]},{"level":2,"title":"基数排序","slug":"基数排序","link":"#基数排序","children":[]}],"git":{"updatedTime":1715706754000,"contributors":[{"name":"vito","username":"vito","email":"vitotu@qq.com","commits":4,"url":"https://github.com/vito"}],"changelog":[{"hash":"7eefab34b0e8d0d9d1e9814856456a661024e6dd","time":1715706754000,"email":"vitotu@qq.com","author":"vito","message":"udpate cdn img urls"},{"hash":"6d8c4ac3800e3c21ae85446ac223ce64a37620ca","time":1651768003000,"email":"vitotu@qq.com","author":"vito","message":"update format"},{"hash":"2ab75a4ac137ecec8d8944936a6f715ba5b2ac6a","time":1651570358000,"email":"vitotu@qq.com","author":"vito","message":"fix path"},{"hash":"5d4013bbab22c3330a48db00e3b5401351e82a9e","time":1651510828000,"email":"vitotu@qq.com","author":"vito","message":"move note to github"}]},"filePathRelative":"algorithm/10sortedAlgorithm.md"}');export{_ as comp,j as data};
