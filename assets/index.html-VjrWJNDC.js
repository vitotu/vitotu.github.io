import{_ as n,c as s,o as a,d as e}from"./app-DK9CTBb5.js";const p={},t=e(`<h1 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>vite</span></a></h1><p>vite是vue团队基于rollup开发的新一代前端构建工具，依托ESM原生模块优化了HMR，相对于webpack构建与更新速度有了极大的提升</p><p>vite启动时不需要对业务代码进行打包，启动速度非常快，当浏览器请求某模块时，按需对模块内容动态编译，同时vite利用http头加速整个页面的重新加载<br> 同时vite使用Esbuild预构建第三方依赖</p><h2 id="与webpack-相比" tabindex="-1"><a class="header-anchor" href="#与webpack-相比"><span>与webpack 相比</span></a></h2><p>webpack是js应用程序的静态模块打包器，通过递归构建依赖关系图，然后将模块打包成一个或多个包<br> 整个运行流程是串行的过程，读取所有模块、打包、运行依次执行</p><p>vite启动时不需要打包，也就不需要分析模块的依赖，因此按需动态编译，启动速度非常快</p><ul><li>构建工具</li></ul><p>构建工具包括：预编译、语法检查、词法检查、依赖处理、文件合并、文件压缩、单元测试、版本管理等</p><p>代码转换：将TypeScript编译成JavaScript、将SCSS编译成CSS等。 文件优化：压缩JavaScript、CSS、HTML代码，压缩合并图片等。 代码分割：提取多个页面的公共代码，提取首屏不需要执行部分的代码让其异步加载。 模块合并：在采用模块化的项目里会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件。 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。 自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。</p><p>常见构建工具： webpack：一站式构建工具，一切文件都是模块，通过loader转换文件、plugin注入钩子 babel：工具链，将ECMA2015+的版本转换向后兼容的js语法，以便兼容老旧浏览器 rollup:与webpack类似，但专注于ES6的模块打包工具 parcel：极速零配置web应用打包工具，使用worker多进程启用多核编译 另外还有gulp、browserify、grunt等</p><ul><li>打包工具</li></ul><p>打包工具更关注打包过程：依赖管理和版本管理等</p><h2 id="esm" tabindex="-1"><a class="header-anchor" href="#esm"><span>ESM</span></a></h2><p>ESM是ES Module的缩写，与CommonJS、AMD等都是模块化规范<br> ESM规范指令仅有<code>import</code>, <code>export</code>, <code>export default</code>三个<br> 导入可以仅加载指定的方法，其他方法不加载，也称为编译时加载或静态加载，便于Tree Shaking<br> script标签引入ESM时，设置type=module标识为顶级模块<br> ES6模块自动采用严格模式：</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>变量必须声明后再使用<br> 函数的参数不能有同名属性，否则报错<br> 不能使用with语句<br> 不能对只读属性赋值，否则报错<br> 不能使用前缀 0 表示八进制数，否则报错<br> 不能删除不可删除的属性，否则报错<br> 不能删除变量delete prop，会报错，只能删除属性delete global[prop]<br> eval不会在它的外层作用域引入变量<br> eval和arguments不能被重新赋值<br> arguments不会自动反映函数参数的变化<br> 不能使用arguments.callee<br> 不能使用arguments.caller<br> 禁止this指向全局对象<br> 不能使用fn.caller和fn.arguments获取函数调用的堆栈<br> 增加了保留字（比如protected、static和interface）</p></div><p>ESM使用实时绑定的方式，导出和导入的模块都指向相同的内存地址(对值的引用)</p><p>ESM的模块解析发生在编译阶段有人称为编译时输出接口<br> JS引擎在对脚本静态分析时，遇到模块加载命令import会生成一个只读引用，等脚本真正执行时，再跟根据引用到被加载的模块中取值；</p><h2 id="预构建" tabindex="-1"><a class="header-anchor" href="#预构建"><span>预构建</span></a></h2><p>为了兼容CommonJS、UMD，以及提升性能，首次执行vite时，服务会对node_modules模块和配置optimizeDeps的目标进行预构建<br> 这个过程将CommonJS和UMD等发布的依赖项转换为ESM；将有多个内部模块的ESM依赖关系转换为单模块，以提升后续页面的加载性能<br> vite对依赖进行扫描，对于裸依赖进行预构建(通过路径去访问的模块不是裸依赖)，此举是为了找到通过npm安装的第三方模块使用esbuild进行预构建，并将编译后的文件存储的node_modules/.vite目录中缓存</p><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h2><p>同webpack一样，vite可以预定义不同的环境变量来针对不同的环境使用不同的配置打包<br> 在vite.config.ts文件中env的获取需要通过loadEnv函数<br> loadEnv 接收三个参数:<br> mode：模式<br> envDir：环境变量配置文件所在目录<br> prefix：接受的环境变量前缀，默认为 VITE_<br> 在vite中默认是VITE_，为 &#39;&#39;，则加载所有环境变量</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// vite.config.ts文件中</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> loadEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ctx.mode : 取值为vite运行时传入的参数，如运行vite build --mode dev 则mode = dev</span></span>
<span class="line">  <span class="token comment">// ctx.command: 取值为 serve, build等</span></span>
<span class="line">  <span class="token comment">// process.cwd() 用于获取命令运行当前路径，.env.XXX环境变量文件也通常放在这个路径下</span></span>
<span class="line">  <span class="token comment">// .env.XXX 的XXX后缀部分命名需要与vite运行命令保持一致</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他文件中，通过import.meta.env也能读取到环境变量 TODO:进一步扩展</p><h2 id="css相关部分处理" tabindex="-1"><a class="header-anchor" href="#css相关部分处理"><span>CSS相关部分处理</span></a></h2><h3 id="css模块化" tabindex="-1"><a class="header-anchor" href="#css模块化"><span>CSS模块化</span></a></h3><p>css modules不是官方标准也不是浏览器特性，而是构建工具对css类名和选择器的作用域进行限定的一种方式<br> 它是通过编译的方式修改选择器名字为全局唯一的方式来实现 css 的样式隔离。<br> vite通过<code>.block__element–modifier</code>的命名规范来实现样式隔离<br> 另外与之对应的vue-loader使用scoped的选项，对css选择器和元素添加data-xxx属性实现样式隔离</p><h3 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss"><span>postCSS</span></a></h3><p>postCSS主要用于CSS工程化，支持：自动添加浏览器前缀、代码合并、代码压缩等<br> vite已经集成PostCSS无需在此安装, 其配置文件可单独配置postcss.config.js，也可在vite.config.js中进行</p><h3 id="css预处理器" tabindex="-1"><a class="header-anchor" href="#css预处理器"><span>css预处理器</span></a></h3><p>vite内置支持.scss, .sass, .less, .styl, .stylus的文件支持，不需要额外的插件，但必须安装对应的预处理器依赖<br> sass, less, stylus</p><h2 id="文件处理" tabindex="-1"><a class="header-anchor" href="#文件处理"><span>文件处理</span></a></h2><p>vite支持import.meta.glob, import.meta.globEager</p><p>若只想获取资源url，而不想导入脚本可在导入后方添加<code>?url</code>后缀:<code>import jsUrl from &#39;./assets/a.js?url&#39;</code><br> import导入图片会转换为一个路径， 添加<code>?raw</code>则表示以二进制方式读取</p><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h2><p>vite插件类似于webpack的loader+plugin,用于扩展vite的功能，如文件图片压缩，commonjs支持，打包进度条等<br> vite插件基于Rollup插件接口扩展<br> 浏览器发起请求后dev server通过中间件对请求拦截，然后对源文件所resolve, load, transform等操作，将转换后的内容发送给浏览器</p><p>范例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 显示在 warning 和 error 中，用于警告和错误展示</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;hooks-order&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 初始化hooks，只走一次。服务器启动时被调用</span></span>
<span class="line">    <span class="token function">options</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;options&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 启动时调用一次</span></span>
<span class="line">    <span class="token comment">// vite （本地）服务启动时调用，在这个函数中可以访问 rollup 的配置</span></span>
<span class="line">    <span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;buildStart&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// vite特有钩子，在解析 Vite 配置前调用。</span></span>
<span class="line">    <span class="token comment">// 接收原始用户配置（命令行选项指定的会与配置文件合并）</span></span>
<span class="line">    <span class="token comment">// 和一个描述配置环境的变量</span></span>
<span class="line">    <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">userConfig<span class="token punctuation">,</span> env</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;userConfig&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Vite配置确认，在解析 Vite 配置后调用</span></span>
<span class="line">    <span class="token function">configResolved</span><span class="token punctuation">(</span><span class="token parameter">resolvedCofnig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;configResolved&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 用于配置dev server，可以进行中间件操作</span></span>
<span class="line">    <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;configureServer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// server.app.use((req, res, next) =&gt; {</span></span>
<span class="line">      <span class="token comment">// // custom handle request...</span></span>
<span class="line">      <span class="token comment">// })</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 用于转换宿主页，接收当前的 HTML 字符串和转换上下文</span></span>
<span class="line">    <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;transformIndexHtml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> html</span>
<span class="line">      <span class="token comment">// return html.replace(</span></span>
<span class="line">      <span class="token comment">// /&lt;title&gt;(.*?)&lt;/title&gt;/,</span></span>
<span class="line">      <span class="token comment">// \`&lt;title&gt;Title replaced!&lt;/title&gt;\`</span></span>
<span class="line">      <span class="token comment">// )</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 通用钩子，创建自定义确认函数</span></span>
<span class="line">    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 此处查找文件，输出本地实际路径</span></span>
<span class="line">      <span class="token comment">// console.log(resolveId)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">===</span> <span class="token string">&#39;virtual-module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolvedId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> source<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 创建自定义加载函数，可用于返回自定义的内容，每个传入模块请求时被调用</span></span>
<span class="line">    <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 加载文件到内存中，输出文件模块的代码字符串</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token string">&#39;virtual-module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;export default &quot;This is virtual!&quot;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 可用于转换已加载的模块内容（转变源码为需要的代码），类似于webpack的loader</span></span>
<span class="line">    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token string">&#39;virtual-module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> code</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>load和transform都能修改内容，load主要是处理文件，transform主要是转换模块</p><h3 id="虚拟模块" tabindex="-1"><a class="header-anchor" href="#虚拟模块"><span>虚拟模块</span></a></h3><p>虚拟模块是 Vite 沿用 Rollup 的虚拟模块，虚拟模块类似 alias 别名，<br> 但是模块的内容并非直接从磁盘中读取，而是编译时生成。<br> 虚拟模块使你可以对使用 ESM 语法的源文件传入一些编译时信息。</p>`,40),l=[t];function c(i,o){return a(),s("div",null,l)}const r=n(p,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/vite/","title":"vite","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"与webpack 相比","slug":"与webpack-相比","link":"#与webpack-相比","children":[]},{"level":2,"title":"ESM","slug":"esm","link":"#esm","children":[]},{"level":2,"title":"预构建","slug":"预构建","link":"#预构建","children":[]},{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":2,"title":"CSS相关部分处理","slug":"css相关部分处理","link":"#css相关部分处理","children":[{"level":3,"title":"CSS模块化","slug":"css模块化","link":"#css模块化","children":[]},{"level":3,"title":"postCSS","slug":"postcss","link":"#postcss","children":[]},{"level":3,"title":"css预处理器","slug":"css预处理器","link":"#css预处理器","children":[]}]},{"level":2,"title":"文件处理","slug":"文件处理","link":"#文件处理","children":[]},{"level":2,"title":"插件","slug":"插件","link":"#插件","children":[{"level":3,"title":"虚拟模块","slug":"虚拟模块","link":"#虚拟模块","children":[]}]}],"git":{"updatedTime":1676555314000,"contributors":[{"name":"vito","email":"vitotu@qq.com","commits":3}]},"filePathRelative":"vite/README.md"}');export{r as comp,d as data};
