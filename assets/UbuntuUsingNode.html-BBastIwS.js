import{_ as s,c as a,a as n,o as l}from"./app-UvU-bZa6.js";const t={};function o(i,e){return l(),a("div",null,e[0]||(e[0]=[n(`<h1 id="linux使用笔记" tabindex="-1"><a class="header-anchor" href="#linux使用笔记"><span>Linux使用笔记</span></a></h1><p>以Ubuntu为例</p><h2 id="ubuntu配置" tabindex="-1"><a class="header-anchor" href="#ubuntu配置"><span>Ubuntu配置</span></a></h2><h3 id="ubuntu环境变量" tabindex="-1"><a class="header-anchor" href="#ubuntu环境变量"><span>ubuntu环境变量</span></a></h3><p>设置环境变量有四个地方 /etc/profile : 所有用户login shell载入配置 ~/.profile : 当前用户login shell载入配置 /etc/bash.bashrc ： 所有用户non-login shell载入配置 ~/.bashrc : 当前用户non-login shell载入配置</p><h4 id="shell模式" tabindex="-1"><a class="header-anchor" href="#shell模式"><span>shell模式</span></a></h4><ul><li>交互式login shell：需要登录的输入命令立即反馈输出的shell</li><li>非交互式login shell：需要登录但不与用户进行交互的shell(运行shell脚本)</li><li>交互式non-login shell：不需要登录的输入命令立即反馈输出的shell</li><li>非交互式non-login shell：不需要登录但不与用户进行交互的shell(运行shell脚本)</li></ul><p>通常用户打开shell为交互式shell，输入命令立即反馈输出，而非交互式则是shell脚本运行的环境</p><p>用户初次登录系统时会生成login shell扫描依次/etc/profile;~/.bash_profile;~/.bash_??;~/.profile;等文件载入初始的环境变量等配置</p><p>当用户使用gui打开新的shell时通常打开的时交互式non-login shell(不需要登录)，此时系统会在登录的环境变量基础上扫描/etc/bash.bashrc;~/.bashrc文件载入环境变量等配置</p><p>另外针对某个shell，若增加了环境变量，但没有删除，则该变量将会一直存在与此shell环境中，因此从bashrc文件中删除环境变量定义的代码，并运行source bashrc命令后该环境变量将不会消失，但重新打开新的shell时会重新载入bashrc文件，因此该变量将不存在于新的shell</p><p>判断当前shell是login shell 或non-login shell的方法：在当前shell运行指令<code>echo $0</code>若返回结果为-bash则为login shell，若是bash时则是non-login shell</p><p>另外/etc/profile还会直接运行/etc/profile.d目录下的所有非交互式.sh脚本文件，~/.profile文件也会载入~/.bashrc文件中的配置</p><p>其中/etc/profile需重启或注销生效，若使用<code>source /etc/profile</code>指令，仅对当前shell立即生效，~/.profile相同</p><p>而/etc/bash.bashrc使用source指令后立即生效，~/.bashrc相同</p><p>/etc/bash.bashrc的设置针对所有用户包括超级用户su;~/.bashrc仅针对当前用户有效</p><p>/etc/profile的设置实测仅针对登录用户有效</p><p>其中/etc/profile中指定运行/etc/profile.d/目录(若存在)下的所有非交互式sh脚本也可进行环境变量修改</p><h4 id="特殊的shell变量" tabindex="-1"><a class="header-anchor" href="#特殊的shell变量"><span>特殊的shell变量</span></a></h4><p>结合语句案例解析：<code>if [ &quot;\${-#*i}&quot; != &quot;$-&quot;]</code><br> 此与语句用于判断当前shell是否不是交互式shell,<code>$-</code>是特殊变量，官方文档中定义为：</p><blockquote><p>(Hyphen.) Expands to the current option flags (the single-letter option names concatenated into a string) as specified on invocation, by the set special built-in command, or implicitly by the shell.</p></blockquote><p><a href="https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_05_02" target="_blank" rel="noopener noreferrer">参考文献</a><br> 如<code>echo $-</code>可能输出himBHs，表示当前shell的-h,-m,-B,-H选项启用,而-i表示可交互式shell,-s表示从标准输入读取数据<br> 而<code>echo &quot;\${-#*i}&quot;</code>是对参数&quot;-&quot;进行操作，官方文档定义的模式:</p><blockquote><p>\${parameter#[word]}</p><blockquote><p>Remove Smallest Prefix Pattern. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the smallest portion of the prefix matched by the pattern deleted. If present, word shall not begin with an unquoted &#39;#&#39;.</p></blockquote></blockquote><blockquote><p>\${parameter##[word]}</p><blockquote><p>Remove Largest Prefix Pattern. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the largest portion of the prefix matched by the pattern deleted.</p></blockquote></blockquote><p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02" target="_blank" rel="noopener noreferrer">参考文献</a>，该语句将删除-中的前缀直到遇到第一个i(删除部分包括i)</p><h4 id="代理配置" tabindex="-1"><a class="header-anchor" href="#代理配置"><span>代理配置</span></a></h4><p>编辑/etc/profile文件将对所有用户生效 profile中shell命令将引导运行profile.d目录中的所有sh脚本 因此也可以将代理配置写到profile.d目录中的shell脚本中</p><p>通过设置all_proxy、ftp_proxy、http_proxy、https_proxy、no_proxy并export这些环境变量来设置系统上网代理服务器</p><h3 id="网络篇" tabindex="-1"><a class="header-anchor" href="#网络篇"><span>网络篇</span></a></h3><p>curl可用于模拟get、post请求等网络请求</p><p>查看网络端口占用情况<code>netstat -ntlp</code></p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>挂起后台运行指定的脚本<code>nohup &lt;脚本及运行参数&gt; &gt; &lt;输出log文件&gt; 2&gt;&amp;1 &amp;</code>，示例：<br> 后台挂起test.py程序<br><code>nohup test.py --arg1 &gt; runlog.out 2&gt;&amp;1 &amp;</code> 挂起test.py程，将运行log输出到runlog.out文件中，将标准错误(2)重定向(&gt;)标准输出(&amp;1)中也就是屏幕上，组合起来即为2&gt;&amp;1</p><h3 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理"><span>进程管理</span></a></h3><p>TODO:待完善</p><p><code>ps</code>命令用于查看当前运行的进程，配合grep进行字符串查找，可筛选出想要的进程<br> 配合awk命令 <code>awk &#39;{print $2}&#39;</code> 打印第二列的内容，即进程PID<br> 通过xargs将筛选到的PID传递给kill命令，批量杀掉指定进程</p><p><code>ps -ef | grep &lt;string&gt; | awk &#39;{print $2}&#39; | xargs kill -9</code></p><h3 id="shell编程" tabindex="-1"><a class="header-anchor" href="#shell编程"><span>shell编程</span></a></h3><p>获取shell表达式的输出并重定向到a变量中<br><code>a=$(&lt;shell表达式&gt;)</code><br> 判断路径下是否有该目录存在</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>某路径目录<span class="token operator">&gt;</span> <span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">then</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token string">&quot;目录存在&quot;</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token string">&quot;目录不存在&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="xargs指令" tabindex="-1"><a class="header-anchor" href="#xargs指令"><span>xargs指令</span></a></h4><p>将标准输入转换为命令行参数，<code>|</code>管道连接符将左侧的标准输出连接到右边的标准输入，但部分命令行工具不支持标准输入作为参数，仅支持命令行参数，因此xargs通常与管道符一起使用<br> 如：<code>echo &quot;output&quot; | xargs echo</code>，xargs调用形式为<code>xargs [-options] [command]</code><br> 单独使用xargs命令等同于<code>xargs echo</code>并等待用户输入，按下ctrl+d结束输入，并输出用户输入的内容<br> xargs默认使用空格<code>\\s</code>和换行符<code>\\n</code>作为分隔符，拆分标准输入为多个命令行参数，通过<code>-d</code>参数可更改分隔符</p><h2 id="ubuntu下mysql8-0的使用" tabindex="-1"><a class="header-anchor" href="#ubuntu下mysql8-0的使用"><span>ubuntu下mysql8.0的使用</span></a></h2><h3 id="忘记root密码解决方案" tabindex="-1"><a class="header-anchor" href="#忘记root密码解决方案"><span>忘记root密码解决方案</span></a></h3><p>使用系统提供的临时账户登录去修改root账户密码： <code>sudo cat /etc/mysql/debian.cnf</code> 复制其中的账户名和密码进行登录</p><div class="language-code line-numbers-mode" data-highlighter="prismjs" data-ext="code"><pre><code><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;新密码&#39;;</span>
<span class="line">flush privileges; --立即刷新进内存 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他账户管理" tabindex="-1"><a class="header-anchor" href="#其他账户管理"><span>其他账户管理</span></a></h3><p>创建账号和密码 <code>create user &#39;用户名&#39;@&#39;ip地址&#39; identified by &#39;密码&#39;;</code> 开放账户全部权限 <code>grant all on *.* to &#39;用户名&#39;@&#39;ip地址&#39; with grant option;</code> 删除权限 <code>revoke all privileges on 数据库名.表名 from &#39;用户名&#39;@&#39;ip地址&#39;;</code> 删除用户 <code>drop user &#39;用户名&#39;@&#39;ip地址&#39;</code></p><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>docker</span></a></h2><p>常用命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> pull <span class="token operator">&lt;</span>镜像名<span class="token operator">&gt;</span> <span class="token comment"># 拉取镜像</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> </span>
<span class="line"><span class="token function">docker</span> build</span>
<span class="line"><span class="token function">docker</span> push</span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>容器id<span class="token operator">&gt;</span> /bin/bash <span class="token comment"># 以交互式shell的方式进入正在运行的容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">cp</span> <span class="token operator">&lt;</span>本地文件路径<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>容器id<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>容器路径<span class="token operator">&gt;</span> <span class="token comment"># 向docker容器中复制本机文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://yeasy.gitbook.io/docker_practice" target="_blank" rel="noopener noreferrer">参考文档</a></p><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh"><span>ssh</span></a></h2><h3 id="ssh配置代理访问github" tabindex="-1"><a class="header-anchor" href="#ssh配置代理访问github"><span>ssh配置代理访问github</span></a></h3><ul><li>win10环境: ~/.ssh/config 文件中添加以下内容(程序路径替换为自己的git安装路径)</li></ul><div class="language-.ssh/config line-numbers-mode" data-highlighter="prismjs" data-ext=".ssh/config"><pre><code><span class="line">Host github.com</span>
<span class="line">  ProxyCommand &quot;C:\\Program Files\\Git\\mingw64\\bin\\connect.exe&quot; -S 127.0.0.1:1080 %h %p</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中： <code>Host github.com</code> ： 仅github使用该代理 <code>-S</code> 选项指sock协议默认sock5，指向代理服务器ip及端口</p><ul><li>Ubuntu环境: ~/.ssh/config 文件中添加以下内容</li></ul><div class="language-.ssh/config line-numbers-mode" data-highlighter="prismjs" data-ext=".ssh/config"><pre><code><span class="line">Host github.com</span>
<span class="line">	User git</span>
<span class="line">	ProxyCommand nc -X 5 -x 192.168.9.100:10808 %h %p</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用了nc进行代理，其中 <code>-X 5</code> 参数表示选定了sock5作为通信协议</p><h2 id="ubuntu搭建微信小程序开发环境" tabindex="-1"><a class="header-anchor" href="#ubuntu搭建微信小程序开发环境"><span>ubuntu搭建微信小程序开发环境</span></a></h2>`,61)]))}const p=s(t,[["render",o]]),c=JSON.parse('{"path":"/LinuxNote/UbuntuUsingNode.html","title":"Linux使用笔记","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Ubuntu配置","slug":"ubuntu配置","link":"#ubuntu配置","children":[{"level":3,"title":"ubuntu环境变量","slug":"ubuntu环境变量","link":"#ubuntu环境变量","children":[]},{"level":3,"title":"网络篇","slug":"网络篇","link":"#网络篇","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[]},{"level":3,"title":"shell编程","slug":"shell编程","link":"#shell编程","children":[]}]},{"level":2,"title":"ubuntu下mysql8.0的使用","slug":"ubuntu下mysql8-0的使用","link":"#ubuntu下mysql8-0的使用","children":[{"level":3,"title":"忘记root密码解决方案","slug":"忘记root密码解决方案","link":"#忘记root密码解决方案","children":[]},{"level":3,"title":"其他账户管理","slug":"其他账户管理","link":"#其他账户管理","children":[]}]},{"level":2,"title":"docker","slug":"docker","link":"#docker","children":[]},{"level":2,"title":"ssh","slug":"ssh","link":"#ssh","children":[{"level":3,"title":"ssh配置代理访问github","slug":"ssh配置代理访问github","link":"#ssh配置代理访问github","children":[]}]},{"level":2,"title":"ubuntu搭建微信小程序开发环境","slug":"ubuntu搭建微信小程序开发环境","link":"#ubuntu搭建微信小程序开发环境","children":[]}],"git":{"updatedTime":1666274090000,"contributors":[{"name":"vito","username":"vito","email":"vitotu@qq.com","commits":5,"url":"https://github.com/vito"}],"changelog":[{"hash":"0d61894b26ff232d8bb4d03617c41dcf15cdb1cb","time":1666274090000,"email":"vitotu@qq.com","author":"vito","message":"mark linux note"},{"hash":"24aa632d2cba16a79158125f220a4a3fa93306a3","time":1655045010000,"email":"vitotu@qq.com","author":"vito","message":"update algorithm to 58"},{"hash":"cd0614fe0bf9a3e4644fe7d0859154ac2c848c8b","time":1652875819000,"email":"vitotu@qq.com","author":"vito","message":"add shell tools note"},{"hash":"6d8c4ac3800e3c21ae85446ac223ce64a37620ca","time":1651768003000,"email":"vitotu@qq.com","author":"vito","message":"update format"},{"hash":"5d4013bbab22c3330a48db00e3b5401351e82a9e","time":1651510828000,"email":"vitotu@qq.com","author":"vito","message":"move note to github"}]},"filePathRelative":"LinuxNote/UbuntuUsingNode.md"}');export{p as comp,c as data};
