import{_ as c,a as l,b as i,c as u,d as r,e as k}from"./n54.c5ba376b.js";import{_ as d,r as a,o as v,c as m,b as p,w as b,d as n,a as s,e as t}from"./app.2fd91447.js";const y="/assets/n68.996b3fed.png",w={},f=s("h1",{id:"\u5251\u6307offer\u4EE3\u7801python\u5B9E\u73B0",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u5251\u6307offer\u4EE3\u7801python\u5B9E\u73B0","aria-hidden":"true"},"#"),n(" \u5251\u6307offer\u4EE3\u7801Python\u5B9E\u73B0")],-1),g=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u793A\u4F8B \u5FEB\u901F\u6392\u5E8F\u6CD5</span>
<span class="token keyword">import</span> random
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">Partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u968F\u673A\u9009\u62E9\u57FA\u51C6\u6570\uFF0C\u5C06\u8F83\u5C0F\u6570\u79FB\u5230\u524D\u65B9\uFF0C\u8FD4\u56DE\u57FA\u51C6\u6570\u5728\u8C03\u6574\u987A\u5E8F\u540E\u7684\u7D22\u5F15\u4F4D\u7F6E&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;Invalid Parameters&quot;</span><span class="token punctuation">)</span>
        index <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>

        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp

        small <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>
                small <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> small <span class="token operator">!=</span> index<span class="token punctuation">:</span>
                    temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
                    data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>small<span class="token punctuation">]</span>
                    data<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">=</span> temp
        small <span class="token operator">+=</span> <span class="token number">1</span>

        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>small<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp

        <span class="token keyword">return</span> small
    <span class="token keyword">def</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5FEB\u901F\u6392\u5E8F\u6CD5\uFF0C\u8F93\u5165\u9700\u8981\u6392\u5E8F\u7684\u8303\u56F4&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        <span class="token keyword">if</span> index <span class="token operator">&gt;</span> start<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>QuickSort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>QuickSort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>QuickSort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-3-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-3-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57" aria-hidden="true">#</a> NO.3 \u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57</h2><h3 id="\u9898\u76EE\u4E00-\u627E\u51FA\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u4E00-\u627E\u51FA\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57" aria-hidden="true">#</a> \u9898\u76EE\u4E00\uFF1A\u627E\u51FA\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57</h3><p>\u5728\u4E00\u4E2A\u957F\u5EA6\u4E3An\u7684\u6570\u7EC4\u4E2D\u7D20\u6709\u7684\u6570\u5B57\u90FD\u5728[0, n-1]\u8303\u56F4\u5185\u3002<br> \u8BF7\u627E\u51FA\u6570\u7EC4\u4E2D\u4EFB\u610F\u4E00\u4E2A\u91CD\u590D\u7684\u6570\u5B57\u3002<br> \u4F8B\u5982\uFF0C\u8F93\u5165\u957F\u5EA6\u4E3A7\u7684\u6570\u7EC4{2,3,1,0,2,5,3}\uFF0C\u90A3\u4E48\u5BF9\u5E94\u8F93\u51FA\u7684\u91CD\u590D\u6570\u5B57\u662F2\u62163\uFF0C\u82E5\u6CA1\u6709\u91CD\u590D\u7684\u5143\u7D20\u5219\u76F4\u63A5\u8FD4\u56DE-1.</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u5217\u8868\u4E0B\u6807\u4F5C\u4E3A\u54C8\u5E0C\u8868\uFF0C\u901A\u8FC7\u5143\u7D20\u4E92\u6362\u9010\u6B65\u6784\u5EFA\u54C8\u5E0C\u8868\uFF0C\u82E5\u9047\u5230\u76F8\u7B49\u7684\u6570\u5B57\u5219\u901A\u8FC7\u4E0B\u6807\u7D22\u5F15key\u5FC5\u7136\u80FD\u68C0\u6D4B\u5230\u91CD\u590D\u6570\u5B57</li><li>\u6B65\u9AA4\uFF1A</li></ul><ol><li>\u904D\u5386\u6570\u7EC4\uFF0C\u82E5i\u4F4D\u7F6E\u7684\u503C<code>arr[i]</code>\u4E0D\u7B49\u4E8Ei\uFF0C\u5219\u8FDB\u884C\u6B65\u9AA42</li><li>\u4EE5\u8BE5\u503C\u4E3A\u7D22\u5F15\u5224\u65AD<code>arr[i]</code>\u662F\u5426\u4E0E<code>arr[arr[i]]</code>\u4F4D\u7F6E\u7684\u503C\u76F8\u7B49,\u82E5\u76F8\u7B49\u5219\u8BF4\u660E\u627E\u5230\u91CD\u590D\u7684\u5143\u7D20\uFF0C\u5426\u5219\u8FDB\u884C\u503C\u4EA4\u6362\u3002</li><li>\u4EA4\u6362\u540E\u518D\u6B21\u5224\u65AD\uFF0C\u91CD\u590D\u6B65\u9AA42\uFF0C\u76F4\u5230<code>arr[i] = i</code>\uFF0C\u7EE7\u7EED\u8FDB\u884C\u904D\u5386</li><li>\u904D\u5386\u5B8C\u6210\u8FD8\u6CA1\u6709\u627E\u5230\u91CD\u590D\u7684\u5143\u7D20\u5219\u76F4\u63A5\u8FD4\u56DE-1</li></ol><ul><li>\u603B\u7ED3 \u7B97\u6CD5\u5229\u7528\u4E86\u54C8\u5E0C\u8868\u601D\u60F3\uFF0C\u5229\u7528\u6570\u7EC4\u7684\u7D22\u5F15\u4F5C\u4E3Akey\uFF0C\u6BCF\u4E2A\u6570\u5B57\u6700\u591A\u4EA4\u6362\u4E24\u6B21\u5C31\u80FD\u653E\u5230\u5408\u9002\u7684\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    
    Arg(Argument\u53C2\u6570): nums:list[int]
    Re(return): \u82E5\u672A\u627E\u5230\u91CD\u590D\u6570\u5B57\uFF0C\u6216\u8005\u5217\u8868\u5143\u7D20\u4E0D\u7B26\u5408\u8981\u6C42\u5C06\u8FD4\u56DEbool False\uFF0C\u5426\u5219\u8FD4\u56DE\u68C0\u7D22\u5230\u7684\u91CD\u590D\u6570\u5B57
    \u7B97\u6CD5\u5206\u6790\uFF1A\u5C3D\u7BA1\u6709\u4E24\u91CD\u5FAA\u73AF\uFF0C\u4F46\u6BCF\u4E2A\u6570\u5B57\u6700\u591A\u53EA\u8981\u4EA4\u6362\u4E24\u6B21\u5C31\u80FD\u627E\u5230\u5C5E\u4E8E\u5B83\u7684\u4F4D\u7F6E\uFF0C\u6240\u4EE5\u603B\u4F53\u7B97\u6CD5\u590D\u6742\u5EA6\u4E3AO(n)\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(1)
    &quot;&quot;&quot;</span>
    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment">#\u5982\u679C\u4E0D\u76F8\u7B49\u5C31\u4E92\u6362\u4F4D\u7F6E</span>
                temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
                nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token comment">#                 nums[i], nums[nums[i]] = nums[nums[i] - 1], nums[i] \u9017\u53F7\u8D4B\u503C\u5E76\u975E\u540C\u65F6\u8FDB\u884C\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\u65E0\u6CD5\u5F97\u5230\u6B63\u786E\u7ED3\u679C</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token comment">#\u6D4B\u8BD5\u7528\u4F8B</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>duplicate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>2
</code></pre><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u725B\u5BA2\u7F51\u7248\u4EE3\u7801</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> duplication<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u5217\u8868\u4E0B\u6807\u4F5C\u4E3A\u54C8\u5E0C\u8868\uFF0C\u901A\u8FC7\u5143\u7D20\u4E92\u6362\u9010\u6B65\u6784\u5EFA\u54C8\u5E0C\u8868\uFF0C\u82E5\u9047\u5230\u76F8\u7B49\u7684\u6570\u5B57\u5219\u901A\u8FC7\u4E0B\u6807\u7D22\u5F15key\u5FC5\u7136\u80FD\u68C0\u6D4B\u5230\u91CD\u590D\u6570\u5B57
        Arg(Argument\u53C2\u6570): nums:list[int]
        Re(return): \u82E5\u672A\u627E\u5230\u91CD\u590D\u6570\u5B57\uFF0C\u6216\u8005\u5217\u8868\u5143\u7D20\u4E0D\u7B26\u5408\u8981\u6C42\u5C06\u8FD4\u56DEbool False\uFF0C\u5426\u5219\u8FD4\u56DE\u68C0\u7D22\u5230\u7684\u91CD\u590D\u6570\u5B57
        \u7B97\u6CD5\u5206\u6790\uFF1A\u5C3D\u7BA1\u6709\u4E24\u91CD\u5FAA\u73AF\uFF0C\u4F46\u6BCF\u4E2A\u6570\u5B57\u6700\u591A\u53EA\u8981\u4EA4\u6362\u4E24\u6B21\u5C31\u80FD\u627E\u5230\u5C5E\u4E8E\u5B83\u7684\u4F4D\u7F6E\uFF0C\u6240\u4EE5\u603B\u4F53\u7B97\u6CD5\u590D\u6742\u5EA6\u4E3AO(n)\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(1)
        &quot;&quot;&quot;</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
            <span class="token keyword">while</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">:</span>
                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># \u5982\u679C\u4E0D\u76F8\u7B49\u5C31\u4E92\u6362\u4F4D\u7F6E</span>
                    temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
                    nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    duplication<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                    <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A(\u63A5\u9898\u76EE\u4E00\u4E2D)\u589E\u52A0\u9650\u5B9A\u6761\u4EF6\uFF1A\u4E0D\u4FEE\u6539\u6570\u7EC4\u627E\u51FA\u91CD\u590D\u7684\u6570\u5B57<br> \u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u4E8C\u5206\u67E5\u627E\u6CD5\u539F\u7406\uFF0C\u786E\u5B9A\u4E2D\u503C\uFF0C\u7EDF\u8BA1\u6570\u7EC4\u4E2D\u6BD4\u4E2D\u503C\u5C0F\u6216\u8005\u6BD4\u4E2D\u503C\u5927\u7684\u6570\u5B57\u7684\u4E2A\u6570\uFF0C\u4EE5\u6B64\u786E\u5B9A\u91CD\u590D\u7684\u6570\u5B57\u5728\u4E2D\u503C\u5DE6\u4FA7\u8FD8\u662F\u53F3\u4FA7</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">countRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u7EDF\u8BA1nums\u4E2D\u6240\u6709\u5143\u7D20\u503C\u5728\u533A\u95F4[start, end]\u4E2D\u7684\u6570\u7684\u4E2A\u6570
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> start <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> count

<span class="token keyword">def</span> <span class="token function">getDuplication</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u4E8C\u5206\u67E5\u627E\u6CD5\u6765\u627E\u51FA\u6570\u7EC4\u4E2D\u4EFB\u610F\u4E00\u91CD\u590D\u6570\u5B57 (\u6CE8\u610F\uFF0C\u6B64\u65B9\u6CD5\u4E0D\u80FD\u5F88\u597D\u7684\u89E3\u51B3\u6B64\u7C7B\u95EE\u9898\uFF0C\u5076\u5C14\u4F1A\u51FA\u73B0\u9519\u8BEF)&quot;&quot;&quot;</span>
    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    start <span class="token operator">=</span> <span class="token number">0</span>
    end <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> end <span class="token operator">&gt;=</span> start<span class="token punctuation">:</span>
        middle <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>  <span class="token comment"># \u5229\u7528\u53F3\u79FB\u64CD\u4F5C\u9664\u4E8C\u53D6\u6574</span>
        count <span class="token operator">=</span> countRange<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span>
        <span class="token keyword">if</span> end <span class="token operator">==</span> start<span class="token punctuation">:</span>
            <span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> start
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        <span class="token comment"># \u5982\u679Ccount\u7684\u6570\u91CF\u5927\u4E8E\u8BE5\u503C\u533A\u95F4\u957F\u5EA6\uFF0C\u5219\u6B64\u533A\u95F4\u4E2D\u5FC5\u6709\u91CD\u590D\u6570\u503C\uFF0C\u53CD\u4E4B\u7C7B\u4F3C</span>
        <span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token punctuation">(</span>middle <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> middle
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            start <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token comment">#\u6D4B\u8BD5\u7528\u4F8B</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>getDuplication<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-4-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#no-4-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E" aria-hidden="true">#</a> NO.4 \u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E</h2><p>\u5728\u4E00\u4E2A\u4E8C\u7EF4\u6570\u7EC4\u4E2D\uFF0C\u6BCF\u4E00\u884C\u90FD\u6309\u7167\u4ECE\u5DE6\u5230\u53F3\u7684\u9012\u589E\u987A\u5E8F\u6392\u5217\uFF0C\u6BCF\u4E00\u5217\u90FD\u6309\u7167\u4ECE\u4E0A\u5230\u4E0B\u9012\u589E\u7684\u987A\u5E8F\u6392\u5217\uFF0C\u8BF7\u5B8C\u6210\u4E00\u4E2A\u51FD\u6570\uFF0C\u8F93\u5165\u8FD9\u6837\u7684\u4E8C\u7EF4\u6570\u7EC4\u548C\u4E00\u4E2A\u6574\u6570\uFF0C\u5224\u65AD\u6570\u7EC4\u4E2D\u662F\u5426\u542B\u6709\u8BE5\u6574\u6570.</p><ul><li>\u89E3\u9898\u601D\u8DEF:</li></ul><ol><li>\u9996\u5148\u9009\u53D6\u6570\u7EC4\u53F3\u4E0A\u89D2\u7684\u6570\u5B57\uFF0C\u5982\u679C\u8BE5\u6570\u5B57\u5927\u4E8E\u76EE\u6807\u6570\u5B57\u5219\u6392\u9664\u8BE5\u5217\uFF0C\u5C0F\u4E8E\u5219\u6392\u9664\u8BE5\u884C</li><li>\u5411\u4E0B\u6216\u5411\u5DE6\u79FB\u52A8\u6307\u9488\uFF0C\u76F4\u5230\u7B49\u4E8E\u76EE\u6807\u6216\u8005\u8303\u56F4\u4E3A\u7A7A\u505C\u6B62</li></ol><ul><li>\u603B\u7ED3 \u5176\u672C\u8D28\u662F\u4E8C\u5206\u67E5\u627E\u6CD5\u7684\u53D8\u4F53\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(m+n)</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">Find</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    j <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-5-\u66FF\u6362\u7A7A\u683C" tabindex="-1"><a class="header-anchor" href="#no-5-\u66FF\u6362\u7A7A\u683C" aria-hidden="true">#</a> NO.5 \u66FF\u6362\u7A7A\u683C</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u628A\u5B57\u7B26\u4E32\u4E2D\u7684\u6BCF\u4E2A\u7A7A\u683C\u66FF\u6362\u6210&quot;%20&quot;\u3002\u4F8B\u5982\uFF0C\u8F93\u5165&quot;We are happy.&quot;\uFF0C\u5219\u8F93\u51FA&quot;We%20are%20happy.&quot;\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A</li></ul><ol><li>\u5148\u904D\u5386\u4E00\u904D\u5B57\u7B26\u4E32\u7EDF\u8BA1\u7A7A\u683C\u7684\u4E2A\u6570</li><li>\u7136\u540E\u5206\u914D\u8DB3\u591F\u7684\u5B58\u50A8\u7A7A\u95F4</li><li>\u4ECE\u540E\u5411\u524D\u7684\u4F9D\u6B21\u66FF\u6362\u7A7A\u683C (\u7B97\u6CD5\u65F6\u95F4\u6548\u7387O(n))</li></ol><ul><li>\u603B\u7ED3 \u6B64\u9898\u8003\u5BDF\u6570\u7EC4\u5408\u5E76\uFF0C\u4ECE\u540E\u5411\u524D\u586B\u5145\u6570\u7EC4\u53EF\u51CF\u5C11\u79FB\u52A8\u6B21\u6570\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ReplaceBlank</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u5B57\u7B26\u578B\u5217\u8868\u6765\u66FF\u6362str\u7C7B\u578B\uFF0C\u66F4\u597D\u7684\u8BE0\u91CA\u7B97\u6CD5\u601D\u60F3\u3002\u82E5\u7528str\u7C7B\u578B\u6765\u505A:string.replace(&#39; &#39;, &#39;%20&#39;)\u5373\u53EF
    \u8F93\u5165\uFF1Astring:list[char]
    \u8F93\u51FA\uFF1Astring\uFF1Astr
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> string<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
    numOfBlank <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> string<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
            numOfBlank <span class="token operator">+=</span> <span class="token number">1</span>
    originalLength <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
    newlength <span class="token operator">=</span> originalLength <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>numOfBlank
    string <span class="token operator">=</span> string <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>numOfBlank
    <span class="token keyword">while</span> originalLength <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> newlength <span class="token operator">&gt;</span> originalLength<span class="token punctuation">:</span>
        <span class="token comment">#  \u4ECE\u540E\u5F80\u524D\u66FF\u6362\u7A7A\u683C</span>
        <span class="token keyword">if</span> string<span class="token punctuation">[</span>originalLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
            string<span class="token punctuation">[</span>newlength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span>
            string<span class="token punctuation">[</span>newlength <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span>
            string<span class="token punctuation">[</span>newlength <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;%&#39;</span>
            newlength <span class="token operator">-=</span> <span class="token number">3</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            string<span class="token punctuation">[</span>newlength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> string<span class="token punctuation">[</span>originalLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
            newlength <span class="token operator">-=</span> <span class="token number">1</span>
        originalLength <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>string<span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;W&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ReplaceBlank<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-6-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#no-6-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868" aria-hidden="true">#</a> NO.6 \u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9\uFF0C\u4ECE\u5C3E\u5230\u5934\u53CD\u8FC7\u6765\u6253\u5370\u51FA\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\u3002<br> \u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u6808\u7684\u5148\u8FDB\u540E\u51FA\u7279\u6027\u5B58\u50A8\u94FE\u8868\u7136\u540E\u518D\u8F93\u51FA(\u6216\u8005\u5229\u7528\u9012\u5F52\u51FD\u6570)</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#\u521B\u5EFA\u94FE\u8868\u7C7B</span>
<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521B\u5EFA\u94FE\u8868\u7C7B&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token comment">#\u53CD\u8F6C\u6253\u5370\u51FD\u6570</span>
<span class="token keyword">def</span> <span class="token function">PrintListReversingly_Iteratively</span><span class="token punctuation">(</span>phead<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u6808\u6765\u5B9E\u73B0\u53CD\u5411\u6253\u5370\u94FE\u8868&quot;&quot;&quot;</span>
    pNode <span class="token operator">=</span> phead
    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;None\uFF01&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">while</span> stack <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">PrintListReversingly_Recursively</span><span class="token punctuation">(</span>phead<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u9012\u5F52\u51FD\u6570\u8FDB\u884C\u53CD\u5411\u6253\u5370&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> phead <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> phead<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            PrintListReversingly_Recursively<span class="token punctuation">(</span>phead<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>phead<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
<span class="token comment">#\u6D4B\u8BD5\u7528\u4F8B\u4EE3\u7801</span>
<span class="token comment">##\u521B\u5EFA\u94FE\u8868</span>
head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token string">&#39;head-&gt;&#39;</span><span class="token punctuation">)</span>
pnode <span class="token operator">=</span> head
valueList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> valueList<span class="token punctuation">:</span>
    pnode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    pnode <span class="token operator">=</span> pnode<span class="token punctuation">.</span><span class="token builtin">next</span>
<span class="token comment">#\u9A8C\u8BC1\u94FE\u8868\u7528\u4EE3\u7801</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
pnode = head
while pnode != None:
    print(pnode.val)
    pnode = pnode.next
print(head.val)
&#39;&#39;&#39;</span>
<span class="token comment">#\u6D4B\u8BD5\u6253\u5370\u51FD\u6570</span>
PrintListReversingly_Iteratively<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
PrintListReversingly_Recursively<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#\u725B\u5BA2\u7F51\u89E3\u9898\u5BF9\u5E94\u51FD\u6570(\u4E0D\u8981\u5728\u6B64cell\u4E2D\u8FD0\u884C)</span>
<span class="token keyword">def</span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> listNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;\u5229\u7528\u6808\u5B9E\u73B0\u53CD\u5411\u8F93\u51FA\u94FE\u8868&#39;&#39;&#39;</span>
    pNode <span class="token operator">=</span> listNode
    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> pNode <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> stack
    <span class="token keyword">while</span> pNode <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
    stack<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> stack

<span class="token keyword">def</span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> listNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;\u5229\u7528\u9012\u5F52\u51FD\u6570\u53CD\u5411\u8F93\u51FA\u94FE\u8868&#39;&#39;&#39;</span>
    <span class="token keyword">if</span> listNode <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>printListFromTailToHead<span class="token punctuation">(</span>listNode<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-7-\u91CD\u5EFA\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#no-7-\u91CD\u5EFA\u4E8C\u53C9\u6811" aria-hidden="true">#</a> NO.7 \u91CD\u5EFA\u4E8C\u53C9\u6811</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u67D0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\uFF0C\u8BF7\u91CD\u5EFA\u8BE5\u4E8C\u53C9\u6811\u3002\u5047\u8BBE\u8F93\u5165\u7684\u524D\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\u4E2D\u90FD\u4E0D\u542B\u91CD\u590D\u6570\u5B57\u3002\u4F8B\u5982\u8F93\u5165\u524D\u5E8F\u904D\u5386\u5E8F\u5217{1,2,4,7,3,5,6,8}\u548C\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217{4,7,2,1,5,3,8,6}\uFF0C\u5219\u91CD\u5EFA\u5982\u4E0B\u5165\u7684\u4E8C\u53C9\u6811\u5E76\u8F93\u51FA\u5B83\u7684\u5934\u8282\u70B9\u3002</p><ul><li>\u89E3\u6790 \u524D\u5E8F\u904D\u5386:\u6839\u5DE6\u53F3\uFF1B\u4E2D\u5E8F\u904D\u5386\uFF1A\u5DE6\u6839\u53F3\uFF1B\u540E\u5E8F\u904D\u5386\uFF1A\u5DE6\u53F3\u6839</li><li>\u601D\u8DEF <ol><li>\u524D\u5E8F\u5E8F\u5217\u4E2D\u7B2C\u4E00\u4E2A\u6570\u4E3A\u6839\u8282\u70B9parent</li><li>\u627E\u5230\u4E2D\u5E8F\u5E8F\u5217\u4E2Dparent\u7684\u4F4D\u7F6E\uFF0C\u5176\u524D\u65B9\u4E3A\u5DE6\u5B50\u6811\uFF0C\u540E\u65B9\u4E3A\u53F3\u5B50\u6811</li><li>\u6839\u636E\u4E2D\u5E8F\u5E8F\u5217\u4E2D\u5DE6\u53F3\u5B50\u6811\u7684\u957F\u5EA6\u5728\u524D\u5E8F\u5E8F\u5217\u4E2D\u5206\u5272\u5DE6\u53F3\u5B50\u6811</li><li>\u91CD\u590D1-3\u6B65\u9AA4\uFF0C\u9012\u5F52\u7684\u91CD\u5EFA\u5DE6\u53F3\u5B50\u6811</li></ol></li><li>\u56FE\u4F8B <img src="`+c+'" alt="n7-01.png"></li></ul><p><img src="'+l+`" alt="n7-02.png"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;\u521B\u5EFA\u4E8C\u53C9\u6811\u8282\u70B9&#39;&#39;&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">def</span> <span class="token function">preTree</span><span class="token punctuation">(</span>treehead<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u5148\u6839\u5E8F\u904D\u5386\u4E8C\u53C9\u6811\uFF0C\u8FD4\u56DE\u5217\u8868\u5E8F\u5217&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> treehead <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>treehead<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">+</span> preTree<span class="token punctuation">(</span>treehead<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> preTree<span class="token punctuation">(</span>treehead<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">tinTree</span><span class="token punctuation">(</span>treehead<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u4E2D\u6839\u5E8F\u904D\u5386\u4E8C\u53C9\u6811\uFF0C\u8FD4\u56DE\u5217\u8868\u5E8F\u5217&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> treehead <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> tinTree<span class="token punctuation">(</span>treehead<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>treehead<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">+</span> tinTree<span class="token punctuation">(</span>treehead<span class="token punctuation">.</span>right<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_ConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>tin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u8C03\u7528\u6784\u9020\u5B50\u4E8C\u53C9\u6811&quot;&quot;&quot;</span>
    root <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">#\u9012\u5F52\u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tin<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> tin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> root
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;input error&quot;</span><span class="token punctuation">)</span>
    rootInorderIndex <span class="token operator">=</span> tin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tin<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> tin<span class="token punctuation">[</span>rootInorderIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;input error&quot;</span><span class="token punctuation">)</span>
    left <span class="token operator">=</span> tin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rootInorderIndex<span class="token punctuation">]</span>
    right <span class="token operator">=</span> tin<span class="token punctuation">[</span>rootInorderIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> _ConstructBinaryTree<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> _ConstructBinaryTree<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
    <span class="token keyword">return</span> root
<span class="token keyword">def</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> tin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521D\u59CB\u5224\u65AD\u8F93\u5165\u662F\u5426\u5408\u6CD5\uFF0C\u5E76\u9012\u5F52\u8C03\u7528\u6784\u9020\u51FD\u6570&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> pre <span class="token keyword">or</span> <span class="token keyword">not</span> tin<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;input error&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> _ConstructBinaryTree<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> tin<span class="token punctuation">)</span>
<span class="token comment">#\u6D4B\u8BD5\u4EE3\u7801</span>
prelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
tinlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
treehead <span class="token operator">=</span> reConstructBinaryTree<span class="token punctuation">(</span>prelist<span class="token punctuation">,</span> tinlist<span class="token punctuation">)</span>
<span class="token comment">#\u9A8C\u8BC1prelist\u548Ctinlist</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tinTree<span class="token punctuation">(</span>treehead<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#\u725B\u5BA2\u7F51\u901A\u8FC7\u4EE3\u7801   (#####!!\u4E0D\u8981\u8FD0\u884C\u6B64\u6BB5\u4EE3\u7801!!#####)</span>
<span class="token keyword">def</span> <span class="token function">_ConstructBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>tin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tin<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> tin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> root
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    rootInorderIndex <span class="token operator">=</span> tin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tin<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> tin<span class="token punctuation">[</span>rootInorderIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    left <span class="token operator">=</span> tin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rootInorderIndex<span class="token punctuation">]</span>
    right <span class="token operator">=</span> tin<span class="token punctuation">[</span>rootInorderIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>_ConstructBinaryTree<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>_ConstructBinaryTree<span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span>
    <span class="token keyword">return</span> root
<span class="token keyword">def</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> tin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> pre <span class="token keyword">or</span> <span class="token keyword">not</span> tin<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_ConstructBinaryTree<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> tin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-8-\u4E8C\u53C9\u6811\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#no-8-\u4E8C\u53C9\u6811\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9" aria-hidden="true">#</a> NO.8 \u4E8C\u53C9\u6811\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9</h2><p>\u9898\u76EE\uFF1A\u7ED9\u5B9A\u4E00\u9897\u4E8C\u53C9\u6811\u548C\u5176\u4E2D\u7684\u4E00\u4E2A\u8282\u70B9\uFF0C\u5982\u4F55\u627E\u51FA\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF1F\u6811\u4E2D\u7684\u8282\u70B9\u9664\u4E86\u6709\u4E24\u4E2A\u5206\u522B\u6307\u5411\u5DE6\u3001\u53F3\u5B50\u8282\u70B9\u7684\u6307\u9488\uFF0C\u8FD8\u6709\u4E00\u4E2A\u6307\u5411\u7236\u8282\u70B9\u7684\u6307\u9488\u3002</p><ul><li>\u601D\u8DEF\uFF1A <ol><li>\u82E5\u8BE5\u5B50\u8282\u70B9\u6709\u53F3\u5B50\u6811\uFF0C\u5219\u53F3\u5B50\u6811\u7684\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u7B2C\u4E00\u4E2A\u8282\u70B9\u5373\u4E3A\u4E0B\u4E00\u4E2A\u8282\u70B9</li><li>\u82E5\u65E0\u53F3\u5B50\u6811\uFF0C\u4E14\u662F\u5176\u7236\u8282\u70B9\u7684\u5DE6\u5B50\u8282\u70B9\uFF0C\u5219\u4E0B\u4E00\u4E2A\u8282\u70B9\u4E3A\u7236\u8282\u70B9</li><li>\u82E5\u65E0\u53F3\u5B50\u6811\uFF0C\u4E14\u4E3A\u7236\u8282\u70B9\u7684\u53F3\u8282\u70B9\uFF0C\u5219\u5411\u4E0A\u904D\u5386\uFF0C\u76F4\u5230\u627E\u5230\u4E00\u4E2A\u8282\u70B9\u4E3A\u5176\u7236\u8282\u70B9\u7684\u5DE6\u5B50\u8282\u70B9\uFF0C\u5219\u8BE5\u8282\u70B9\u7684\u7236\u8282\u70B9\u4E3A\u4E0B\u4E00\u4E2A\u8282\u70B9</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;\u521B\u5EFA\u4E8C\u53C9\u6811\u8282\u70B9&#39;&#39;&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span>

<span class="token keyword">def</span> <span class="token function">GetNext</span><span class="token punctuation">(</span>pNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u83B7\u53D6&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> pNode <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    pNext <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment">#\u82E5\u5B58\u5728\u53F3\u5B50\u6811\uFF0C\u5219\u53F3\u5B50\u6811\u4E2D\u6700\u5DE6\u4FA7\u7684\u8282\u70B9\u662F\u4E0B\u4E00\u8282\u70B9</span>
        pRight <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right
        <span class="token keyword">while</span> pRight<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pRight <span class="token operator">=</span> pRight<span class="token punctuation">.</span>left
        pNext <span class="token operator">=</span> pRight
    <span class="token keyword">elif</span> pNode<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment">#\u82E5\u53F3\u5B50\u6811\u4E0D\u5B58\u5728\uFF0C\u5219\u7236\u8282\u70B9\u4E2D\u662F\u5DE6\u5B50\u6811\u7684\u7236\u8282\u70B9\u662F\u4E0B\u4E00\u8282\u70B9</span>
        pCurrent <span class="token operator">=</span> pNode
        pParent <span class="token operator">=</span> pNode<span class="token punctuation">.</span>parent
        <span class="token keyword">while</span> pParent <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pCurrent <span class="token operator">==</span> pParent<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
            pCurrent <span class="token operator">=</span> pParent
            pParent <span class="token operator">=</span> pParent<span class="token punctuation">.</span>parent
        pNext <span class="token operator">=</span> pParent
    <span class="token keyword">return</span> pNext
<span class="token comment">#test code</span>
<span class="token comment">#tin=list(&#39;dbheiafcg&#39;)</span>
<span class="token comment">#pre=list(&#39;abdehicfg&#39;)</span>
headNode <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
headNode<span class="token punctuation">.</span>left <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
headNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> headNode
pNode <span class="token operator">=</span> headNode<span class="token punctuation">.</span>left
pNode<span class="token punctuation">.</span>left <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
pNode<span class="token punctuation">.</span>right <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
pNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> pNode
pNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> pNode
pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right
pNode<span class="token punctuation">.</span>left <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span>
pNode<span class="token punctuation">.</span>right <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>
pNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> pNode
pNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> pNode
headNode<span class="token punctuation">.</span>right <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
headNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> headNode
pNode <span class="token operator">=</span> headNode<span class="token punctuation">.</span>right
pNode<span class="token punctuation">.</span>left <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">)</span>
pNode<span class="token punctuation">.</span>right <span class="token operator">=</span> BinaryTreeNode<span class="token punctuation">(</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
pNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> pNode
pNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> pNode


result <span class="token operator">=</span> GetNext<span class="token punctuation">(</span>pNode<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u725B\u5BA2\u7F51\u7248\u4EE3\u7801</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetNext</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> pNode <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        pNext <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># \u82E5\u5B58\u5728\u53F3\u5B50\u6811\uFF0C\u5219\u53F3\u5B50\u6811\u4E2D\u6700\u5DE6\u4FA7\u7684\u8282\u70B9\u662F\u4E0B\u4E00\u8282\u70B9</span>
            pRight <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right
            <span class="token keyword">while</span> pRight<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pRight <span class="token operator">=</span> pRight<span class="token punctuation">.</span>left
            pNext <span class="token operator">=</span> pRight
        <span class="token keyword">elif</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># \u82E5\u53F3\u5B50\u6811\u4E0D\u5B58\u5728\uFF0C\u5219\u7236\u8282\u70B9\u4E2D\u662F\u5DE6\u5B50\u6811\u7684\u7236\u8282\u70B9\u662F\u4E0B\u4E00\u8282\u70B9</span>
            pCurrent <span class="token operator">=</span> pNode
            pParent <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">while</span> pParent <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pCurrent <span class="token operator">==</span> pParent<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                pCurrent <span class="token operator">=</span> pParent
                pParent <span class="token operator">=</span> pParent<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNext <span class="token operator">=</span> pParent
        <span class="token keyword">return</span> pNext
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-9-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#no-9-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217" aria-hidden="true">#</a> NO.9 \u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217</h2><p>\u9898\u76EE\uFF1A\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u4E00\u4E2A\u961F\u5217\u3002\u961F\u5217\u7684\u58F0\u660E\u5982\u4E0B\uFF0C\u8BF7\u5B9E\u73B0\u5B83\u7684\u4E24\u4E2A\u51FD\u6570appendTail\u548CdeleteHead\uFF0C\u5206\u522B\u5B8C\u6210\u5728\u961F\u5217\u5C3E\u90E8\u63D2\u5165\u8282\u70B9\u5728\u961F\u5217\u5934\u90E8\u5220\u9664\u8282\u70B9\u7684\u529F\u80FD\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A <ol><li>\u5229\u7528\u68081\u5165\u961F\uFF0C\u5728\u68082\u4E3A\u7A7A\u65F6\u5C06\u68081\u4E2D\u7684\u5143\u7D20\u901A\u8FC7\u51FA\u6808\uFF0C\u518D\u5165\u6808\u7684\u65B9\u5F0F\u8F6C\u79FB\u5230\u68082\u4E2D\u5B9E\u73B0\u53CD\u5E8F</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack2<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment">#\u82E5\u68082\u4E3A\u7A7A\u5219\u8F6C\u79FB\u5DF2\u5165\u6808\u5143\u7D20</span>
            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment">#\u82E5\u5DF2\u8F6C\u79FB\u5143\u7D20\u4E4B\u540E\u68082\u8FD8\u662F\u7A7A\uFF0C\u5219\u8BF4\u660E\u961F\u5217\u4E3A\u7A7A</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;queue is empty&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#\u6D4B\u8BD5\u4EE3\u7801</span>
inqueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
testqueue <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> inqueue<span class="token punctuation">:</span>
    testqueue<span class="token punctuation">.</span>push<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">while</span> testqueue<span class="token punctuation">.</span>stack1 <span class="token keyword">or</span> testqueue<span class="token punctuation">.</span>stack2<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>testqueue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-10-\u6590\u6CE2\u62C9\u5951\u6570\u5217" tabindex="-1"><a class="header-anchor" href="#no-10-\u6590\u6CE2\u62C9\u5951\u6570\u5217" aria-hidden="true">#</a> NO.10 \u6590\u6CE2\u62C9\u5951\u6570\u5217</h2><h3 id="\u9898\u76EE1-\u6C42\u6590\u6CE2\u62C9\u5951\u6570\u5217\u7684\u7B2Cn\u9879" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE1-\u6C42\u6590\u6CE2\u62C9\u5951\u6570\u5217\u7684\u7B2Cn\u9879" aria-hidden="true">#</a> \u9898\u76EE1\uFF1A\u6C42\u6590\u6CE2\u62C9\u5951\u6570\u5217\u7684\u7B2Cn\u9879</h3><p>[\u6590\u6CE2\u62C9\u5951\u6570\u5217\u5B9A\u4E49] f(n) = f(n-1) + f(n-2)\u3001f(0) = 0\u3001f(1) = 1</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A <ol><li>\u53EF\u4EE5\u7528\u9012\u5F52\u7684\u65B9\u5F0F\u6765\u5B9E\u73B0\uFF0C\u4F46\u7B97\u6CD5\u6548\u7387\u4F4E\uFF0C\u4F7F\u7528\u5FAA\u73AF\u6765\u4EE3\u66FF\u9012\u5F52\u4F1A\u66F4\u597D\uFF0C\u5FAA\u73AF\u7684\u65B9\u5F0F\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)</li><li>\u8FD8\u53EF\u901A\u8FC7\u77E9\u9635\u5FEB\u901F\u6C42\u5E42\u7684\u65B9\u5F0F\u8BA1\u7B97\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(log(n))\uFF0C\u8FDB\u4E00\u6B65\u7684\u53EF\u901A\u8FC7\u77E9\u9635\u7279\u5F81\u503C\u53CA\u7279\u5F81\u5411\u91CF\u6C42\u51FA\u6570\u5217\u901A\u9879\uFF0C\u4ECE\u800C\u5B9E\u73B0O(1)\u65F6\u95F4\u590D\u6742\u5EA6</li></ol></li></ul><h3 id="\u9898\u76EE2-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE2-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898" aria-hidden="true">#</a> \u9898\u76EE2\uFF1A\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898</h3><p>\u4E00\u53EA\u9752\u86D9\u4E00\u6B21\u53EF\u4EE5\u8DF3\u4E0A\u4E00\u7EA7\u53F0\u9636\uFF0C\u4E5F\u53EF\u4EE5\u8DF3\u4E0A2\u7EA7\u53F0\u9636\u3002\u6C42\u8BE5\u9752\u86D9\u8DF3\u4E0A\u4E00\u4E2An\u7EA7\u53F0\u9636\u603B\u5171\u6709\u591A\u5C11\u79CD\u8DF3\u6CD5\u3002</p><p>\u89E3\u9898\u601D\u8DEF\uFF1A</p><ol><li>\u8BBE\u6709f(n)\u79CD\u65B9\u6CD5\uFF0C</li><li>n=1\u65F6f(1) = 1,</li><li>n=2\u65F6f(2) = 2\uFF0C</li><li>n&gt;2\u65F6\uFF0C\u5148\u8DF3\u4E00\u7EA7\uFF0C\u5269\u4F59\u8FD8\u6709f(n-1)\u79CD\u65B9\u6CD5\uFF0C\u5148\u8DF32\u7EA7\uFF0C\u5269\u4F59\u8FD8\u6709f(n-2)\u79CD\u65B9\u6CD5\uFF0C\u6240\u4EE5f(n) = f(n-1) + f(n-2)\uFF0C\u56E0\u6B64\u4E0E\u6590\u6CE2\u62C9\u5951\u6570\u5217\u76F8\u4F3C</li><li>\u4E3A\u4FDD\u8BC1\u5927\u6570\u76F8\u52A0\u65F6\u6574\u6570\u4E0D\u6EA2\u51FA\uFF0C\u901A\u5E38\u9700\u8981\u5148\u5BF9\u76F8\u52A0\u7ED3\u679C1e9+7\u53D6\u4F59</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4ECE\u5C0F\u5230\u5927\u8BA1\u7B97\uFF0C\u7C7B\u63A8\u51FA\u7B2Cn\u9879\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6O(n)\u6BD4\u9012\u5F52\u5C0F&quot;&quot;&quot;</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> result<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
    fibOne <span class="token operator">=</span> <span class="token number">1</span>
    fibTwo <span class="token operator">=</span> <span class="token number">0</span>
    temp <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        temp <span class="token operator">=</span> fibOne <span class="token operator">+</span> fibTwo
        fibTwo <span class="token operator">=</span> fibOne
        fibOne <span class="token operator">=</span> temp
    <span class="token keyword">return</span> temp
Fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">FibonacciM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u6570\u5B66\u516C\u5F0F[[f(n), f(n-1)], [f(n-1), f(n-2)]] = [[1, 1], [1,0]]^(n-1)\u3002\u6B64\u65B9\u6CD5\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(log(n))&quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\u6B64\u51FD\u6570\u5F85\u5B9E\u73B0\uFF0C\u7559\u4F5C\u7EC3\u4E60&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">pass</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;\u51FD\u6570Fibonacci\u5728\u725B\u5BA2\u7F51\u4E0A\u6D4B\u8BD5\u901A\u8FC7&quot;&quot;&quot;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9752\u86D9\u53F0\u9636\u95EE\u9898\u3001\u77E9\u5F62\u8986\u76D6\u95EE\u9898&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> result<span class="token punctuation">[</span>number<span class="token punctuation">]</span>
        fibOne <span class="token operator">=</span> <span class="token number">2</span>
        fibTwo <span class="token operator">=</span> <span class="token number">1</span>
        fibN <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            fibN <span class="token operator">=</span> fibOne <span class="token operator">+</span> fibTwo
            fibTwo <span class="token operator">=</span> fibOne
            fibOne <span class="token operator">=</span> fibN
        <span class="token keyword">return</span> fibN
    
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9752\u86D9\u8DF3\u53F0\u9636\u53D8\u6001\u7248\uFF1A\u9752\u86D9\u6BCF\u6B21\u53EF\u4EE5\u8DF3\u4EFB\u610F\u7EA7&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-11-\u65CB\u8F6C\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-11-\u65CB\u8F6C\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u6570\u5B57" aria-hidden="true">#</a> NO.11 \u65CB\u8F6C\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u6570\u5B57</h2><p>\u9898\u76EE\uFF1A\u628A\u4E00\u4E2A\u6570\u7EC4\u6700\u5F00\u59CB\u7684\u82E5\u5E72\u4E2A\u5143\u7D20\u642C\u5230\u6570\u7EC4\u7684\u672B\u5C3E\uFF0C\u6211\u4EEC\u79F0\u4E4B\u4E3A\u6570\u7EC4\u7684\u65CB\u8F6C\u3002\u8F93\u5165\u4E00\u4E2A\u9012\u589E\u6392\u5E8F\u7684\u6570\u7EC4\u7684\u4E00\u4E2A\u65CB\u8F6C\uFF0C\u8F93\u51FA\u65CB\u8F6C\u6570\u7EC4\u7684\u6700\u5C0F\u5143\u7D20\u3002\u4F8B\u5982\uFF0C\u6570\u7EC4[3,4,5,1,2]\u4E3A[1,2,3,4,5]\u7684\u4E00\u4E2A\u65CB\u8F6C\uFF0C\u8BE5\u6570\u7EC4\u7684\u6700\u5C0F\u503C\u4E3A1.</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A \u65CB\u8F6C\u540E\u7684\u6392\u5E8F\u6570\u7EC4\u662F\u7531\u4E24\u4E2A\u5DF2\u6392\u597D\u5E8F\u7684\u5B50\u6570\u7EC4\u7EC4\u6210\uFF0C \u5229\u7528\u5BF9\u649E\u6307\u9488\u7684\u4E8C\u5206\u67E5\u627E\u6CD5\u9010\u6B65\u7F29\u5C0F\u67E5\u627E\u8303\u56F4\uFF0C \u4F46\u82E5\u9047\u4E0A\u5927\u91CF\u91CD\u590D\u6570\u5B57\u65F6\uFF0C\u9700\u8981\u904D\u5386\u5B50\u6570\u7EC4\u8FDB\u884C\u67E5\u627E(\u7B97\u6CD5\u57FA\u4E8E\u4E8C\u5206\u67E5\u627E\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(log(n))) <ol><li>\u5B9A\u4E49start\u3001mid\u3001end\u4E09\u4E2A\u6307\u9488\uFF0C\u5206\u522B\u6307\u5411\u6570\u7EC4\u7684\u8D77\u59CB\u3001\u4E2D\u95F4\u3001\u672B\u5C3E</li><li>\u82E5\u5269\u4F59\u5E8F\u5217\u957F\u5EA6\u4E3A2\uFF0C\u5219end\u4E00\u5B9A\u4E3A\u6700\u5C0F\u7684\u5143\u7D20\uFF0Cmid\u6307\u5411end\uFF0C\u8DF3\u51FA\u5FAA\u73AF</li><li>\u53D6mid = start + (end - start) / 2 \u5373\u6B63\u4E2D\u95F4\u4F4D\u7F6E</li><li>\u82E5start\u3001mid\u3001end\u6240\u6307\u5411\u7684\u5143\u7D20\u90FD\u76F8\u7B49\uFF0C\u5219\u65E0\u6CD5\u5224\u65AD\u6700\u5C0F\u503C\u4F4D\u4E8E\u5DE6\u5B50\u5E8F\u5217\u8FD8\u662F\u53F3\u5B50\u5E8F\u5217\uFF0C\u53EA\u80FD\u5BF9\u5E8F\u5217\u8FDB\u884C\u904D\u5386\u53D6\u5F97\u6700\u5C0F\u503C</li><li>\u82E5start\u7684\u5143\u7D20\u5C0F\u4E8E\u6216\u7B49\u4E8Emid\u7684\u5143\u7D20\uFF0C\u5219\u8BF4\u660E\u6700\u5C0F\u5143\u7D20\u5728\u53F3\u5B50\u5E8F\u5217\uFF0C\u82E5end\u7684\u5143\u7D20\u5927\u4E8E\u6216\u7B49\u4E8Emid\u5219\u8BF4\u660E\u6700\u5C0F\u5143\u7D20\u5728\u5DE6\u5B50\u5E8F\u5217</li><li>\u9012\u5F52\u7684\u91CD\u590D2-5\u6B65\u9AA4\uFF0C\u76F4\u5230start\u7684\u5143\u7D20\u5927\u4E8E\u6216\u7B49\u4E8Eend\u4E0D\u6210\u7ACB\uFF0C\u6700\u540E\u80FD\u4FDD\u8BC1mid\u6307\u5411\u6700\u5C0F\u5143\u7D20</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">MinInorder</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u987A\u5E8F\u67E5\u627E\u6700\u5C0F\u6570\u5B57\u5B50\u51FD\u6570&quot;&quot;&quot;</span>
    result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">:</span>
            result <span class="token operator">=</span> i
    <span class="token keyword">return</span> result

<span class="token keyword">def</span> <span class="token function">Min</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;\u65E0\u6548\u7684\u8F93\u5165&quot;</span><span class="token punctuation">)</span>
    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    start <span class="token operator">=</span> <span class="token number">0</span>
    end <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>
    mid <span class="token operator">=</span> start
    <span class="token keyword">while</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> end <span class="token operator">-</span> start <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            mid <span class="token operator">=</span> end
            <span class="token keyword">break</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> MinInorder<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>
            start <span class="token operator">=</span> mid
        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> mid
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>


<span class="token comment"># test code</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;\u5728\u725B\u5BA2\u7F51\u4E0A\u901A\u8FC7\u6D4B\u8BD5&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84" tabindex="-1"><a class="header-anchor" href="#no-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84" aria-hidden="true">#</a> NO.12 \u77E9\u9635\u4E2D\u7684\u8DEF\u5F84</h2><p>\u9898\u76EE\uFF1A \u8BF7\u8BBE\u8BA1\u4E00\u4E2A\u51FD\u6570\uFF0C\u7528\u6765\u5224\u65AD\u5728\u4E00\u4E2A\u77E9\u9635\u4E2D\u662F\u5426\u5B58\u5728\u4E00\u6761\u5305\u542B\u67D0\u5B57\u7B26\u4E32\u7684\u6240\u6709\u5B57\u7B26\u7684\u8DEF\u5F84\u3002<br> \u8DEF\u5F84\u53EF\u4EE5\u4ECE\u77E9\u9635\u4E2D\u7684\u4EFB\u610F\u4E00\u683C\u5F00\u59CB\uFF0C\u6BCF\u4E00\u6B65\u53EF\u4EE5\u5728\u77E9\u9635\u4E2D\u5411\u5DE6\u3001\u53F3\u3001\u4E0A\u3001\u4E0B\u79FB\u52A8\u4E00\u683C\u3002<br> \u5982\u679C\u4E00\u6761\u8DEF\u5F84\u7ECF\u8FC7\u4E86\u77E9\u9635\u7684\u67D0\u4E00\u683C\uFF0C\u90A3\u4E48\u8BE5\u8DEF\u5F84\u4E0D\u80FD\u518D\u6B21\u8FDB\u5165\u8BE5\u683C\u5B50\u3002<br> \u4F8B\u5982\uFF0C\u5728\u4E0B\u9762\u76843*4\u7684\u77E9\u9635\u4E2D\u5305\u542B\u4E00\u6761\u5B57\u7B26\u4E32\u201Cbfce\u201D\u7684\u8DEF\u5F84(\u8DEF\u5F84\u4E2D\u7684\u5B57\u6BCD\u7528\u5927\u5199\u6807\u51FA)\u3002<br> \u4F46\u77E9\u9635\u4E2D\u4E0D\u5305\u542B\u5B57\u7B26\u4E32\u201Cabfb\u201D\u7684\u8DEF\u5F84\uFF0C\u56E0\u4E3A\u5B57\u7B26\u4E32\u7684\u7B2C\u4E00\u4E2A\u5B57\u7B26b\u5360\u636E\u4E86\u77E9\u9635\u4E2D\u7684\u7B2C\u4E00\u884C\u7B2C\u4E8C\u4E2A\u683C\u5B50\u540E\uFF0C\u8DEF\u5F84\u4E0D\u80FD\u518D\u6B21\u8FDB\u5165\u8FD9\u4E2A\u683C\u5B50\u3002 $$\\begin{matrix} a&amp;B&amp;t&amp;g\\ c&amp;F&amp;C&amp;s\\ j&amp;d&amp;E&amp;h\\ \\end{matrix}$$</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u56DE\u6EAF\u6CD5\uFF0C\u82E5\u5F53\u524D\u8DEF\u5F84\u4E0D\u901A\uFF0C\u5219\u56DE\u6EAF\u4E0A\u4E00\u8282\u70B9\uFF0C\u5C1D\u8BD5\u672A\u5C1D\u8BD5\u8FC7\u7684\u8DEF\u5F84 <ol><li>\u7EF4\u62A4\u4E00\u4E2A\u8BBF\u95EE\u77E9\u9635visited\uFF0C\u82E5\u5BF9\u5E94\u4F4D\u7F6E\u88AB\u5360\u636E\u5219\u8BB0\u4E3Atrue\uFF0C\u904D\u5386\u76EE\u6807\u77E9\u9635matrix\uFF0C</li><li>\u6307\u9488p\u6240\u6307\u5411\u7684str\u4E2D\u7684\u5B57\u7B26\uFF0C\u82E5\u7B49\u4E8E\u904D\u5386\u4F4D\u7F6E\u7684\u5B57\u7B26\uFF0C\u5219\u5C06\u6307\u9488p\u79FB\u52A8\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u5E76\u6807\u8BB0visited\uFF0C\u9012\u5F52\u5224\u65AD\u5B57\u7B26\u4E0A\u4E0B\u5DE6\u53F3\u4F4D\u7F6E\u662F\u5426\u5B58\u5728\u79FB\u52A8\u540E\u7684p\u6307\u5411\u7684\u5B57\u7B26</li><li>\u82E5\u4E0D\u5B58\u5728\u5219\u56DE\u6EAF\uFF0Cp\u6307\u9488\u56DE\u9000\u4E00\u6B65\uFF0C\u5E76\u8FD8\u539F\u6807\u8BB0visited\uFF0C\u7ED3\u675F\u8BE5\u8282\u70B9\u7684\u9012\u5F52</li><li>\u82E5\u4E00\u76F4\u6EE1\u8DB3\u6B65\u9AA42\u4E2D\u7684\u6761\u4EF6\uFF0C\u5219\u9012\u5F52\u7ED3\u675F\u6761\u4EF6\u4E3Ap\u5927\u4E8Estr\u957F\u5EA6\uFF0C\u5E76\u8FD4\u56DEtrue\u8868\u793A\u627E\u5230\u8DEF\u5F84</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">hasPathCore</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> strs<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> pathLength<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u8C03\u7528\u81EA\u5DF1\uFF0C\u63A2\u7D22\u6BCF\u4E00\u4E2A\u8282\u70B9&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> pathLength <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    result <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> strs<span class="token punctuation">[</span>pathLength<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment"># \u7D22\u5F15\u8303\u56F4\u6B63\u786E\u4E14\u6B64\u65F6\u77E9\u9635\u7684\u503C\u548C\u5B57\u7B26\u4E32\u7684\u503C\u76F8\u5339\u914D\uFF0C\u5E76\u4E14\u6B64\u70B9\u672A\u88AB\u5360\u636E\u8FC7\uFF0C\u5219\u9012\u5F52\u63A2\u7D22\u4E0B\u4E00\u7B26\u5408\u8981\u6C42\u7684\u70B9</span>
        pathLength <span class="token operator">+=</span> <span class="token number">1</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        result <span class="token operator">=</span> hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span> <span class="token keyword">or</span> hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span> \\
        <span class="token keyword">or</span> hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span> <span class="token keyword">or</span> hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span>
        <span class="token comment"># \u9012\u5F52\u63A2\u7D22\u56DB\u4E2A\u65B9\u5411\u7684\u4E0B\u4E00\u8282\u70B9\u662F\u5426\u7B26\u5408\u8981\u6C42\uFF0C\u82E5\u4E0D\u7B26\u5408\u8981\u6C42\u5219\u9000\u56DE\u4E0A\u4E00\u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>
            pathLength <span class="token operator">-=</span> <span class="token number">1</span>
            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> result

<span class="token keyword">def</span> <span class="token function">hasPath</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> matrix <span class="token keyword">or</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    rows <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>
    clos <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># visited = [[False]*clos]*rows </span>
    <span class="token comment"># \u8FD9\u6837\u6784\u9020\u77E9\u9635\uFF0C\u5176\u884C\u5C06\u4F1A\u662F\u7B2C\u4E00\u884C\u7684\u6D45\u62F7\u8D1D\uFF0C\u4FEE\u6539\u4EFB\u4E00\u5143\u7D20\uFF0C\u5C06\u5F15\u8D77\u6574\u5217\u5143\u7D20\u540C\u65F6\u88AB\u6539\uFF0C\u56E0\u6B64\u91C7\u7528\u4E0B\u9762\u7684\u5FAA\u73AF\u8FDB\u884C\u6784\u9020</span>
    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>clos <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span>
    pathLength <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment">#\u53CC\u5FAA\u73AF\u904D\u5386\u6BCF\u4E00\u4E2A\u70B9\u4F5C\u4E3A\u8D77\u70B9</span>
            <span class="token keyword">if</span> hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token comment">#test code</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;abtg&#39;</span><span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;cfcs&#39;</span><span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;jdeh&#39;</span><span class="token punctuation">)</span>
strs <span class="token operator">=</span> <span class="token string">&#39;tegsc&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hasPath<span class="token punctuation">(</span>a<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u725B\u5BA2\u7F51\u7248\u4EE3\u7801</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">hasPathCore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> strs<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> pathLength<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u8C03\u7528\u81EA\u5DF1\uFF0C\u63A2\u7D22\u6BCF\u4E00\u4E2A\u8282\u70B9&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pathLength <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        result <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> strs<span class="token punctuation">[</span>pathLength<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token comment"># \u7D22\u5F15\u8303\u56F4\u6B63\u786E\u4E14\u6B64\u65F6\u77E9\u9635\u7684\u503C\u548C\u5B57\u7B26\u4E32\u7684\u503C\u76F8\u5339\u914D\uFF0C\u5E76\u4E14\u6B64\u70B9\u672A\u88AB\u5360\u636E\u8FC7\uFF0C\u5219\u9012\u5F52\u63A2\u7D22\u4E0B\u4E00\u7B26\u5408\u8981\u6C42\u7684\u70B9</span>
            pathLength <span class="token operator">+=</span> <span class="token number">1</span>
            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            result <span class="token operator">=</span> self<span class="token punctuation">.</span>hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>hasPathCore<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span>
            <span class="token comment"># \u9012\u5F52\u63A2\u7D22\u56DB\u4E2A\u65B9\u5411\u7684\u4E0B\u4E00\u8282\u70B9\u662F\u5426\u7B26\u5408\u8981\u6C42\uFF0C\u82E5\u4E0D\u7B26\u5408\u8981\u6C42\u5219\u9000\u56DE\u4E0A\u4E00\u8282\u70B9</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>
                pathLength <span class="token operator">-=</span> <span class="token number">1</span>
                visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> result
    
    <span class="token keyword">def</span> <span class="token function">hasPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> matrix <span class="token keyword">or</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>cols<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> cols<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token comment"># visited = [[False]*clos]*rows</span>
        <span class="token comment"># \u8FD9\u6837\u6784\u9020\u77E9\u9635\uFF0C\u5176\u884C\u5C06\u4F1A\u662F\u7B2C\u4E00\u884C\u7684\u6D45\u62F7\u8D1D\uFF0C\u4FEE\u6539\u4EFB\u4E00\u5143\u7D20\uFF0C\u5C06\u5F15\u8D77\u6574\u5217\u5143\u7D20\u540C\u65F6\u88AB\u6539\uFF0C\u56E0\u6B64\u91C7\u7528\u4E0B\u9762\u7684\u5FAA\u73AF\u8FDB\u884C\u6784\u9020</span>
        visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>cols <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span>
        pathLength <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment">#\u53CC\u5FAA\u73AF\u904D\u5386\u6BCF\u4E00\u4E2A\u70B9\u4F5C\u4E3A\u8D77\u70B9</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>hasPathCore<span class="token punctuation">(</span>temp<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>strs<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>pathLength<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-13-\u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4" tabindex="-1"><a class="header-anchor" href="#no-13-\u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4" aria-hidden="true">#</a> NO.13 \u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4</h2><p>\u9898\u76EE\uFF1A\u5730\u4E0A\u6709\u4E00\u4E2Am\xD7n\u7684\u65B9\u683C\u3002\u4E00\u4E2A\u673A\u5668\u4EBA\u4ECE\u5750\u6807(0, 0)\u7684\u683C\u5B50\u5F00\u59CB\u79FB\u52A8\uFF0C\u5B83\u6BCF\u6B21\u53EF\u4EE5\u5411\u5DE6\u3001\u53F3\u3001\u4E0A\u3001\u4E0B\u79FB\u52A8\u4E00\u683C\uFF0C\u4F46\u4E0D\u80FD\u8FDB\u5165\u884C\u5750\u6807\u548C\u5217\u5750\u6807\u7684\u4F4D\u6570\u4E4B\u548C\u5927\u4E8Ek\u7684\u683C\u5B50\u3002\u4F8B\u5982\uFF0C\u5F53k=18\u65F6\uFF0C\u673A\u5668\u4EBA\u80FD\u591F\u8FDB\u5165\u65B9\u683C(35,37),\u56E0\u4E3A3+5+3+7=18\u3002\u4F46\u5B83\u4E0D\u80FD\u8FDB\u5165\u65B9\u683C(35, 38)\uFF0C\u56E0\u4E3A3+5+3+8=19\u3002\u8BF7\u95EE\u8BE5\u673A\u5668\u4EBA\u80FD\u591F\u5230\u8FBE\u591A\u5C11\u4E2A\u683C\u5B50\uFF1F</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u56E0\u4E3A\u673A\u5668\u4EBA\u6BCF\u6B21\u53EA\u80FD\u79FB\u52A8\u4E00\u683C\uFF0C\u540C\u6837\u53EF\u4EE5\u5229\u7528\u56DE\u6EAF\u6CD5\u9010\u6B65\u904D\u5386\u80FD\u591F\u5230\u8FBE\u54EA\u4E9B\u683C\u5B50 <ol><li>\u4F7F\u7528map\u8BB0\u5F55\u673A\u5668\u4EBA\u5DF2\u8BBF\u95EE\u7684\u683C\u5B50\uFF0C\u6A21\u62DFvisited</li><li>\u8BBE\u5B9A\u8D77\u70B9\u4E3A<code>[0,0]</code>\uFF0C\u82E5\u5F53\u524D\u8282\u70B9\u6EE1\u8DB3\u6761\u4EF6k\u53CAvisited\u4E2D\u4E0D\u5B58\u5728\uFF0C\u5219\u5C06\u8282\u70B9\u5750\u6807\u4E3Akey\uFF0C\u52A0\u5165visited\u4E2D\uFF0C\u5E76\u5C06count\u52A01\uFF0C\u5426\u5219\u8FD4\u56DEcount\u7684\u521D\u59CB\u503C0</li><li>\u9012\u5F52\u7684\u5C06\u8282\u70B9\u4E0A\u4E0B\u5DE6\u53F3\u4F4D\u7F6E\u8FDB\u884C\u5224\u65AD\uFF0C\u91CD\u590D2\u6B65\u9AA4\uFF0C\u5E76\u5C06\u8FD4\u56DE\u503C\u52A0\u5165\u5230count\u4E2D</li><li>\u5224\u65AD\u662F\u5426\u6EE1\u8DB3\u6761\u4EF6k\u9700\u8981\u5224\u65AD\u5DE6\u8FB9\u662F\u5426\u6EA2\u51FA\uFF0C\u5E76\u8BA1\u7B97\u4F4D\u6570\u548C\u662F\u5426\u4E0D\u5927\u4E8Ek</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getDigitSum</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8BA1\u7B97\u6570\u5B57\u548C\u51FD\u6570&quot;&quot;&quot;</span>
    sumResult <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        sumResult <span class="token operator">+=</span> number <span class="token operator">%</span> <span class="token number">10</span>
        number <span class="token operator">/=</span> <span class="token number">10</span>
    <span class="token keyword">return</span> sumResult


<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6761\u4EF6\u5224\u65AD\u51FD\u6570&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> row <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> row <span class="token operator">&lt;</span> rows <span class="token keyword">and</span> col <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> col <span class="token operator">&lt;</span> cols <span class="token keyword">and</span> getDigitSum<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">+</span> getDigitSum<span class="token punctuation">(</span>col<span class="token punctuation">)</span>\\
    <span class="token operator">&lt;=</span> threshold <span class="token keyword">and</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">def</span> <span class="token function">movingCountCroe</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u63A2\u7D22\u6BCF\u4E00\u4E2A\u53EF\u80FD\u7684\u683C\u5B50&quot;&quot;&quot;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> check<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
        visited<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        count <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span> \\
            <span class="token operator">+</span> movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span>\\
            <span class="token operator">+</span> movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span>\\
            <span class="token operator">+</span> movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span>
    <span class="token keyword">return</span> count


<span class="token keyword">def</span> <span class="token function">movingCount</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\uFF0C\u521D\u59CB\u5316visited\u65B9\u4FBF\u6838\u5FC3\u51FD\u6570\u9012\u5F52\u8C03\u7528&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> threshold <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> rows <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> cols <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>cols <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span>
    count <span class="token operator">=</span> movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span>
    <span class="token keyword">return</span> count


<span class="token comment"># test code</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>movingCount<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u725B\u5BA2\u7F51\u7248\u4EE3\u7801</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getDigitSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8BA1\u7B97\u6570\u5B57\u548C\u51FD\u6570&quot;&quot;&quot;</span>
        sumResult <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            sumResult <span class="token operator">+=</span> number <span class="token operator">%</span> <span class="token number">10</span>
            number <span class="token operator">/=</span> <span class="token number">10</span>
        <span class="token keyword">return</span> sumResult

    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6761\u4EF6\u5224\u65AD\u51FD\u6570&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> row <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> row <span class="token operator">&lt;</span> rows <span class="token keyword">and</span> col <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> col <span class="token operator">&lt;</span> cols <span class="token keyword">and</span> self<span class="token punctuation">.</span>getDigitSum<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>getDigitSum<span class="token punctuation">(</span>col<span class="token punctuation">)</span> \\
                <span class="token operator">&lt;=</span> threshold <span class="token keyword">and</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">movingCountCroe</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u63A2\u7D22\u6BCF\u4E00\u4E2A\u53EF\u80FD\u7684\u683C\u5B50&quot;&quot;&quot;</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
            visited<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            count <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span> \\
                    <span class="token operator">+</span> self<span class="token punctuation">.</span>movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span> \\
                    <span class="token operator">+</span> self<span class="token punctuation">.</span>movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> visited<span class="token punctuation">)</span> \\
                    <span class="token operator">+</span> self<span class="token punctuation">.</span>movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span>
        <span class="token keyword">return</span> count

    <span class="token keyword">def</span> <span class="token function">movingCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\uFF0C\u521D\u59CB\u5316visited\u65B9\u4FBF\u6838\u5FC3\u51FD\u6570\u9012\u5F52\u8C03\u7528&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> threshold <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> rows <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> cols <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> cols <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span>
        count <span class="token operator">=</span> self<span class="token punctuation">.</span>movingCountCroe<span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span>
        <span class="token keyword">return</span> count
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-14-\u526A\u7EF3\u5B50" tabindex="-1"><a class="header-anchor" href="#no-14-\u526A\u7EF3\u5B50" aria-hidden="true">#</a> NO.14 \u526A\u7EF3\u5B50</h2><p>\u9898\u76EE\uFF1A\u7ED9\u4F60\u4E00\u6839\u957F\u5EA6\u4E3An\u7684\u7EF3\u5B50\uFF0C\u8BF7\u628A\u7EF3\u5B50\u526A\u6210m\u6BB5(m,n\u90FD\u662F\u6574\u6570\uFF0Cn&gt;1\u5E76\u4E14m&gt;1)\uFF0C\u6BCF\u6BB5\u7EF3\u5B50\u7684\u957F\u5EA6\u8BB0\u4E3Ak[0],k[1],...,k[m]\u3002\u8BF7\u95EEk[0]<em>k[1]</em>...*k[m]\u53EF\u80FD\u7684\u6700\u5927\u4E58\u79EF\u662F\u591A\u5C11\uFF1F\u4F8B\u5982\uFF0C\u5F53\u7EF3\u5B50\u7684\u957F\u5EA6\u4E3A8\u65F6\uFF0C\u6211\u4EEC\u628A\u4ED6\u526A\u6210\u957F\u5EA6\u5206\u522B\u4E3A2,3,3\u7684\u4E09\u6BB5\uFF0C\u6B64\u65F6\u5F97\u5230\u7684\u6700\u5927\u4E58\u79EF\u662F18.</p><ul><li><p>\u89E3\u9898\u601D\u8DEF\uFF1A\u56E0\u4E3A\u662F\u6700\u4F18\u5316\u95EE\u9898\uFF0C\u4E14\u95EE\u9898\u53EF\u5206\uFF0C\u53EF\u8003\u8651\u4F7F\u7528\u52A8\u6001\u89C4\u5212\u6216\u8005\u8D2A\u5A6A\u6CD5\uFF0C\u8BE6\u7EC6\u89C1\u4EE3\u7801\u6587\u6863\u6216\u5251\u6307offer\uFF08\u6CE8\uFF1A\u9898\u76EE\u4E2D\u9700\u8865\u5145\u6761\u4EF6\uFF0Cm\u4E3A\u4EFB\u610F\u6574\u6570\uFF0C\u4E14\u5207\u6210\u7684\u7EF3\u5B50\u957F\u5EA6\u5FC5\u987B\u4E3A\u6574\u6570\uFF09</p><ul><li>\u52A8\u6001\u89C4\u5212\u89E3\u6CD5 <ol><li>\u521B\u5EFA\u957F\u5EA6\u4E3An\u7684\u6570\u7EC4maxLens\u7528\u4E8E\u5B58\u50A8\u5BF9\u5E94\u7D22\u5F15i\u957F\u5EA6\u7684\u7EF3\u5B50\u526A\u65AD\u6700\u5927\u4E58\u79EF\uFF0C\u5219maxLens[n - 1]\u7A0B\u5E8F\u8FD4\u56DE\u503C</li><li>\u53EF\u5C1D\u8BD5\u5148\u526A\u4E0B\u4E00\u6BB5\u957F\u5EA6j\uFF0C\u7136\u540E\u5269\u4F59\u957F\u5EA6\u53EF\u526A\u53EF\u4E0D\u526A\uFF0C</li><li>\u8BB0\u957F\u5EA6\u4E3An\u7684\u7EF3\u5B50\u526A\u65AD\u540E\u7684\u4E58\u79EF\u4E3Af(n),\u5219f(n)=j*(n-j)\u6216f(n)=j*f(n-j),\u53EF\u53D6\u5176\u4E2D\u7684\u6700\u5927\u503C\u8BB0\u4E3AFMax</li><li>\u4ECE2\u5F00\u59CB\u904D\u5386j\uFF0C\u76F4\u5230\u4E0D\u6EE1\u8DB3j &lt;= Math.floor(n / 2)\uFF0C\u6BCF\u6B21\u904D\u5386\u4E2D\u5C06\u8F83\u5927\u7684FmMx\u5B58\u5165<code>maxLens[i]</code></li><li>\u5B9A\u4E49maxLens = [0, 1, 2, 4]\u4E3A\u521D\u59CB\u503C\u5206\u522B\u8868\u793A\u7EF3\u5B50\u957F\u5EA6\u4E3A[1, 2, 3, 4]\u65F6\u7EF3\u5B50\u526A\u65AD\u540E\u6700\u5927\u4E58\u79EF\uFF0C\u4ECE\u957F\u5EA6\u4E3A5\u5F00\u59CB\u904D\u5386\u7EF3\u5B50\u957F\u5EA6i\uFF0C\u76F4\u5230i &lt;= n\uFF0C\u6BCF\u6B21\u904D\u5386\u6267\u884C\u6B65\u9AA44,\u904D\u5386\u5B8C\u6210\u540E\u8FD4\u56DEmaxLens[n - 1]\u5373\u4E3A\u957F\u5EA6\u4E3An\u7684\u7EF3\u5B50\u526A\u65AD\u540E\u7684\u6700\u5927\u4E58\u79EF</li></ol></li></ul></li><li><p>\u8D2A\u5A6A\u7B97\u6CD5\u89E3\u6CD5</p><ol><li>\u5C3D\u53EF\u80FD\u7684\u5C06\u7EF3\u5B50\u5206\u4E3A\u957F\u5EA6\u4E3A3\u7684\u6BB5\uFF0C\u5E76\u4E14\u5269\u4F59\u957F\u5EA6\u5C3D\u53EF\u80FD\u4E3A2\u62164\uFF0C\u4E0D\u53EF\u4E3A1</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">maxProductAfterCutting_solution</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u52A8\u6001\u89C4\u5212\u6CD5\uFF0C\u4ECE\u4E0A\u800C\u4E0B\u7684\u5206\u6790\u5206\u89E3\u95EE\u9898\uFF0C\u81EA\u4E0B\u800C\u4E0A\u7684\u987A\u5E8F\u8BA1\u7B97\u95EE\u9898&quot;&quot;&quot;</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">elif</span> length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> result<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    products <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>
        products<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
    maxValue <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        maxValue <span class="token operator">=</span> <span class="token number">0</span>
        j <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span>
            product <span class="token operator">=</span> products<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>products<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span>
            <span class="token keyword">if</span> maxValue <span class="token operator">&lt;</span> product<span class="token punctuation">:</span>
                maxValue <span class="token operator">=</span> product
            products<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxValue
            j <span class="token operator">+=</span> <span class="token number">1</span>
    maxValue <span class="token operator">=</span> products<span class="token punctuation">[</span>length<span class="token punctuation">]</span>
    <span class="token keyword">return</span> maxValue


<span class="token keyword">def</span> <span class="token function">maxProductAfterCutting_solution2</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8D2A\u5A6A\u7B97\u6CD5\uFF0C\u5C3D\u53EF\u80FD\u591A\u7684\u526A\u957F\u5EA6\u4E3A3\u7684\u7EF3\u5B50\uFF0C\u5F53\u5269\u4E0B\u7684\u7EF3\u5B50\u957F\u5EA6\u4E3A4\u65F6\uFF0C\u628A\u7EF3\u5B50\u526A\u6210\u4E24\u6BB5\u4E3A2\u7684\u7EF3\u5B50\u3002
    \u89E3\u91CA\uFF1A\u5F53n&gt;=5\u65F6,3*(n-3)&gt;=2*(n-2)&gt;n,\u6545\u9009\u7528\u4E0A\u8FF0\u7B56\u7565&quot;&quot;&quot;</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">elif</span> length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> result<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    timesOf3 <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">3</span>
    <span class="token keyword">if</span> length <span class="token operator">-</span> timesOf3 <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        timesOf3 <span class="token operator">-=</span> <span class="token number">1</span>
    timesOf2 <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> timesOf3 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> timesOf3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> timesOf2<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># test code</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>maxProductAfterCutting_solution<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>maxProductAfterCutting_solution2<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#no-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570" aria-hidden="true">#</a> NO.15 \u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u8F93\u5165\u4E00\u4E2A\u6574\u6570\uFF0C\u8F93\u51FA\u8BE5\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D1\u7684\u4E2A\u6570\u3002\u4F8B\u5982\uFF0C\u628A9\u8868\u793A\u6210\u4E8C\u8FDB\u5236\u662F1001\uFF0C\u67092\u4F4D\u662F1\uFF0C\u56E0\u6B64\uFF0C\u8F93\u51659\uFF0C\u5219\u51FD\u6570\u8F93\u51FA2.</p><ul><li>\u89E3\u9898\u601D\u8DEF <ul><li><p>\u9010\u4F4D\u626B\u63CF</p><ol><li>\u5C06\u6570\u4E0Eflag=1\u8FDB\u884C\u4E0E\u64CD\u4F5C\uFF0C\u6BCF\u6B21flag\u6309\u4F4D\u5DE6\u79FB\uFF0C\u904D\u5386\u6574\u578B\u7684\u4E8C\u8FDB\u5236\u4F4D\u6570(32\u621664)\u540E\u5373\u53EF\u7EDF\u8BA1\u51FA1\u7684\u4E2A\u6570</li></ol></li><li><p>\u51CF1\u7B97\u6CD5</p><ol><li>\u5C06\u4E00\u4E2A\u6574\u6570\u51CF1\uFF0C\u90FD\u662F\u628A\u4E8C\u8FDB\u5236\u4E2D\u6700\u53F3\u8FB9\u76841\u53D8\u62100\uFF0C\u5E76\u4E14\u628A\u5B83\u53F3\u8FB9\u7684\u6240\u67090\u53D8\u62101(\u5373\uFF1A\u6700\u53F3\u8FB9\u7684\u6570\u4E3A1\u65F6\uFF0C\u76F4\u63A5\u53D8\u62100\uFF0C\u6700\u53F3\u8FB9\u7684\u6570\u4E3A0\u65F6\uFF0C\u5C06\u5176\u524D\u65B9\u6700\u8FD1\u7684\u4E00\u4E2A1\u53D8\u4E3A0\uFF0C\u5176\u540E\u7684\u6240\u67090\u53D8\u4E3A1)</li><li>\u56E0\u6B64\uFF0C\u5C06\u6574\u6570n\u505An&amp;(n-1)\u76F8\u5F53\u4E8E\u5C06\u5176\u6700\u53F3\u8FB9\u76841\u53BB\u6389\uFF0C\u56E0\u6B64n&gt;0\u65F6\uFF0C\u53EF\u4EE5\u53CD\u590D\u8FDB\u884C\u6B64\u64CD\u4F5C\uFF0C\u5E76\u7EDF\u8BA11\u7684\u4E2A\u6570</li><li>n\u4E2D\u6709\u591A\u5C11\u4E2A1\u5C31\u9700\u8981\u5FAA\u73AF\u591A\u5C11\u6B21</li></ol></li></ul></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u65B9\u6CD5\u4E00</span>
<span class="token keyword">def</span> <span class="token function">NumberOf1Croe</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5C061\u9010\u4F4D\u4E0En\u6309\u4F4D\u4E0E\uFF0C\u68C0\u6D4B\u8BE5\u4E8C\u8FDB\u5236\u4F4D\u662F\u5426\u67091\uFF0C\u82E5\u6709\u5219\u8BA1\u6570\u3002\u8BE5\u7B97\u6CD5\u9700\u8981\u5FAA\u73AFsizeof(int)\u6B21&quot;&quot;&quot;</span>
    count <span class="token operator">=</span><span class="token number">0</span>
    flag <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> flag <span class="token operator">&lt;=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n<span class="token operator">&amp;</span>flag<span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
        flag <span class="token operator">=</span> flag <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
    <span class="token keyword">return</span> count
<span class="token keyword">def</span> <span class="token function">NumberOf1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8BA1\u7B97\u6574\u6570\u7684\u4E8C\u8FDB\u5236\u6570\u4E2D1\u7684\u4E2A\u6570\uFF0C\u7531\u4E8E\u5728python\u4E2D\u8D1F\u6570\u6CA1\u6709\u7528\u8865\u7801\u8868\u793A\uFF0C\u6545\u5728\u4E3B\u51FD\u6570\u4E2D\u53E6\u884C\u5904\u7406&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">32</span> <span class="token operator">-</span> NumberOf1Croe<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> NumberOf1Croe<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token comment"># \u65B9\u6CD5\u4E8C</span>
<span class="token keyword">def</span> <span class="token function">numberOf1Croe</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5C06\u4E00\u4E2A\u6574\u6570\u51CF1\uFF0C\u90FD\u662F\u628A\u4E8C\u8FDB\u5236\u4E2D\u6700\u53F3\u8FB9\u76841\u53D8\u62100\uFF0C\u5E76\u4E14\u628A\u5B83\u53F3\u8FB9\u7684\u6240\u67090\u53D8\u62101\uFF0C\u5C06\u6B64\u6570\u518D\u4E0E\u539F\u6570\u6309\u4F4D\u4E0E\uFF0C\u76F8\u5F53\u4E8E\u5C06\u539F\u6570\u4E8C\u8FDB\u5236\u6570\u4E2D\u6700\u53F3
    \u8FB9\u76841\u53D8\u62100\uFF0C\u6574\u6570\u4E2D\u6709\u591A\u5C11\u4E2A1\u5C31\u53EF\u4EE5\u505A\u591A\u5C11\u6B21\u8FD9\u79CD\u64CD\u4F5C\u3002\u57FA\u4E8E\u8FD9\u79CD\u601D\u60F3\u5199\u51FA\u7C7B\u7684\u7B97\u6CD5\u9700\u8981\u5FAA\u73AFcount\u6B21\uFF0C\u5373\u6709\u591A\u5C11\u4E2A1\u5FAA\u73AF\u591A\u5C11\u6B21&quot;&quot;&quot;</span>
    count <span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> n<span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
        n <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n
    <span class="token keyword">return</span> count
<span class="token keyword">def</span> <span class="token function">numberOf1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8BA1\u7B97\u6574\u6570\u7684\u4E8C\u8FDB\u5236\u6570\u4E2D1\u7684\u4E2A\u6570\uFF0C\u7531\u4E8E\u5728python\u4E2D\u8D1F\u6570\u6CA1\u6709\u7528\u8865\u7801\u8868\u793A\uFF0C\u6545\u5728\u4E3B\u51FD\u6570\u4E2D\u53E6\u884C\u5904\u7406&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">32</span> <span class="token operator">-</span> numberOf1Croe<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> numberOf1Croe<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

<span class="token comment">#test code</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>NumberOf1<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>numberOf1<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
#\u5C06int\u7C7B\u578B\u8F6C\u4E3A\u8865\u7801\u8868\u793A\u7684\u51FD\u6570
def int2Bin32(i):
    return (bin(((1&lt;&lt;32) - 1) &amp; i)[2:]).zfill(32)
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9" tabindex="-1"><a class="header-anchor" href="#no-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9" aria-hidden="true">#</a> NO.16 \u6570\u503C\u7684\u6574\u6570\u6B21\u65B9</h2><p>\u9898\u76EE\uFF1A\u5B9E\u73B0\u51FD\u6570double Power(double base, int exponent)\uFF0C\u6C42base\u7684exponent\u6B21\u65B9\u3002\u4E0D\u5F97\u4F7F\u7528\u5E93\u51FD\u6570\uFF0C\u540C\u65F6\u4E0D\u9700\u8981\u8003\u8651\u5927\u6570\u95EE\u9898\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u4E8C\u5206\u6CD5\uFF0C\u5BF9exponent\u8FDB\u884C\u5206\u89E3\uFF0C\u6BCF\u6B21\u96642\u53D6\u6574\uFF0C\u540C\u65F6\u5BF9base\u4F7F\u7528\u81EA\u4E58\uFF0C\u5229\u7528\u5DF2\u8BA1\u7B97\u597D\u7684\u503C\uFF0C\u7B97\u6CD5\u590D\u6742\u5EA6\u4E3AO(log2(n))</li><li>\u6D41\u7A0B <ol><li>\u5224\u65ADbase\uFF0Cexponent\u662F\u5426\u4E3A0\uFF0C\u82E5\u4E3A0\u5219\u76F4\u63A5\u5206\u522B\u8FD4\u56DE0\u548C1</li><li>\u82E5exponent &lt; 0 \u5219\u5C06base\u8BBE\u7F6E\u4E3A 1 / base\uFF0Cexponent\u8BBE\u7F6E\u4E3A-exponent\u8F6C\u6362\u4E3A\u6B63\u6570\u7684\u60C5\u51B5</li><li>\u8BBE\u7F6Eres=1\u7528\u4E8E\u7F13\u5B58\u5947\u6570\u7684\u7ED3\u679C\uFF0Cpow=base\u7528\u4E8E\u81EA\u4E58\uFF0C\u904D\u5386\u7ED3\u675F\u540E\u8FD4\u56DEres*pow\uFF0C\u5373\u9ED8\u8BA4\u7ED3\u679C\u4E3Aexponent=1\u7684\u60C5\u51B5</li><li>exponent &gt; 1\u65F6\u8FDB\u884C\u904D\u5386\uFF0C\u6BCF\u6B21\u5224\u65AD\u82E5\u4E3A\u5947\u6570\uFF0C\u5219\u6267\u884Cres*=base\u7D2F\u4E58base\uFF0C\u5E76\u5C06exponent/2\u53D6\u6574\uFF0C\u8FDB\u884C\u4E8C\u5206\uFF0C\u5E76\u6267\u884Cpow*=pow\u7D2F\u79EF\u81EA\u4E58\uFF0C\u5FAA\u73AF\u7ED3\u675F\u540E\u8FD4\u56DEres*pow</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">PowerWithUnsignedExponent</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u5FAA\u73AF\u8FDE\u4E58\u6765\u8BA1\u7B97\u65E0\u7B26\u53F7\u6307\u6570&quot;&quot;&quot;</span>
    result <span class="token operator">=</span> <span class="token number">1.0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> base
    <span class="token keyword">return</span> result
<span class="token keyword">def</span> <span class="token function">PowerWithUnsignedExponent2</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u5C06\u6307\u6570\u62C6\u5206\u6210\u5E73\u65B9\uFF0C\u51CF\u5C11\u4E58\u6CD5\u7684\u6B21\u6570\uFF0C\u5E76\u7528\u53F3\u79FB\u8FD0\u7B97\u7B26\u4EE3\u66FF\u96642\uFF0C\u5229\u7528\u6309\u4F4D\u4E0E\u8FD0\u7B97\u7B26\u6765\u5224\u65AD\u51FD\u6570\u5947\u5076&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> exponent <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">if</span> exponent <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> base
    result <span class="token operator">=</span> PowerWithUnsignedExponent2<span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    result <span class="token operator">*=</span> result <span class="token comment">#\u5E73\u65B9</span>
    <span class="token keyword">if</span> exponent <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span>base
    <span class="token keyword">return</span> result

g_InvalidInput <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token comment">#\u9519\u8BEF\u8F93\u5165\u6307\u793A\uFF0C\u5728\u725B\u5BA2\u7F51python\u7F16\u7A0B\u4E2D\uFF0C\u8BF7\u5220\u9664\u6B64\u529F\u80FD\uFF0C\u5426\u5219\u4E0D\u80FD\u901A\u8FC7\u6D4B\u8BD5</span>
<span class="token keyword">def</span> <span class="token function">Power</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\u3002\u6D6E\u70B9\u578B\u6570\u636E\u7C7B\u578B\u4E0D\u53EF\u76F4\u63A5\u7528\u2018==\u2019\u5224\u65AD\u662F\u5426\u4E3A0\uFF0C\u53EF\u501F\u52A9\u6BD4\u8F83\u8F83\u5C0F\u65701.0e-9\u6765\u5224\u65AD&quot;&quot;&quot;</span>
    g_InvalidInput <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1.0e-9</span> <span class="token keyword">and</span> exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        g_InvalidInput <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token number">0.0</span>
    absExponent <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span>
    result <span class="token operator">=</span> PowerWithUnsignedExponent2<span class="token punctuation">(</span>base<span class="token punctuation">,</span> absExponent<span class="token punctuation">)</span>
    <span class="token keyword">if</span> exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span>result
    <span class="token keyword">return</span> result

<span class="token comment">#test code </span>
base <span class="token operator">=</span> <span class="token number">2</span>
exponent <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Power<span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570" tabindex="-1"><a class="header-anchor" href="#no-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570" aria-hidden="true">#</a> NO.17 \u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u6570\u5B57n\uFF0C\u6309\u987A\u5E8F\u6253\u5370\u51FA\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u5341\u8FDB\u5236\u6570\u3002\u6BD4\u5982\u8F93\u51653\uFF0C\u5219\u6253\u5370\u8F93\u51FA1,2,3\u4E00\u76F4\u5230\u6700\u5927\u76843\u4E3A\u6570999.</p><p>\u89E3\u9898\u601D\u8DEF\uFF1A\u6B64\u9898\u6D89\u53CA\u5230\u5927\u6570\u95EE\u9898\uFF0Cpython\u5185\u7F6E\u7C7B\u578B\u667A\u80FD\u652F\u6301\u5927\u6570\uFF0C\u4F46\u4E3A\u4E86\u8868\u73B0\u7B97\u6CD5\u601D\u60F3\u4E0D\u4F7F\u7528python\u5185\u7F6E\u5927\u6570\uFF0C\u8F6C\u800C\u4F7F\u7528list[str]\u6765\u8868\u793A\u5927\u6570</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">PrintNumber</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6253\u5370\u51FD\u6570\uFF0C\u4ECE\u7B2C\u4E00\u4E2A\u975E\u96F6\u6570\u5B57\u5F00\u59CB\u6253\u5370\uFF0C\u5FAA\u73AF\u67E5\u627E\u7B2C\u4E00\u4E2A\u975E\u96F6\u6570\u5B57\u6253\u5370\u5E76\u8DF3\u51FA\u5FAA\u73AF
    nums\u5FC5\u987B\u662Flist\u7C7B\u578B&quot;&quot;&quot;</span>
    isBeginning <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> isBeginning <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">:</span>
            isBeginning <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> isBeginning<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">def</span> <span class="token function">Increment</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6570\u5B57\u81EA\u589E\u51FD\u6570\uFF0C\u5E76\u5224\u65AD\u662F\u5426\u6EA2\u51FA\uFF0C\u8FD4\u56DE\u6EA2\u51FA\u6807\u5FD7\uFF0Cnums\u5FC5\u987B\u662Flist[str]\u7C7B\u578B\uFF0Clist\u662F\u53EF\u53D8\u7C7B\u578B\uFF0C\u5728\u4F20\u53C2\u7684\u65F6\u5019\u7C7B\u4F3C\u4E8Ec++
    \u4E2D\u4F20\u6307\u9488\uFF0C\u6240\u4EE5\u65E0\u9700\u8FD4\u56DE\u5373\u53EF\u4FEE\u6539\u4F20\u5165nums\u4E2D\u7684\u5143\u7D20&quot;&quot;&quot;</span>
    isOverflow <span class="token operator">=</span> <span class="token boolean">False</span>
    nTakeOver <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># \u8FDB\u4F4D</span>
    nLength <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#\u53CD\u5411\u5FAA\u73AF[nLength,0]\uFF0C\u8BBE\u7F6E\u6B65\u957F\u4E3A-1\u5373\u53CD\u5411</span>
        nSum <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> nTakeOver
        <span class="token keyword">if</span> i <span class="token operator">==</span> nLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            nSum <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> nSum <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                isOverflow <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                nSum <span class="token operator">-=</span> <span class="token number">10</span>
                nTakeOver <span class="token operator">=</span> <span class="token number">1</span>
                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> nSum<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> nSum<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">return</span> isOverflow
<span class="token keyword">def</span> <span class="token function">PrintToMaxOfNDigits</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6253\u5370\u4E3B\u51FD\u6570\uFF0C\u751F\u6210\u957F\u5EA6\u4E3An\u7684list[str]\u6765\u8868\u793An\u4F4D\u6570\u5B57\uFF0C\u53EF\u8868\u793A\u4EFB\u610F\u5927\u7684\u6570\u5B57&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token operator">*</span>n
    <span class="token keyword">while</span> <span class="token keyword">not</span> Increment<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        PrintNumber<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>

        
<span class="token keyword">def</span> <span class="token function">PrintToMaxOfNDigitsRecursively</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> length<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u6392\u5217\u7EC4\u5408\u7684\u601D\u60F3\uFF0C\u9012\u5F52\u7684\u5FAA\u73AF\u8C03\u7528\u51FD\u6570\uFF0C\u6253\u5370\u4E0D\u540C\u7684\u6570\u5B57\u7EC4\u5408&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> index <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
        PrintNumber<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>
        PrintToMaxOfNDigitsRecursively<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> length<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">PrintToMaxOfNDigits2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6253\u5370\u6570\u5B57\uFF0C\u9012\u5F52\u8C03\u7528\u7248&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token operator">*</span>n
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        PrintToMaxOfNDigitsRecursively<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">#test code</span>
PrintToMaxOfNDigits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
PrintToMaxOfNDigits2<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1
2
3
4
5
6
7
8
9
</code></pre><h2 id="no-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#no-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9" aria-hidden="true">#</a> NO.18 \u5220\u9664\u94FE\u8868\u7684\u8282\u70B9</h2><h3 id="\u9898\u76EE\u4E00-\u5728o-1-\u65F6\u95F4\u5185\u5220\u9664\u94FE\u8868\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u4E00-\u5728o-1-\u65F6\u95F4\u5185\u5220\u9664\u94FE\u8868\u8282\u70B9" aria-hidden="true">#</a> \u9898\u76EE\u4E00\uFF1A\u5728O(1)\u65F6\u95F4\u5185\u5220\u9664\u94FE\u8868\u8282\u70B9</h3><p>\u7ED9\u5B9A\u5355\u5411\u94FE\u8868\u7684\u5934\u6307\u9488\u548C\u4E00\u4E2A\u8282\u70B9\u6307\u9488\uFF0C\u5B9A\u4E49\u4E00\u4E2A\u51FD\u6570\u5728O(1)\u65F6\u95F4\u5185\u5220\u9664\u8BE5\u8282\u70B9\u3002</p><ul><li>\u601D\u8DEF\uFF1A \u901A\u8FC7\u590D\u5236\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u5185\u5BB9\u5230\u5F53\u524D\u8282\u70B9\u7684\u65B9\u5F0F\u5220\u9664\u5F53\u524D\u8282\u70B9\uFF0C\u5E76\u4FDD\u5B58\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF0C\u65AD\u5F00\u94FE\u63A5\u5E76\u91CD\u65B0\u8FDE\u4E0A\u5F53\u524D\u8282\u70B9\u5373\u53EF\u505A\u5230\u5220\u9664\uFF0C<br> \u82E5\u8981\u5220\u9664\u7684\u8282\u70B9\u6CA1\u6709\u4E0B\u4E00\u4E2A\u8282\u70B9\u5219\u9700\u8981\u4ECE\u5934\u6307\u9488\u5F00\u59CB\u904D\u5386\u94FE\u8868<br> \u82E5\u8981\u5220\u9664\u7684\u8282\u70B9\u5C31\u662F\u5934\u6307\u9488\uFF0C\u5219\u76F4\u63A5\u5C06\u5934\u6307\u9488\u7F6E\u7A7A\u5373\u53EF</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521B\u5EFA\u94FE\u8868\u7C7B&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">def</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span>pListHead<span class="token punctuation">,</span> pToBeDelete<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u901A\u8FC7\u590D\u5236\u7684\u65B9\u5F0F\u5220\u9664\u6307\u5B9A\u8282\u70B9\uFF0C\u82E5\u8981\u5220\u9664\u5C3E\u8282\u70B9\uFF0C\u5219\u53EA\u80FD\u904D\u5386\u518D\u5220\u9664\u3002\u5E73\u5747\u65F6\u95F4\u590D\u6742\u5EA6[(n-1)*O(1)+O(n)]/n=O(1)&quot;&quot;&quot;</span>
<span class="token comment">#     print(&quot;pListHead&#39;s id is: &quot;+str(id(pListHead)))</span>
<span class="token comment">#     print(&quot;pToBeDelete&#39;s id is: &quot;+str(id(pToBeDelete)))</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> pListHead <span class="token keyword">or</span> <span class="token keyword">not</span> pToBeDelete<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token keyword">if</span> pToBeDelete<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        pNext <span class="token operator">=</span> pToBeDelete<span class="token punctuation">.</span><span class="token builtin">next</span>
        pToBeDelete<span class="token punctuation">.</span>val <span class="token operator">=</span> pNext<span class="token punctuation">.</span>val
<span class="token comment">#         print(&quot;pToBeDelete.val&#39;s id is: &quot;+str(id(pToBeDelete.val)))</span>
        pToBeDelete<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pNext<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">elif</span> pListHead <span class="token operator">==</span> pToBeDelete<span class="token punctuation">:</span>
        pListHead<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token boolean">None</span>
        pListHead<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token comment">#         pListHead = ListNode()</span>
<span class="token comment">#         print(&quot;pListHead&#39;s id is: &quot;+str(id(pListHead)))</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        pNode <span class="token operator">=</span> pListHead
        <span class="token keyword">while</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> pToBeDelete<span class="token punctuation">:</span>
            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
        pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token comment">#     return pListHead</span>
<span class="token comment">##\u521B\u5EFA\u94FE\u8868</span>
head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token string">&#39;head-&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># print(&quot;head&#39;s id is: &quot;+str(id(head)))</span>
<span class="token comment">#\u53EF\u53D8\u5BF9\u8C61\u76F4\u63A5\u8D4B\u503C\u5C31\u662F\u6D45\u62F7\u8D1D\uFF0C\u76F8\u5F53\u4E8Ec++\u4E2D\u4F20\u9012\u5730\u5740</span>
pnode <span class="token operator">=</span> head
<span class="token comment"># print(&quot;pnode&#39;s id is: &quot;+str(id(pnode)))</span>
valueList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> valueList<span class="token punctuation">:</span>
    pnode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    pnode <span class="token operator">=</span> pnode<span class="token punctuation">.</span><span class="token builtin">next</span>
<span class="token comment">#     print(&quot;pnode&#39;s id is: &quot;+str(id(pnode)))</span>
<span class="token comment"># gnode = ListNode(&#39;1&#39;)</span>
DeleteNode<span class="token punctuation">(</span>head<span class="token punctuation">,</span> pnode<span class="token punctuation">)</span>    
<span class="token comment">#\u9A8C\u8BC1\u94FE\u8868\u7528\u4EE3\u7801</span>
<span class="token comment"># print(gnode.val)</span>
rnode <span class="token operator">=</span> head
<span class="token keyword">while</span> rnode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>rnode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    rnode <span class="token operator">=</span> rnode<span class="token punctuation">.</span><span class="token builtin">next</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
\uFF01\uFF01\uFF01\u6CE8\uFF1Apython\u4F20\u53C2\u4E0Ec++\u4E2D\u5E38\u5F15\u7528\u4F20\u53C2\u76F8\u4F3C\uFF0C\u5BF9\u4E8E\u53EF\u53D8\u5BF9\u8C61\uFF0C\u4E0D\u53EF\u76F4\u63A5\u6539\u53D8\u5BF9\u8C61\u672C\u8EAB\uFF0C\u4F46\u53EF\u6539\u53D8\u5BF9\u8C61\u5185\u7F6E\u7684\u503C,\u5982\u76F4\u63A5
\u6539\u94FE\u8868\u5934\u4E0D\u53EF\u884C\uFF0C\u4F46\u53EF\u4EE5\u6539\u94FE\u8868\u5934\u7684\u503C\u53CA\u5176\u4ED6\u672A\u4F20\u5165\u7684\u8282\u70B9\uFF0C\u82E5\u4E00\u5B9A\u8981\u6539\u94FE\u8868\u5934\u5219\u53EA\u80FD\u901A\u8FC7\u8FD4\u56DE\u503C\u7684\u65B9\u5F0F\u8FDB\u884C\uFF0C\u4F8B\u5982list\u5BF9\u8C61
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u5220\u9664\u94FE\u8868\u4E2D\u91CD\u590D\u7684\u8282\u70B9\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#\u8BE5\u7B97\u6CD5\u4EC5\u80FD\u5220\u9664\u76F8\u90BB\u91CD\u590D\u8282\u70B9\uFF0C\u6BD4\u5982[1,2,3,4,1]\u9996\u4F4D\u8282\u70B9\u91CD\u590D\u5C31\u4E0D\u4F1A\u88AB\u5220\u9664\uFF0C\u6545\u4E0D\u4F5C\u6DF1\u5165\u6D4B\u8BD5</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">deleteDuplication</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> phead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> phead <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> phead
        pPreNode <span class="token operator">=</span> <span class="token boolean">None</span>
        pNode <span class="token operator">=</span> phead
        <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pNext <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            needDelete <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">if</span> pNext <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pNext<span class="token punctuation">.</span>val <span class="token operator">==</span> pNode<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                needDelete <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> needDelete<span class="token punctuation">:</span>
                pPreNode <span class="token operator">=</span> pNode
                pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                value <span class="token operator">=</span> pNode<span class="token punctuation">.</span>val
                pToBeDel <span class="token operator">=</span> pNode
                <span class="token keyword">while</span> pToBeDel <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pToBeDel<span class="token punctuation">.</span>val <span class="token operator">==</span> value<span class="token punctuation">:</span>
                    pNext <span class="token operator">=</span> pToBeDel<span class="token punctuation">.</span><span class="token builtin">next</span>
                    <span class="token keyword">del</span> pToBeDel
                    pToBeDel <span class="token operator">=</span> pNext
                <span class="token keyword">if</span> pPreNode <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    phead <span class="token operator">=</span> pNext
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    pPreNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pNext
                pNode <span class="token operator">=</span> pNext
        <span class="token keyword">return</span> phead
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D" tabindex="-1"><a class="header-anchor" href="#no-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D" aria-hidden="true">#</a> NO.19 \u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u7528\u6765\u5339\u914D\u5305\u542B&quot;.&quot;\u548C&quot;*&quot;\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u3002\u6A21\u5F0F\u4E2D\u7684\u5B57\u7B26&quot;.&quot;\u8868\u793A\u4EFB\u610F\u4E00\u4E2A\u5B57\u7B26\uFF0C\u800C&quot;*&quot;\u8868\u793A\u5B83\u524D\u9762\u7684\u5B57\u7B26\u53EF\u4EE5\u51FA\u73B0\u4EFB\u610F\u6B21(\u542B0\u6B21)\u3002\u5728\u672C\u9898\u4E2D\uFF0C\u5339\u914D\u662F\u6307\u5B57\u7B26\u4E32\u7684\u6240\u6709\u5B57\u7B26\u5339\u914D\u6574\u4E2A\u6A21\u5F0F\u3002\u4F8B\u5982\uFF0C\u5B57\u7B26\u4E32&quot;aaa&quot;\u4E0E\u6A21\u5F0F&quot;a.a&quot;\u548C&quot;ab*ac*a&quot;\u5339\u914D\uFF0C\u4F46\u4E0E&quot;aa.a&quot;\u548C&quot;ab*a&quot;\u5747\u4E0D\u5339\u914D\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A</li><li>\u6B65\u9AA4\uFF1A</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">matchCore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u63A2\u7D22\u6BCF\u4E00\u79CD\u60C5\u51B5&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> strs <span class="token keyword">and</span> <span class="token keyword">not</span> pattern<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> strs <span class="token keyword">and</span> <span class="token keyword">not</span> pattern<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">and</span> pattern<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> strs <span class="token keyword">and</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> pattern<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> self<span class="token punctuation">.</span>matchCore<span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pattern<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>matchCore<span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pattern<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>matchCore<span class="token punctuation">(</span>strs<span class="token punctuation">,</span> pattern<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> self<span class="token punctuation">.</span>matchCore<span class="token punctuation">(</span>strs<span class="token punctuation">,</span> pattern<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> strs <span class="token keyword">and</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> pattern<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>matchCore<span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pattern<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">match</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> pattern <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>matchCore<span class="token punctuation">(</span>s<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a.a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#no-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32" aria-hidden="true">#</a> NO.20 \u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u7528\u6765\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u8868\u793A\u6570\u503C(\u5305\u62EC\u6574\u6570\u548C\u5C0F\u6570)\u3002\u4F8B\u5982\uFF0C\u5B57\u7B26\u4E32&quot;+100&quot;,&quot;5e2&quot;,&quot;-123&quot;,&quot;3.1416&quot;,&quot;-1E-16&quot;\u90FD\u8868\u793A\u6570\u503C\uFF0C\u4F46&quot;12e&quot;,&quot;1a3.14&quot;,&quot;1.2.3&quot;,&quot;+-5&quot;,&quot;12e+5.4&quot;\u90FD\u4E0D\u662F</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">scanUnsignedInterger</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5BF9\u4F20\u5165\u5B57\u7B26\u4E32\u4ECE\u5934\u8BA1\u7B97\u662F\u65E0\u7B26\u53F7\u6570\u5B57\u7684\u957F\u5EA6\uFF0C\u8FD4\u56DE\u957F\u5EA6&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token keyword">and</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">and</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">:</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> i
    <span class="token keyword">def</span> <span class="token function">scanInteger</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5BF9\u4F20\u5165\u5B57\u7B26\u4E32\u4ECE\u5934\u8BA1\u7B97\u6709\u7B26\u53F7\u6570\u5B57\u7684\u957F\u5EA6\uFF0C\u8FD4\u56DE\u957F\u5EA6&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">if</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">&#39;-+&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>scanUnsignedInterger<span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>scanUnsignedInterger<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528index\u8868\u793A\u9996\u4E2A\u672A\u8FDB\u884C\u904D\u5386\u7684\u5B57\u7B26\u7684\u7D22\u5F15\uFF0C\u4F7F\u7528temp\u53D8\u91CF\u8868\u793A\u4E0A\u4E00\u4E2A\u5339\u914D\u7684\u957F\u5EA6\uFF0C\u4E3A\u5E94\u5BF9index\u6709\u53EF\u80FD\u8D85\u51FA\u5B57\u7B26\u4E32\u957F\u5EA6\uFF0C
        \u6BCF\u6B21\u8FDB\u884C\u5224\u65AD\u4E4B\u524D\u5148\u8FDB\u884C\u5224\u65AD\u662F\u5426\u6EA2\u51FA&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        index <span class="token operator">=</span> <span class="token number">0</span>
        temp <span class="token operator">=</span> self<span class="token punctuation">.</span>scanInteger<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        numeric <span class="token operator">=</span> temp <span class="token operator">&gt;</span> <span class="token number">0</span>
        index <span class="token operator">+=</span> temp
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">:</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
            temp <span class="token operator">=</span> self<span class="token punctuation">.</span>scanUnsignedInterger<span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            numeric <span class="token operator">=</span> temp <span class="token keyword">or</span> numeric
            index <span class="token operator">+=</span> temp
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;e&#39;</span> <span class="token keyword">or</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
            temp <span class="token operator">=</span> self<span class="token punctuation">.</span>scanInteger<span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            numeric <span class="token operator">=</span> numeric <span class="token keyword">and</span> temp
            index <span class="token operator">+=</span> temp
        <span class="token keyword">return</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>numeric<span class="token punctuation">)</span> <span class="token keyword">and</span> index <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token comment">#test code </span>
a_test <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a_test<span class="token punctuation">.</span>isNumeric<span class="token punctuation">(</span><span class="token string">&#39;+100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-21-\u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762" tabindex="-1"><a class="header-anchor" href="#no-21-\u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762" aria-hidden="true">#</a> NO.21 \u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u6574\u6570\u6570\u7EC4\uFF0C\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u6765\u8C03\u6574\u8BE5\u6570\u7EC4\u4E2D\u6570\u5B57\u7684\u987A\u5E8F\uFF0C\u4F7F\u5F97\u6240\u6709\u7684\u5947\u6570\u4F4D\u4E8E\u6570\u7EC4\u7684\u524D\u534A\u90E8\u5206\uFF0C\u6240\u6709\u7684\u5076\u6570\u4F4D\u4E8E\u6570\u7EC4\u7684\u540E\u534A\u90E8\u5206\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5BF9\u649E\u6307\u9488\u6CD5\uFF0C\u53D1\u73B0\u4E0D\u7B26\u5408\u8981\u6C42\u7684\u5143\u7D20\u5219\u4E0E\u53E6\u4E00\u4E0D\u7B26\u5408\u8981\u6C42\u7684\u5143\u7D20\u8C03\u6362\u987A\u5E8F&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> array<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        pBegin <span class="token operator">=</span> <span class="token number">0</span>
        pEnd <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd<span class="token punctuation">:</span>
            <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd <span class="token keyword">and</span> array<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                pBegin <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd <span class="token keyword">and</span> array<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                pEnd <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> pBegin <span class="token operator">&lt;</span> pEnd<span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token comment">#test code</span>
a_test <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
b_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
a_test<span class="token punctuation">.</span>reOrderArray<span class="token punctuation">(</span>b_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5C06\u5224\u65AD\u51FD\u6570\u89E3\u8026\u5206\u79BB\u51FA\u6765\uFF0C\u53EF\u4EE5\u8BA9\u7A0B\u5E8F\u5177\u6709\u66F4\u597D\u7684\u901A\u7528\u6027&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">_isEven</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5224\u65AD\u51FD\u6570&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
    <span class="token keyword">def</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\uFF0C\u6307\u9488\u5BF9\u649E\uFF0C\u4EA4\u6362\u4E0D\u7B26\u5408\u6761\u4EF6\u7684\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> array<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        pBegin <span class="token operator">=</span> <span class="token number">0</span>
        pEnd <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd<span class="token punctuation">:</span>
            <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd <span class="token keyword">and</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_isEven<span class="token punctuation">(</span>array<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                pBegin <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd <span class="token keyword">and</span> self<span class="token punctuation">.</span>_isEven<span class="token punctuation">(</span>array<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                pEnd <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> pBegin <span class="token operator">&lt;</span> pEnd<span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token comment">#test code</span>
a_test <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
b_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
a_test<span class="token punctuation">.</span>reOrderArray<span class="token punctuation">(</span>b_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#\u6CE8\u610F\u725B\u5BA2\u7F51\u4E0A\u589E\u52A0\u4E86\u9644\u52A0\u6761\u4EF6\uFF0C\u5947\u6570\u4E0E\u5947\u6570\u4E4B\u95F4\uFF0C\u5076\u6570\u4E0E\u5076\u6570\u4E4B\u95F4\u7684\u76F8\u5BF9\u4F4D\u7F6E\u4E0D\u80FD\u6539\u53D8\uFF0C\u76EE\u524D\u6682\u65E0\u8F83\u597D\u7684\u89E3\u6CD5</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># write code here</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token keyword">return</span> array
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-22-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#no-22-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9" aria-hidden="true">#</a> NO.22 \u94FE\u8868\u4E2D\u5012\u6570\u7B2CK\u4E2A\u8282\u70B9</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u94FE\u8868\uFF0C\u8F93\u51FA\u8BE5\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9\u3002\u4E3A\u4E86\u7B26\u5408\u5927\u591A\u6570\u4EBA\u7684\u4E60\u60EF\uFF0C\u672C\u9898\u4ECE1\u5F00\u59CB\u8BA1\u6570\uFF0C\u5373\u94FE\u8868\u7684\u5C3E\u8282\u70B9\u662F\u5012\u6570\u7B2C\u4E00\u4E2A\u8282\u70B9\u3002\u4F8B\u5982\uFF0C\u4E00\u4E2A\u94FE\u8868\u67096\u4E2A\u8282\u70B9\uFF0C\u4ECE\u5934\u7ED3\u70B9\u5F00\u59CB\uFF0C\u5B83\u4EEC\u7684\u503C\u4F9D\u6B21\u662F1,2,3,4,5,6\u3002\u8FD9\u4E2A\u94FE\u8868\u7684\u5012\u6570\u7B2C\u4E09\u4E2A\u8282\u70B9\u662F\u503C\u4E3A4\u7684\u8282\u70B9\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521B\u5EFA\u94FE\u8868\u7C7B&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FindKthToTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        pAHead <span class="token operator">=</span> head
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> pAHead<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pAHead <span class="token operator">=</span> pAHead<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">None</span>
        pBHead <span class="token operator">=</span> head
        <span class="token keyword">while</span> pAHead<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pAHead <span class="token operator">=</span> pAHead<span class="token punctuation">.</span><span class="token builtin">next</span>
            pBHead <span class="token operator">=</span> pBHead<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> pBHead
<span class="token comment">#test code</span>
<span class="token comment">#\u725B\u5BA2\u7F51\u5DF2\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-23-\u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#no-23-\u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9" aria-hidden="true">#</a> NO.23 \u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9</h2><p>\u9898\u76EE\uFF1A\u5982\u679C\u4E00\u4E2A\u94FE\u8868\u4E2D\u5305\u542B\u73AF\uFF0C\u5982\u4F55\u627E\u51FA\u73AF\u7684\u5165\u53E3\u8282\u70B9\uFF1F\u4F8B\u5982\u5728\u5982\u56FE3.8\u6240\u793A\u7684\u94FE\u8868\u4E2D\uFF0C\u73AF\u7684\u5165\u53E3\u8282\u70B9\u662F3<br> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 and 6-&gt;3</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">MeetingNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u901F\u5EA6\u4E0D\u540C\u7684\u53CC\u6307\u9488\uFF0C\u68C0\u67E5\u94FE\u8868\u4E2D\u662F\u5426\u5305\u542B\u73AF\uFF0C\u82E5\u5305\u542B\u5219\u8FD4\u56DE\u73AF\u4E2D\u7684\u8282\u70B9&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pHead <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        pSlow <span class="token operator">=</span> pHead<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">if</span> pSlow <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        pFast <span class="token operator">=</span> pSlow<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> pFast <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pSlow <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> pFast <span class="token operator">==</span> pSlow<span class="token punctuation">:</span>
                <span class="token keyword">return</span> pFast
            pSlow <span class="token operator">=</span> pSlow<span class="token punctuation">.</span><span class="token builtin">next</span>
            pFast <span class="token operator">=</span> pFast<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> pFast <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pFast <span class="token operator">=</span> pFast<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">def</span> <span class="token function">EntryNodeOfLoop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u83B7\u53D6\u73AF\u4E2D\u7684\u8282\u70B9\uFF0C\u5E76\u5FAA\u73AF\u7EDF\u8BA1\u73AF\u4E2D\u5305\u542B\u8282\u70B9\u7684\u4E2A\u6570nodesInLoop\uFF0C\u518D\u5229\u7528\u95F4\u9694nodesInLoop\u4E2A\u8282\u70B9\u7684\u6307\u9488\u5BF9\u649E\uFF0C\u5224\u65AD\u5165\u53E3&quot;&quot;&quot;</span>
        meetingNode <span class="token operator">=</span> self<span class="token punctuation">.</span>MeetingNode<span class="token punctuation">(</span>pHead<span class="token punctuation">)</span>
        <span class="token keyword">if</span> meetingNode <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        nodesInLoop <span class="token operator">=</span> <span class="token number">1</span>
        pNode1 <span class="token operator">=</span> meetingNode
        <span class="token keyword">while</span> pNode1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> meetingNode<span class="token punctuation">:</span>
            pNode1 <span class="token operator">=</span> pNode1<span class="token punctuation">.</span><span class="token builtin">next</span>
            nodesInLoop <span class="token operator">+=</span> <span class="token number">1</span>
        pNode1 <span class="token operator">=</span> pHead
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nodesInLoop<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pNode1 <span class="token operator">=</span> pNode1<span class="token punctuation">.</span><span class="token builtin">next</span>
        pNode2 <span class="token operator">=</span> pHead
        <span class="token keyword">while</span> pNode1 <span class="token operator">!=</span> pNode2<span class="token punctuation">:</span>
            pNode1 <span class="token operator">=</span> pNode1<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNode2 <span class="token operator">=</span> pNode2<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> pNode1
    
<span class="token comment">#test code </span>
<span class="token comment">#\u725B\u5BA2\u7F51\u4E0A\u5DF2\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-24-\u53CD\u8F6C\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#no-24-\u53CD\u8F6C\u94FE\u8868" aria-hidden="true">#</a> NO.24 \u53CD\u8F6C\u94FE\u8868</h2><p>\u9898\u76EE\uFF1A\u5B9A\u4E49\u4E00\u4E2A\u51FD\u6570\uFF0C\u8F93\u5165\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9\uFF0C\u53CD\u8F6C\u8BE5\u94FE\u8868\u5E76\u8F93\u51FA\u53CD\u8F6C\u540E\u7684\u94FE\u8868\u7684\u5934\u7ED3\u70B9\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u4F7F\u7528\u4E09\u4E2A\u6307\u9488\uFF0C\u4ECE\u5DE6\u5230\u53F3\u4F9D\u6B21\u4FDD\u5B58\u53CD\u8F6C\u540E\u7684\u7ED3\u679Cresult\uFF0C\u5F85\u6DFB\u52A0\u5230\u53CD\u8F6C\u7ED3\u679C\u4E2D\u7684\u8282\u70B9\u6307\u9488left\uFF0C\u94FE\u8868\u4E2D\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u6307\u9488right\uFF0C\u904D\u5386\u4E00\u6B21\u94FE\u8868\u5373\u53EF\u5C06\u94FE\u8868\u53CD\u8F6C\uFF1B</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u8FD4\u56DEListNode</span>
    <span class="token keyword">def</span> <span class="token function">ReverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u4E09\u4E2A\u6307\u9488\u5206\u522B\u6307\u5411\u5F53\u524D\u6307\u9488\u7684\u524D\u548C\u540E\u8282\u70B9\uFF0C\u4EE5\u9632\u6B62\u94FE\u8868\u53CD\u8F6C\u65F6\u65AD\u88C2\uFF0C\u5E76\u521D\u59CB\u5316\u53CD\u8F6C\u540E\u94FE\u8868\u7684\u5934\u8282\u70B9\u548C\u524D\u8282\u70B9\uFF0C
        \u4EE5\u9632\u8FD4\u56DE\u51FA\u9519&quot;&quot;&quot;</span>
        pReversedHead <span class="token operator">=</span> <span class="token boolean">None</span>
        pNode <span class="token operator">=</span> pHead
        pPrev <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pNext <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> pNext <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pReversedHead <span class="token operator">=</span> pNode
            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pPrev
            pPrev <span class="token operator">=</span> pNode
            pNode <span class="token operator">=</span> pNext
        <span class="token keyword">return</span> pReversedHead
<span class="token comment">#test code</span>
<span class="token comment">#\u4EE3\u7801\u901A\u8FC7\u725B\u5BA2\u7F51\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-25-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#no-25-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868" aria-hidden="true">#</a> NO.25 \u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E24\u4E2A\u9012\u589E\u6392\u5E8F\u7684\u94FE\u8868\uFF0C\u5408\u5E76\u8FD9\u4E24\u4E2A\u94FE\u8868\u5E76\u4F7F\u65B0\u94FE\u8868\u4E2D\u7684\u8282\u70B9\u4ECD\u7136\u662F\u9012\u589E\u6392\u5E8F\u7684\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A <ol><li>\u4F7F\u7528p1\uFF0Cp2\u4E24\u4E2A\u6307\u9488\u6765\u904D\u5386\u4E24\u4E2A\u94FE\u8868\uFF0C\u521D\u59CB\u65F6\uFF0C\u4FDD\u8BC1p1\u6307\u5411\u8F83\u5C0F\u7684\u90A3\u4E2A\uFF1B</li><li>\u5373\u5408\u5E76\u540E\u7ED3\u679C\u5934\u6307\u9488\u4E3Ap1\u521D\u59CB\u6307\u5411\uFF0C\u904D\u5386\u5C06\u6700\u5148\u4ECEp1\u6240\u5728\u94FE\u8868\u5F00\u59CB\uFF0C\u8BB0flag\u4E3Atrue\uFF0C\u5219p2\u94FE\u8868\u4E3Afalse</li><li>\u4F7F\u7528\u6307\u9488pre\u8BBE\u4E3Anull\uFF0C\u5176\u540E\u8BE5\u6307\u9488\u59CB\u7EC8\u6307\u5411\u6B63\u5728\u904D\u5386\u7684\u94FE\u63A5p\u6307\u9488\u7684\u524D\u4E00\u4E2A\u8282\u70B9\uFF0C\u65B9\u4FBF\u65AD\u5F00\u8282\u70B9\u5E76\u91CD\u8FDE</li><li>\u82E5p1\u3001p2\u90FD\u4E0D\u4E3Anull\u65F6\uFF0C\u5BF9\u8F83\u5C0F\u7684\u94FE\u8868\u8FDB\u884C\u904D\u5386\uFF0C\u82E5\u5224\u65ADflag\u4E0D\u4E3A\u8981\u904D\u5386\u7684\u94FE\u8868\u65F6\uFF0Cpre\u5373\u65F6\u8981\u5408\u5E76\u7684\u4E00\u4E2A\u8282\u70B9\uFF0C\u5C06p\u6307\u9488\u8D4B\u503C\u7ED9pre\uFF0C\u5E76\u7FFB\u8F6Cflag\uFF0C\u5F00\u59CB\u904D\u5386\u5BF9\u5E94\u7684\u94FE\u8868</li><li>\u904D\u5386\u7ED3\u675F\u540E\u5224\u65ADflag\u82E5\u4E3Atrue\uFF0C\u5219\u8868\u660Ep1\u5148\u904D\u5386\u5B8C\u6210\uFF0C\u5C06p2\u5269\u4E0B\u7684\u8282\u70B9\u94FE\u63A5\u5230pre\u4E0A\u5373\u53EF\uFF0C\u53CD\u4E4B\u4E00\u6837</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u8FD4\u56DE\u5408\u5E76\u540E\u5217\u8868</span>
    <span class="token keyword">def</span> <span class="token function">Merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead1<span class="token punctuation">,</span> pHead2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u6BD4\u8F83\u6BCF\u4E00\u4E2A\u8282\u70B9\u7684\u503C\uFF0C\u5E76\u5C06\u8F83\u5C0F\u7684\u8282\u70B9\u52A0\u5165\u65B0\u7684\u94FE\u8868\u4E2D&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pHead1 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> pHead2
        <span class="token keyword">elif</span> pHead2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> pHead1
        pMergedHead <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> pHead1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> pHead2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
            pMergedHead <span class="token operator">=</span> pHead1
            pMergedHead<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>Merge<span class="token punctuation">(</span>pHead1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> pHead2<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            pMergedHead <span class="token operator">=</span> pHead2
            pMergedHead<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>Merge<span class="token punctuation">(</span>pHead1<span class="token punctuation">,</span> pHead2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> pMergedHead
<span class="token comment">#test code</span>
<span class="token comment">#\u725B\u5BA2\u7F51\u5DF2\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-26-\u6811\u7684\u5B50\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#no-26-\u6811\u7684\u5B50\u7ED3\u6784" aria-hidden="true">#</a> NO.26 \u6811\u7684\u5B50\u7ED3\u6784</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E24\u9897\u4E8C\u53C9\u6811A\u548CB\uFF0C\u5224\u65ADB\u662F\u4E0D\u662FA\u7684\u5B50\u7ED3\u6784\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5148\u9012\u5F52\u7684\u5224\u65ADA\u4E2D\u662F\u5426\u5305\u542BB\u7684\u6839\u5B50\u8282\u70B9\uFF0C\u82E5\u5305\u542B\uFF0C\u5219\u5F00\u59CB\u6BD4\u8F83\u5176\u5B50\u7ED3\u6784\u662F\u5426\u76F8\u540C\uFF0C\u9012\u5F52\u7EC8\u6B62\u6761\u4EF6\u4E3AA\u6216B\u904D\u5386\u5B8C\u6210</li><li>\u6B65\u9AA4\uFF1A <ol><li>\u8BBE\u7F6E\u9ED8\u8BA4\u7ED3\u679Cresult\u4E3Afalse\uFF0C\u5F53\u4E24\u6839\u8282\u70B9\u5B58\u5728\u65F6\uFF0C\u5148\u9012\u5F52\u67E5\u627EA\u6811\u4E2D\u4E0EB\u6839\u8282\u70B9\u76F8\u540C\u7684\u70B9\uFF0C\u5E76\u9012\u5F52\u5224\u65AD\u5176\u5B50\u7ED3\u6784\u662F\u5426\u76F8\u540C\uFF0C\u5C06\u6BD4\u8F83\u7ED3\u679C\u4FDD\u5B58\u5728result\u4E2D\uFF0C\u4FBF\u4E8E\u540E\u7EED\u5224\u65AD\u662F\u5426\u8FD8\u8981\u7EE7\u7EED\u904D\u5386A\u6811</li><li>\u5224\u65AD\u5B50\u7ED3\u6784\u65F6\uFF0C\u5148\u5224\u65ADB\u6811\u7684\u8282\u70B9\u662F\u5426\u4E3A\u7A7A\uFF0C\u82E5\u4E3A\u7A7A\u8868\u793A\u524D\u7F6E\u5339\u914D\u90FD\u6B63\u786E\u76F4\u63A5\u8FD4\u56DEtrue\uFF0C\u5426\u5219A\u6811\u8282\u70B9\u4E3A\u7A7A\u6216\u4E0D\u76F8\u7B49\u65F6\u76F4\u63A5\u8FD4\u56DEfalse\uFF0C\u82E5\u76F8\u540C\u5219\u9012\u5F52\u7684\u5224\u65AD\u5176\u5DE6\u53F3\u5B50\u6811\u662F\u76F8\u540C</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">Equal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5B9A\u4E49\u901A\u7528\u7684\u6BD4\u8F83\u51FD\u6570\uFF0C\u53EF\u4EE5\u517C\u5BB9\u66F4\u591A\u4E0D\u540C\u7C7B\u578B\u7684\u5B58\u50A8\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num1 <span class="token operator">-</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1E-7</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">DoesTree1HaveTree2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot1<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u6BD4\u8F83\uFF0C\u4E24\u9897\u5B50\u6811\u7684\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pRoot2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> pRoot1 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>Equal<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>val<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>DoesTree1HaveTree2<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> \\
    self<span class="token punctuation">.</span>DoesTree1HaveTree2<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">HasSubtree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot1<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u8FDB\u884C\u5148\u6839\u5E8F\u904D\u5386\uFF0C\u4ECE\u6839\u8282\u70B9\u5F00\u59CB\u5BF9\u503C\u8FDB\u884C\u6BD4\u8F83&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> pRoot1 <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pRoot2 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>Equal<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>val<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>DoesTree1HaveTree2<span class="token punctuation">(</span>pRoot1<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>HasSubtree<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>HasSubtree<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-27-\u4E8C\u53C9\u6811\u7684\u955C\u50CF" tabindex="-1"><a class="header-anchor" href="#no-27-\u4E8C\u53C9\u6811\u7684\u955C\u50CF" aria-hidden="true">#</a> NO.27 \u4E8C\u53C9\u6811\u7684\u955C\u50CF</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B8C\u6210\u4E00\u4E2A\u51FD\u6570\uFF0C\u8F93\u5165\u4E00\u9897\u4E8C\u53C9\u6811\uFF0C\u8F93\u51FA\u5B83\u7684\u955C\u50CF\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u9012\u5F52\uFF0C\u5F53\u8282\u70B9\u4E3A\u53F6\u5B50\u8282\u70B9\u65F6\u505C\u6B62\u9012\u5F52\uFF0C\u5426\u5219\u4E0D\u65AD\u4EA4\u6362\u8BE5\u8282\u70B9\u7684\u5DE6\u53F3\u8282\u70B9</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">Mirror</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u4EA4\u6362\u4E8C\u53C9\u6811\u7684\u5DE6\u53F3\u5B50\u6811\uFF0C\u9047\u53F6\u5B50\u8282\u70B9\u505C\u6B62\u9012\u5F52&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        pTemp <span class="token operator">=</span> root<span class="token punctuation">.</span>left
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> pTemp
        <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>Mirror<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>Mirror<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-28-\u5BF9\u79F0\u7684\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#no-28-\u5BF9\u79F0\u7684\u4E8C\u53C9\u6811" aria-hidden="true">#</a> NO.28 \u5BF9\u79F0\u7684\u4E8C\u53C9\u6811</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u7528\u6765\u5224\u65AD\u4E00\u9897\u4E8C\u53C9\u6811\u662F\u4E0D\u662F\u5BF9\u79F0\u7684\u3002\u5982\u679C\u4E00\u9897\u4E8C\u53C9\u6811\u548C\u5B83\u7684\u955C\u50CF\u4E00\u6837\uFF0C\u90A3\u4E48\u5B83\u662F\u5BF9\u79F0\u7684\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u524D\u5E8F\u904D\u5386\u4E3A \u5DE6-&gt;\u6839-&gt;\u53F3\uFF0C\u5B9A\u4E49\u53F3\u5E8F\u904D\u5386\u4E3A \u53F3-&gt;\u6839-&gt;\u5DE6\uFF0C\u5219\u5BF9\u79F0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386\u5FC5\u7136\u4E0E\u5176\u955C\u50CF\u7684\u53F3\u5E8F\u904D\u5386\u76F8\u7B49\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5199\u51FA\u524D\u5E8F\u904D\u5386\u65F6\uFF0C\u540C\u65F6\u5224\u65AD\u53F3\u5E8F\u904D\u5386\u5BF9\u5E94\u8282\u70B9\u662F\u5426\u76F8\u540C</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isSymmetricalCore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot1<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u6BD4\u8F83\u524D\u5E8F\u904D\u5386\u548C\u5BF9\u79F0\u524D\u5E8F\u904D\u5386\u5E8F\u5217\u7684\u503C\uFF0C\u82E5\u76F8\u540C\uFF0C\u5219\u4E3A\u5BF9\u79F0\u4E8C\u53C9\u6811&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pRoot1 <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pRoot2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> pRoot1 <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> pRoot2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> pRoot1<span class="token punctuation">.</span>val <span class="token operator">!=</span> pRoot2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSymmetricalCore<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>pRoot2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>isSymmetricalCore<span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8C03\u7528\u6838\u5FC3\u51FD\u6570\uFF0C\u5229\u7528\u4F20\u53C2\u907F\u514D\u6307\u5411\u540C\u4E00\u4E2A\u5BF9\u8C61&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSymmetricalCore<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> pRoot<span class="token punctuation">)</span>
    
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u4E0A\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-29-\u987A\u65F6\u9488\u6253\u5370\u77E9\u9635" tabindex="-1"><a class="header-anchor" href="#no-29-\u987A\u65F6\u9488\u6253\u5370\u77E9\u9635" aria-hidden="true">#</a> NO.29 \u987A\u65F6\u9488\u6253\u5370\u77E9\u9635</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u4E3E\u7740\uFF0C\u6309\u7167\u4ECE\u5916\u5411\u91CC\u4EE5\u987A\u65F6\u9488\u7684\u987A\u5E8F\u4F9D\u6B21\u6253\u5370\u51FA\u6BCF\u4E00\u4E2A\u6570\u5B57\u3002\u4F8B\u5982\uFF1A [[1,2,3,4]<br> [5,6,7,8]<br> [9,10,11,12]<br> [13,14,15,16]]<br> \u5219\u4F9D\u6B21\u6253\u5370\u51FA\u6570\u5B571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u53EF\u5148\u987A\u65F6\u9488\u6253\u5370\u5B8C\u4E00\u5708\uFF0C\u518D\u5BF9\u5185\u5708\u7684\u6570\u5B57\u7EE7\u7EED\u6253\u5370\uFF0C\u5C42\u5C42\u5D4C\u5957</li><li>\u6B65\u9AA4\uFF1A <ol><li>\u5B9A\u4E49start\u8868\u793A\u987A\u65F6\u9488\u6253\u5370\u7684\u8D77\u70B9\uFF0C\u6BCF\u6B21\u6253\u5370\u4E00\u5708start\u52A01\uFF0C\u9012\u5F52\u6253\u5370\u7EC8\u70B9\u4E3A2*start\u5C0F\u4E8E\u77E9\u9635mat\u7684\u6700\u5C0F\u7684\u7EF4\u5EA6(<code>2*start &lt; mat.length &amp;&amp; 2*start &lt; mat[0].length</code>)</li><li>\u987A\u65F6\u9488\u6253\u5370\u53EF\u91C7\u53D6\u8D2A\u5A6A\u6253\u5370\u65B9\u6CD5\uFF0C\u6253\u5370\u77E9\u9635\u8303\u56F4\u4E3A<code>start</code>\u5411\u53F3\u81F3<code>endX = mat[0].length - 1 - start</code>\uFF0C\u5411\u4E0B\u81F3<code>endY = mat.length - 1 - start</code>\u4ECE\u5DE6\u5230\u53F3\u5C3D\u91CF\u6253\u5370\u5B8C\u4E00\u884C\uFF0C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u65F6\uFF0C\u5219\u8D77\u70B9\u4E3Astart+1\uFF0C\u540C\u6837\u5C3D\u91CF\u6253\u5370\u5B8C\u4E00\u5217\u3002</li><li>\u4ECE\u53F3\u81F3\u5DE6\u6253\u5370\u65F6\u9700\u8981\u5148\u5224\u65AD\u662F\u5426\u4EC5\u6709\u4E00\u884C\uFF0C\u907F\u514D\u91CD\u590D\u6253\u5370\uFF0C\u8D77\u70B9\u4E3AendX - 1\uFF0C\u7EC8\u70B9\u4E3Astart</li><li>\u4ECE\u4E0B\u81F3\u4E0A\u4E5F\u9700\u8981\u5148\u5224\u65AD\u662F\u5426\u53EA\u6709\u4E00\u5217\uFF0C\u907F\u514D\u91CD\u590D\u6253\u5370,\u8D77\u70B9\u4E3AendY - 1,\u7EC8\u70B9\u4E3Astart+1</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">PrintMatrixInCircle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> start<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6839\u636E\u7ED9\u5B9A\u7684start\u6253\u5370\u4E8C\u7EF4\u77E9\u9635\u7684\u4E00\u5708\uFF0C\u5E76\u5C06\u5176\u5B58\u5165result\u4E2D\uFF0C\u56E0\u4E3Aresult\u662F\u5217\u8868\u3001\u53EF\u53D8\u7C7B\u578B\uFF0C\u51FD\u6570\u4E0D\u8FD4\u56DE
        \u4EFB\u4F55\u53C2\u6570\u4E5F\u53EF\u5BF9\u4F20\u5165\u7684result\u4E2D\u7684\u5143\u7D20\u8FDB\u884C\u4FEE\u6539&quot;&quot;&quot;</span>
        endX <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> start
        endY <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> start
        <span class="token comment">#\u4ECE\u5DE6\u5230\u53F3\u6253\u5370\u4E00\u884C</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> endX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            number <span class="token operator">=</span> matrix<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>
        <span class="token comment">#\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E00\u5217</span>
        <span class="token keyword">if</span> start <span class="token operator">&lt;</span> endY<span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> endY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                number <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>endX<span class="token punctuation">]</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>
        <span class="token comment">#\u4ECE\u53F3\u5230\u5DE6\u6253\u5370\u4E00\u884C</span>
        <span class="token keyword">if</span> start <span class="token operator">&lt;</span> endX <span class="token keyword">and</span> start <span class="token operator">&lt;</span> endY<span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                number <span class="token operator">=</span> matrix<span class="token punctuation">[</span>endY<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>
        <span class="token comment">#\u4ECE\u4E0B\u5230\u4E0A\u6253\u5370\u4E00\u5217</span>
        <span class="token keyword">if</span> start <span class="token operator">&lt;</span> endX <span class="token keyword">and</span> start <span class="token operator">&lt;</span> endY <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                number <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">]</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">printMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5FAA\u73AF\u6253\u5370\u6BCF\u4E00\u5708\u77E9\u9635&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> matrix <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> result
        start <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> start<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">&gt;</span> start<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>PrintMatrixInCircle<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> start<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            start <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-30-\u5305\u542Bmin\u51FD\u6570\u7684\u6808" tabindex="-1"><a class="header-anchor" href="#no-30-\u5305\u542Bmin\u51FD\u6570\u7684\u6808" aria-hidden="true">#</a> NO.30 \u5305\u542Bmin\u51FD\u6570\u7684\u6808</h2><p>\u9898\u76EE\uFF1A\u5B9A\u4E49\u6808\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u8BF7\u5728\u8BE5\u7C7B\u578B\u4E2D\u5B9E\u73B0\u4E00\u4E2A\u80FD\u591F\u5F97\u5230\u6808\u7684\u6700\u5C0F\u5143\u7D20\u7684min\u51FD\u6570\u3002\u5728\u8BE5\u6808\u4E2D\uFF0C\u8C03\u7528min\u3001push\u3001pop\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u90FD\u662FO(1)\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5185\u90E8\u589E\u52A0\u4E00\u4E2A\u8F85\u52A9\u6808\uFF0C\u6BCF\u6B21push\u65F6\uFF0C\u540C\u65F6\u7ED9\u8F85\u52A9\u6808push\u6700\u5C0F\u7684\u5143\u7D20(\u6BD4\u8F83\u8F85\u52A9\u6808\u4E2Dtop\u548C\u4F20\u5165\u6570\u503C\uFF0Cpush\u8F83\u5C0F\u7684\u8FDB\u8F85\u52A9\u6808)\uFF0C\u8FD9\u6837\u5C31\u80FD\u4FDD\u8BC1\u6700\u5C0F\u7684\u5143\u7D20\u59CB\u7EC8\u5728\u6808\u9876\uFF0C\u6BCF\u6B21pop\u65F6\u540C\u65F6pop\u8F85\u52A9\u6808\u4E2D\u7684\u5143\u7D20</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u7EF4\u62A4\u4E00\u4E2A\u548Cdata\u76F8\u540C\u5927\u5C0F\u7684\u8F85\u52A9\u6808\uFF0C\u7528\u6765\u5B58\u50A8\u6700\u5C0F\u503C&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>m_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>m_min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u538B\u5165\u6570\u636E\u7684\u540C\u65F6\u7EF4\u62A4\u8F85\u52A9\u6808\uFF0C\u4F7F\u7684\u8F85\u52A9\u6808\u4E2D\u5B58\u50A8\u7684\u6700\u5C0F\u503C\u59CB\u7EC8\u548C\u6570\u636E\u6808\u4E2D\u5177\u6709\u76F8\u540C\u7684\u4F4D\u7F6E&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>m_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m_min<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> node <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>m_min<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>m_min<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>m_min<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>m_min<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m_min<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m_data<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>m_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>m_min<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;data is empty&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>m_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>m_min<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-31-\u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#no-31-\u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217" aria-hidden="true">#</a> NO.31 \u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E24\u4E2A\u6574\u6570\u7684\u5E8F\u5217\uFF0C\u7B2C\u4E00\u4E2A\u5E8F\u5217\u8868\u793A\u6808\u7684\u538B\u5165\u987A\u5E8F\uFF0C\u8BF7\u5224\u65AD\u7B2C\u4E8C\u4E2A\u5E8F\u5217\u662F\u5426\u4E3A\u8BE5\u6808\u7684\u5F39\u51FA\u987A\u5E8F\u3002\u5047\u8BBE\u538B\u5165\u6808\u7684\u6240\u6709\u6570\u5B57\u5747\u4E0D\u76F8\u7B49\u3002\u4F8B\u5982\uFF0C\u5E8F\u5217[1,2,3,4,5]\u662F\u67D0\u6808\u7684\u538B\u5165\u5E8F\u5217\uFF0C\u5E8F\u5217[4,5,3,2,1]\u662F\u8BE5\u538B\u6808\u5E8F\u5217\u5BF9\u5E94\u7684\u4E00\u4E2A\u5F39\u51FA\u5E8F\u5217\uFF0C\u4F46[4,3,5,1,2]\u5C31\u4E0D\u53EF\u80FD\u662F\u8BE5\u538B\u6808\u5E8F\u5217\u7684\u5F39\u51FA\u5E8F\u5217\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5F00\u8F9F\u4E00\u4E2A\u8F85\u52A9\u6808stack\uFF0C\u6309\u7167\u5165\u6808\u5E8F\u5217pushed\uFF0C\u538B\u5165\u5143\u7D20\uFF0C\u5165\u6808\u7684\u540C\u65F6\u5224\u65AD\u662F\u5426\u4E0E\u51FA\u6808\u5E8F\u5217popped\u7684\u5143\u7D20\u662F\u5426\u76F8\u540C\uFF0C\u82E5\u76F8\u540C\u5219\u51FA\u6808</li><li>\u6B65\u9AA4\uFF1A <ol><li>\u5224\u65AD\u8F93\u5165\u5E8F\u5217\u957F\u5EA6\u662F\u5426\u76F8\u540C\uFF0C\u82E5\u4E0D\u540C\u5219\u76F4\u63A5\u8FD4\u56DEfalse</li><li>\u8BBE\u7F6E\u4E24\u4E2A\u6307\u9488i,j\u5206\u522B\u6307\u5411\u4E24\u4E2A\u5E8F\u5217pushed, popped</li><li>\u5148\u5FAA\u73AF\u904D\u5386pushed\u5E8F\u5217\uFF0C\u6309\u987A\u5E8F\u5165\u6808\uFF0C\u82E5\u5224\u65ADi\u82E5\u6307\u5411\u7684\u5143\u7D20\u4E0Ej\u6307\u5411\u7684\u76F8\u540C\uFF0C\u5219\u53EF\u8DF3\u8FC7\u5165\u6808\uFF0C\u76F4\u63A5\u53F3\u79FBi\u3001j\u6307\u9488\u5E76\u8DF3\u8FC7\u672C\u8F6E\u5FAA\u73AF\uFF0C\u82E5\u6808\u9876\u5143\u7D20\u4E0Ej\u7684\u6307\u5411\u76F8\u540C\u5219\u5148\u51FA\u6808\u53F3\u79FBj\u6307\u9488\u5E76\u8DF3\u8FC7\u672C\u8F6E\u5FAA\u73AF\uFF0C\u5176\u6B21\u624D\u662F\u5C06i\u5143\u7D20\u5165\u6808\uFF0C\u5E76\u53F3\u79FBi\u6307\u9488\uFF0C\u904D\u5386\u7EC8\u6B62\u6761\u4EF6\u4E3Ai\u6216j\u8D8A\u754C</li><li>\u5224\u65AD\u8F85\u52A9\u6808stack\u662F\u5426\u4E3A\u7A7A\uFF0C\u82E5\u4E0D\u4E3A\u7A7A\uFF0C\u5219\u8BF4\u660E\u672A\u5B8C\u5168\u51FA\u6808\uFF0C\u5219\u4F7F\u7528j\u6307\u9488\u7EE7\u7EED\u5BF9popped\u8FDB\u884C\u904D\u5386\uFF0C\u76F8\u540C\u5143\u7D20\u76F8\u540C\u5219\u51FA\u6808\uFF0C\u4E0D\u540C\u5219\u8868\u660E\u987A\u5E8F\u4E0D\u540C\uFF0C\u4E0D\u662F\u5F39\u51FA\u5E8F\u5217\u76F4\u63A5\u8FD4\u56DEfalse</li><li>\u6700\u540Ei\u3001j\u6307\u9488\u5E94\u8BE5\u7D22\u5F15\u5E94\u8BE5\u76F8\u540C\uFF0C\u5E76\u4E14\u8F85\u52A9\u6808stack\u4E3A\u7A7A\uFF0C\u8BF4\u660Epopped\u4E3A\u5F39\u51FA\u5E8F\u5217\u8FD4\u56DEtrue\uFF0C\u5426\u5219\u8FD4\u56DEfalse</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">IsPopOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pushV<span class="token punctuation">,</span> popV<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u8F85\u52A9\u6808\u6A21\u62DF\u6808\u7684\u538B\u5165\u548C\u5F39\u51FA\uFF0C\u4E0E\u5F39\u51FA\u5E8F\u5217\u6BD4\u8F83\u82E5\u4E0D\u7B26\u5408\u5219\u8FD4\u56DEFalse&quot;&quot;&quot;</span>
        bPossible <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> pushV <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> popV <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pNextPush <span class="token operator">=</span> <span class="token number">0</span>
            pNextPop <span class="token operator">=</span> <span class="token number">0</span>
            stackData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            nLength <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pushV<span class="token punctuation">)</span>
            <span class="token keyword">while</span> pNextPop <span class="token operator">&lt;</span> nLength<span class="token punctuation">:</span>
                <span class="token keyword">while</span> <span class="token keyword">not</span> stackData <span class="token keyword">or</span> stackData<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> popV<span class="token punctuation">[</span>pNextPop<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> pNextPush <span class="token operator">==</span> nLength<span class="token punctuation">:</span>
                        <span class="token keyword">break</span>
                    stackData<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pushV<span class="token punctuation">[</span>pNextPush<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    pNextPush <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> stackData<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> popV<span class="token punctuation">[</span>pNextPop<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
                stackData<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                pNextPop <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> stackData <span class="token keyword">and</span> pNextPop <span class="token operator">==</span> nLength<span class="token punctuation">:</span>
                bPossible <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> bPossible
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-32-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#no-32-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" aria-hidden="true">#</a> NO.32 \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811</h2><h3 id="\u9898\u76EE\u4E00-\u4E0D\u5206\u884C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u4E00-\u4E0D\u5206\u884C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u9898\u76EE\u4E00\uFF1A\u4E0D\u5206\u884C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811</h3><p>\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u51FA\u4E8C\u53C9\u6811\u7684\u6BCF\u4E2A\u8282\u70B9\uFF0C\u540C\u4E00\u5C42\u7684\u8282\u70B9\u6309\u7167\u4ECE\u5DE6\u5230\u53F3\u6536\u5C3E\u987A\u5E8F\u6253\u5370\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u961F\u5217\u7684\u5148\u8FDB\u5148\u51FA\u7279\u6027\uFF0C\u5C06\u8282\u70B9\u5DE6\u53F3\u8282\u70B9\u987A\u5E8F\u6DFB\u52A0\u5230\u961F\u5217\u4E2D\uFF0C\u5224\u65AD\u961F\u5217\u957F\u5EA6\uFF0C\u6BCF\u6B21\u51FA\u961F\u5C06\u8282\u70B9\u503C\u4FDD\u5B58\u5728\u7ED3\u679C\u4E2D\uFF0C\u5E76\u5224\u65AD\u662F\u5426\u53F3\u5DE6\u53F3\u5B50\u8282\u70B9\uFF0C\u5E76\u5165\u961F\u5230\u961F\u5217\u4E2D\uFF0C\u904D\u5386\u5B8C\u6210\u540E\u8FD4\u56DE\u7ED3\u679C\u5373\u53EF</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">PrintFromTopToBottom</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u961F\u5217\u7684\u5148\u8FDB\u5148\u51FA\u539F\u5219\uFF0C\u987A\u5E8F\u5B58\u50A8\u8981\u6253\u5370\u7684\u6570\u503C&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
            <span class="token keyword">return</span> result
        dequeTreeNode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        dequeTreeNode<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dequeTreeNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pNode <span class="token operator">=</span> dequeTreeNode<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                dequeTreeNode<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                dequeTreeNode<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9898\u76EE\u4E8C-\u5206\u884C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u4E8C-\u5206\u884C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u9898\u76EE\u4E8C\uFF1A\u5206\u884C\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811</h3><p>\u4ECE\u4E0A\u5230\u4E0B\u6309\u5C42\u6253\u5370\u4E8C\u53C9\u6811\uFF0C\u540C\u4E00\u5C42\u7684\u8282\u70B9\u6309\u7167\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u6253\u5370\uFF0C\u6BCF\u4E00\u5C42\u6253\u5370\u4E00\u884C\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u589E\u52A0\u8BB0\u5F55\u5F53\u524D\u5C42\u5269\u4F59\u8282\u70B9\u548C\u4E0B\u4E00\u5C42\u8981\u904D\u5386\u8282\u70B9\u6570\u7684\u53D8\u91CF\uFF0C\u5728\u904D\u5386\u4E2D\u66F4\u65B0\uFF0C\u5E76\u5224\u65AD\u5F53\u524D\u5269\u4F59\u8282\u70B9\u6570\u4E3A0\u4E14\u4E0B\u5C42\u8282\u70B9\u6570\u4E0D\u4E3A0\u65F6\uFF0C\u5C06\u4E0B\u5C42\u8282\u70B9\u6570\u63A8\u5165\u5F53\u524D\u5C42\u5269\u4F59\u8282\u70B9\u6570\u53D8\u91CF\u4E2D\uFF0C\u91CD\u7F6E\u4E0B\u5C42\u8282\u70B9\u6570\uFF0C\u7ED9result\u63A8\u5165\u65B0\u7684\u7A7A\u6570\u7EC4\uFF0C\u7528\u4E8E\u8BB0\u5F55\u4E0B\u4E00\u5C42\u7684\u8282\u70B9\u503C\uFF0C\u8FDB\u5165\u4E0B\u4E00\u5C42\u904D\u5386\u5FAA\u73AF</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u8FD4\u56DE\u4E8C\u7EF4\u5217\u8868[[1,2],[4,5]]</span>
    <span class="token keyword">def</span> <span class="token function">Print</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5728\u5229\u7528\u961F\u5217\u7684\u57FA\u7840\u4E0A\uFF0C\u989D\u5916\u52A0\u4E24\u4E2A\u53D8\u91CF\u8868\u793A\u4E0B\u4E00\u884C\u7684\u8282\u70B9\u6570\u548C\u5F53\u524D\u884C\u5269\u4F59\u4F4D\u6253\u5370\u8282\u70B9\u6570&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> pRoot<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span>
        nextLevel <span class="token operator">=</span> <span class="token number">0</span>
        toBePrinted <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> nodes<span class="token punctuation">:</span>
            pNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
                nextLevel <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
                nextLevel <span class="token operator">+=</span> <span class="token number">1</span>
            toBePrinted <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> toBePrinted <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> nextLevel <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                toBePrinted <span class="token operator">=</span> nextLevel
                nextLevel <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9898\u76EE\u4E09-\u4E4B\u5B57\u5F62\u6253\u5370\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u4E09-\u4E4B\u5B57\u5F62\u6253\u5370\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u9898\u76EE\u4E09\uFF1A\u4E4B\u5B57\u5F62\u6253\u5370\u4E8C\u53C9\u6811</h3><p>\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u6309\u7167\u4E4B\u5B57\u5F62\u987A\u5E8F\u6253\u5370\u4E8C\u53C9\u6811\uFF0C\u5373\u7B2C\u4E00\u884C\u6309\u7167\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u6253\u5370\uFF0C\u7B2C\u4E8C\u5C42\u6309\u7167\u4ECE\u53F3\u5230\u5DE6\u7684\u987A\u5E8F\u6253\u5370\uFF0C\u7B2C\u4E09\u884C\u518D\u6309\u7167\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u6253\u5370\uFF0C\u5176\u4ED6\u884C\u4EE5\u6B64\u7C7B\u63A8\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u6808\u7684\u5148\u8FDB\u540E\u51FA\u7279\u6027\uFF0C\u7FFB\u8F6C\u6253\u5370\u987A\u5E8F\uFF0C\u7EF4\u6301\u4E24\u4E2A\u6808\u5206\u522B\u5B58\u50A8\u5F53\u524D\u884C\u548C\u4E0B\u4E00\u884C\uFF0C\u51FA\u6808\u65F6\u521A\u597D\u53EF\u4EE5\u5B9E\u73B0\u53CD\u5E8F</li><li>\u6B65\u9AA4\uFF1A <ol><li>\u63A5\u4E0A\u9898\u5229\u7528\u53D8\u91CF\u5B58\u50A8\u5F53\u524D\u5C42\u5269\u4F59\u8282\u70B9\u6570\u548C\u4E0B\u4E00\u5C42\u8282\u70B9\u6570\uFF0C\u8FBE\u5230\u6309\u5C42\u904D\u5386</li><li>\u5229\u7528\u53CC\u7AEF\u961F\u5217\u6A21\u62DF\u4E24\u4E2A\u6808\uFF0C\u5F53\u4ECE\u5DE6\u5411\u53F3\u904D\u5386\u65F6\uFF0C\u5728\u5DE6\u8FB9\u53D6\u6570\u636E\uFF0C\u53F3\u8FB9\u63A8\u5165\u6570\u636E\uFF0C\u63A8\u5165\u6570\u636E\u65F6\u5148\u63A8\u5DE6\u8282\u70B9\uFF0C\u540E\u63A8\u53F3\u8282\u70B9\uFF0C\u8FD9\u6837\u5728\u4E0B\u4E00\u5C42\u51FA\u6808\u65F6\u5C31\u4F1A\u5148\u51FA\u53F3\u8282\u70B9\u518D\u51FA\u5DE6\u8282\u70B9\u8FBE\u5230\u53CD\u5E8F\u7684\u6548\u679C\u3002</li><li>\u6307\u5B9A\u4E00\u4E2A\u53D8\u91CF\u8868\u793A\u5DE6\u53F3\u904D\u5386\u987A\u5E8F\uFF0C\u5F53\u4ECE\u5DE6\u5411\u53F3\u904D\u5386\u65F6\uFF0C\u4ECE\u5DE6\u8FB9\u53D6\u6570\u636E\uFF0C\u53CD\u4E4B\u4ECE\u53F3\u8FB9\u53D6\u6570\u636E\uFF0C\u63A8\u5165\u6570\u636E\u65F6\u4F9D\u6B21\u7C7B\u63A8\uFF0C\u5F53\u8BE5\u5C42\u904D\u5386\u5B8C\u6210\u65F6\u7FFB\u8F6C\u8BE5\u53D8\u91CF</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u8FD4\u56DE\u4E8C\u7EF4\u5217\u8868[[1,2],[4,5]]</span>
    <span class="token keyword">def</span> <span class="token function">Print</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u6808\u7684\u5148\u8FDB\u540E\u51FA\u539F\u5219\uFF0C\u4F7F\u7528\u4E24\u4E2A\u6808\u5206\u522B\u5B58\u50A8\u5F53\u524D\u884C\u548C\u4E0B\u4E00\u884C\uFF0C\u5728\u5F39\u51FA\u5143\u7D20\u7684\u540C\u65F6\u538B\u5165\u4E0B\u4E00\u884C\u5143\u7D20\u5230\u53E6\u4E00\u4E2A\u6808\u4E2D&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> pRoot<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        levels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        current <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token builtin">next</span> <span class="token operator">=</span> <span class="token number">1</span>
        levels<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span>
        <span class="token keyword">while</span> levels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> levels<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            pNode <span class="token operator">=</span> levels<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                    levels<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
                <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                    levels<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                    levels<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
                <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                    levels<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> levels<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token keyword">and</span> levels<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                current <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> current
                <span class="token builtin">next</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token builtin">next</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-33-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#no-33-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217" aria-hidden="true">#</a> NO.33 \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u6574\u6570\u6570\u7EC4\uFF0C\u5224\u65AD\u8BE5\u6570\u7EC4\u662F\u4E0D\u662F\u67D0\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u7ED3\u679C\u3002\u5982\u679C\u662F\u5219\u8FD4\u56DEtrue\uFF0C\u5426\u5219\u8FD4\u56DEfalse\u3002\u5047\u8BBE\u8F93\u5165\u7684\u6570\u7EC4\u7684\u4EFB\u610F\u4E24\u4E2A\u6570\u5B57\u4E92\u4E0D\u76F8\u540C\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7279\u6027\u3002\u540E\u5E8F\u904D\u5386\u5E8F\u5217\u7684\u6700\u540E\u4E00\u4E2A\u503C\u4E3A\u6839\u8282\u70B9\uFF0C\u5176\u5DE6\u5B50\u6811\u90FD\u5C0F\u4E8E\u6839\u8282\u70B9\uFF0C\u53F3\u5B50\u6811\u90FD\u5927\u4E8E\u6839\u8282\u70B9\uFF0C\u53EF\u4EE5\u627E\u5230\u5DE6\u53F3\u5B50\u6811\u540E\u5E8F\u5E8F\u5217\uFF0C\u518D\u9012\u5F52\u7684\u5224\u65AD\u5DE6\u53F3\u5B50\u6811\u662F\u5426\u6EE1\u8DB3\u6761\u4EF6</li><li>\u6B65\u9AA4 <ol><li>\u7EA6\u5B9A\u7A7A\u6570\u7EC4\u76F4\u63A5\u8FD4\u56DEtrue\uFF0C\u8BBE\u5B9Ap\u6307\u9488\u6307\u5411\u7B2C\u4E00\u4E2A\u53F3\u5B50\u6811\u7684\u8282\u70B9</li><li>\u5FAA\u73AF\u904D\u5386\u6570\u7EC4\uFF0C\u76F4\u5230p\u5927\u4E8E\u6839\u8282\u70B9root\uFF0C\u8868\u660E0-p\u4E3A\u5DE6\u5B50\u6811\uFF0C\u904D\u5386\u53F3\u5B50\u6811\uFF0C\u82E5\u53D1\u73B0\u5C0F\u4E8Eroot\u7684\u5143\u7D20\u5219\u76F4\u63A5\u8FD4\u56DEfalse</li><li>\u82E5\u5DE6\u5B50\u6811\u5B58\u5728\u5219\u9012\u5F52\u5224\u65AD\u5DE6\u5B50\u6811\u5E8F\u5217\u662F\u5426\u6EE1\u8DB3\uFF0C\u53F3\u5B50\u6811\u540C\u7406</li><li>\u6700\u540E\u5408\u5E76\u5DE6\u53F3\u5224\u65AD\u7ED3\u679C\u5E76\u8FD4\u56DE</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">VerifySquenceOfBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5148\u63D0\u53D6\u672B\u5C3E\u5143\u7D20\u4F5C\u4E3A\u6839\u8282\u70B9\uFF0C\u7136\u540E\u9012\u5F52\u9A8C\u8BC1\u5DE6\u53F3\u5B50\u6811&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> sequence<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        root <span class="token operator">=</span> sequence<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment">#\u4F7F\u7528while\u5FAA\u73AF\u4F7F\u7684i\u603B\u662F\u6307\u5411\u7B2C\u4E00\u4E2A\u975E\u5DE6\u5B50\u6811\u5143\u7D20</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> sequence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> root<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> sequence<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> root<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        left <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> self<span class="token punctuation">.</span>VerifySquenceOfBST<span class="token punctuation">(</span>sequence<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        right <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> self<span class="token punctuation">.</span>VerifySquenceOfBST<span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> left <span class="token keyword">and</span> right
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u6D4B\u8BD5\u901A\u8FC7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-34-\u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84" tabindex="-1"><a class="header-anchor" href="#no-34-\u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84" aria-hidden="true">#</a> NO.34 \u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u9897\u4E8C\u53C9\u6811\u548C\u4E00\u4E2A\u6574\u6570\uFF0C\u6253\u5370\u51FA\u4E8C\u53C9\u6811\u4E2D\u8282\u70B9\u503C\u7684\u548C\u4E3A\u8F93\u5165\u6574\u6570\u7684\u6240\u6709\u8DEF\u5F84\u3002\u4ECE\u6811\u7684\u6839\u8282\u70B9\u5F00\u59CB\u5F80\u4E0B\u4E00\u76F4\u5230\u53F6\u8282\u70B9\u6240\u7ECF\u8FC7\u7684\u8282\u70B9\u5F62\u6210\u4E00\u6761\u8DEF\u5F84</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5B9A\u4E49path\u6570\u7EC4\u7528\u4E8E\u5B58\u50A8\u8DEF\u5F84\uFF0Cresult\u7528\u4E8E\u5B58\u50A8\u7B26\u5408\u6761\u4EF6\u7684\u8DEF\u5F84\uFF0C\u5BF9\u8282\u70B9\u8FDB\u884C\u9012\u5F52\u904D\u5386\uFF0C\u5C06\u8BE5\u8282\u70B9\u7684\u503C\u63A8\u5165path\u4E2D\uFF0C\u82E5\u8BE5\u8282\u70B9\u6CA1\u6709\u5DE6\u53F3\u5B50\u8282\u70B9\u5219\u4E3A\u53F6\u5B50\u8282\u70B9\uFF0C\u8BA1\u7B97\u8DEF\u5F84\u548C\uFF0C\u5E76\u4E0E\u76EE\u6807\u6570\u8FDB\u884C\u6BD4\u8F83\uFF0C\u82E5\u76F8\u540C\u5219\u63A8\u5165result\u6570\u7EC4\u4E2D\uFF0C\u6700\u540E\u56DE\u6EAF\u51FA\u6808\u7ED3\u675F\u8BE5\u8282\u70B9\u7684\u904D\u5386</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u8FD4\u56DE\u4E8C\u7EF4\u5217\u8868\uFF0C\u5185\u90E8\u6BCF\u4E2A\u5217\u8868\u8868\u793A\u627E\u5230\u7684\u8DEF\u5F84</span>
    <span class="token keyword">def</span> <span class="token function">FindPathCore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span> path<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u904D\u5386\u5DE6\u5B50\u6811\u3001\u53F3\u5B50\u6811\uFF0Cpath\u5217\u8868\u8BB0\u5F55\u4E00\u6B21\u904D\u5386\u8DEF\u5F84\uFF0Cresult\u5217\u8868\u8BB0\u5F55\u7B26\u5408\u6761\u4EF6\u7684\u8DEF\u5F84\uFF0C\u56E0path\uFF0Cresult\u90FD\u662F\u53EF\u53D8\u7C7B\u578B
        \u6545\uFF0C\u51FD\u6570\u4E2D\u53EF\u4E0D\u8BBE\u8FD4\u56DE\u503C\u5C31\u80FD\u8FDB\u884C\u53C2\u6570\u4F20\u9012\u3002\u53E6\u7531\u4E8E\u4E8C\u53C9\u6811\u4E00\u822C\u586B\u6EE1\u5DE6\u5B50\u6811\u518D\u586B\u5145\u53F3\u5B50\u6811\uFF0C\u6545\u5148\u68C0\u67E5\u5DE6\u5B50\u6570\uFF0C\u518D\u68C0\u67E5\u53F3\u5B50\u6811\u5373\u53EF\u6EE1\u8DB3
        \u725B\u5BA2\u7F51\u4E2D\u8F83\u957F\u7684\u8DEF\u5F84\u5728\u524D\uFF0C\u8F83\u77ED\u8DEF\u5F84\u5728\u540E\u7684\u8981\u6C42\uFF0C\u4F46\u6B64\u65B9\u6CD5\u5BF9\u4E00\u822C\u4E8C\u53C9\u6811\u4E0D\u9002\u7528\uFF0C\u8FD8\u6709\u6539\u8FDB\u7A7A\u95F4&quot;&quot;&quot;</span>
        path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> expectNumber <span class="token keyword">and</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment">#\u627E\u5230\u4E00\u4E2A\u5339\u914D\u7684\u8DEF\u5F84</span>
            <span class="token comment">#\u4F7F\u7528path[:]\u7684\u65B9\u5F0F\u6D45\u62F7\u8D1D\u5217\u8868\u5230result\u4E2D\uFF0C\u907F\u514D\u76F4\u63A5\u4F7F\u7528path(\u5F15\u7528)\u9020\u6210\u540E\u7EEDpath\u53D1\u751F\u53D8\u5316\uFF0C\u5F15\u8D77result\u4E5F\u6539\u53D8\u3002</span>
            <span class="token comment">#\u6CE8\uFF1Apath\u4E2D\u5143\u7D20\u4E3A\u57FA\u672C\u5E38\u91CF\u7C7B\u578B\u65F6\u53EF\u91C7\u7528\u6B64\u65B9\u6CD5\uFF0C\u5426\u4FA7\u9700\u8981\u4F7F\u7528\u6DF1\u62F7\u8D1D</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>FindPathCore<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>expectNumber<span class="token punctuation">,</span>path<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
        <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>FindPathCore<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>expectNumber<span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
        path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">FindPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> expectNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\uFF0C\u68C0\u67E5\u8F93\u5165\u8282\u70B9\u662F\u5426\u4E3A\u7A7A&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>FindPathCore<span class="token punctuation">(</span>root<span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span>path<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-35-\u590D\u6742\u94FE\u8868\u7684\u590D\u5236" tabindex="-1"><a class="header-anchor" href="#no-35-\u590D\u6742\u94FE\u8868\u7684\u590D\u5236" aria-hidden="true">#</a> NO.35 \u590D\u6742\u94FE\u8868\u7684\u590D\u5236</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u51FD\u6570\uFF0C\u590D\u5236\u4E00\u4E2A\u590D\u6742\u94FE\u8868\u3002\u5728\u590D\u6742\u94FE\u8868\u4E2D\uFF0C\u6BCF\u4E2A\u8282\u70B9\u9664\u4E86\u6709\u4E00\u4E2Anext\u6307\u9488\u6307\u5411\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF0C\u8FD8\u6709\u4E00\u4E2ApSibling\u6307\u9488\u6307\u5411\u94FE\u8868\u4E2D\u7684\u4EFB\u610F\u8282\u70B9\u6216\u8005nullptr</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5728\u539F\u94FE\u8868\u7684\u57FA\u7840\u4E0A\uFF0C\u6BCF\u4E2A\u8282N\u70B9\u540E\u9762\u590D\u5236\u4E00\u4E2A\u8282\u70B9N&#39;,\u5982<code>1-&gt;2-&gt;3</code>\u53D8\u4E3A<code>1-&gt;1&#39;-&gt;2-&gt;2&#39;-&gt;3-&gt;3&#39;</code>\u3002\u904D\u5386\u590D\u5236\u540E\u7684\u94FE\u8868\uFF0C\u4FEE\u590DN&#39;\u8282\u70B9\u4E0A\u7684pSibling\u6307\u9488\uFF0C\u5206\u79BBN\u548CN&#39;\u8282\u70B9\u7EC4\u6210\u4E24\u4E2A\u94FE\u8868\uFF0CN&#39;\u8282\u70B9\u6240\u5728\u7684\u94FE\u8868\u5373\u4E3A\u590D\u5236\u597D\u7684\u94FE\u8868</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u8FD4\u56DE RandomListNode</span>
    <span class="token keyword">def</span> <span class="token function">CloneNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>phead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5728\u539F\u6709\u7684\u94FE\u8868\u57FA\u7840\u4E0A\u8FDB\u884C\u8D4B\u503C\uFF0C\u5373\u5C06\u6BCF\u4E2A\u8282\u70B9\u6CBF\u7740next\u94FE\u590D\u5236\u4E00\u4E2A&quot;&quot;&quot;</span>
        pNode <span class="token operator">=</span> phead
        <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pCloned <span class="token operator">=</span> RandomListNode<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            pCloned<span class="token punctuation">.</span>label <span class="token operator">=</span> pNode<span class="token punctuation">.</span>label
            pCloned<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            pCloned<span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token boolean">None</span>
            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pCloned
            pNode <span class="token operator">=</span> pCloned<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">def</span> <span class="token function">ConnetSiblingNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4FEE\u590D\u590D\u5236\u540E\u94FE\u8868\u8282\u70B9\u7684random\u94FE\u63A5&quot;&quot;&quot;</span>
        pNode <span class="token operator">=</span> pHead
        <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pClone <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> pNode<span class="token punctuation">.</span>random <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pClone<span class="token punctuation">.</span>random <span class="token operator">=</span> pNode<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNode <span class="token operator">=</span> pClone<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">def</span> <span class="token function">ReconnectNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5C06\u590D\u5236\u597D\u7684\u94FE\u8868\u62C6\u5206\u6210\u4E24\u4E2A\u94FE\u8868\uFF0C\u5947\u6570\u4F4D\u4E3A\u539F\u94FE\u8868\uFF0C\u5076\u6570\u4F4D\u4E3A\u8D4B\u503C\u597D\u7684\u94FE\u8868&quot;&quot;&quot;</span>
        pNode <span class="token operator">=</span> pHead
        pCloneHead <span class="token operator">=</span> <span class="token boolean">None</span>
        pCloneNode <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pCloneHead <span class="token operator">=</span> pCloneNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pCloneNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pCloneNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            pCloneNode <span class="token operator">=</span> pCloneNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pCloneNode<span class="token punctuation">.</span><span class="token builtin">next</span>
            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> pCloneHead
    <span class="token keyword">def</span> <span class="token function">Clone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5728\u539F\u94FE\u8868\u57FA\u7840\u4E0A\u8FDB\u884C\u590D\u5236\uFF0C\u518D\u62C6\u5206\uFF0C\u5206\u6210\u4E09\u4E2A\u6B65\u9AA4\uFF0C\u4E09\u4E2A\u51FD\u6570\u4F9D\u6B21\u8FDB\u884C\u5904\u7406&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>CloneNodes<span class="token punctuation">(</span>pHead<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>ConnetSiblingNodes<span class="token punctuation">(</span>pHead<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ReconnectNodes<span class="token punctuation">(</span>pHead<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-36-\u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#no-36-\u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868" aria-hidden="true">#</a> NO.36 \u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u9897\u4E8C\u53C9\u641C\u7D22\u6811\uFF0C\u5C06\u8BE5\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u6210\u4E00\u4E2A\u6392\u5E8F\u7684\u53CC\u5411\u94FE\u8868\u3002\u8981\u6C42\u4E0D\u80FD\u521B\u5EFA\u4EFB\u4F55\u65B0\u7684\u8282\u70B9\uFF0C\u53EA\u80FD\u8C03\u6574\u6811\u4E2D\u8282\u70B9\u6307\u9488\u7684\u6307\u5411</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5229\u7528\u4E8C\u53C9\u641C\u7D22\u6811\u7684\uFF1A\u5DE6&lt;\u6839&lt;\u53F3\u7684\u7279\u6027\uFF0C\u9012\u5F52\u904D\u5386\u5404\u8282\u70B9\uFF0C\u4F20\u5165\u94FE\u8868\u7684\u6700\u540E\u4E00\u4E2A\u8282\u70B9\uFF0C\u5BF9\u4E8E\u5F53\u524D\u8282\u70B9\uFF0C\u94FE\u8868\u7684\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u4E0E\u5176\u5DE6\u5B50\u6811\u4E2D\u7684\u5DE6\u53F6\u5B50\u8282\u70B9\u76F8\u8FDE\uFF0C\u5982\u679C\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u4E0D\u4E3A\u7A7A\uFF0C\u5219\u4FEE\u590D\u53CC\u5411\u94FE\u63A5\uFF0C\u6B64\u65F6\u8BE5\u8282\u70B9\u5C31\u88AB\u6DFB\u52A0\u5230\u4E86\u94FE\u8868\u4E2D\uFF0C\u79FB\u52A8\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u6307\u9488\uFF0C\u9012\u5F52\u5224\u65AD\u5176\u53F3\u5B50\u6811\uFF0C\u8FD4\u56DE\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u6307\u9488\uFF0C\u6700\u540E\u5411\u524D\u56DE\u6EAF\uFF0C\u76F4\u5230\u627E\u5230\u94FE\u8868\u5934\u6307\u9488\u5373\u53EF</li><li>\u6B65\u9AA4\uFF1A <ol><li>\u8BBE\u7F6E\u94FE\u8868\u5C3E\u90E8\u6307\u9488pTail\uFF0C\u521D\u59CB\u503C\u4E3Anull\uFF0C\u82E5\u5F53\u524D\u8282\u70B9\u5B58\u5728\u5DE6\u5B50\u8282\u70B9\uFF0C\u9012\u5F52\u5224\u65AD\u5DE6\u5B50\u6811,\u5C06\u5DE6\u5B50\u6811\u8F6C\u6362\u7ED3\u679C\u4E0E\u5F53\u524D\u8282\u70B9\u76F8\u8FDE(pCur.left = pTail)</li><li>\u82E5pTail\u4E0D\u4E3A\u7A7A\uFF0C\u5219\u4FEE\u590D\u53CC\u5411\u94FE\u63A5\uFF0C\u79FB\u52A8pTail\u6307\u5411\u5F53\u524D\u8282\u70B9\uFF0C\u8868\u793A\u5DF2\u5C06\u5F53\u524D\u8282\u70B9\u6DFB\u52A0\u5230\u94FE\u8868\u4E2D</li><li>\u82E5pCur.right\u5B58\u5728\uFF0C\u5219\u904D\u5386\u53F3\u5B50\u6811\uFF0C\u6B64\u8FC7\u7A0B\u53F3\u5B50\u6811\u4E2D\u4F1A\u81EA\u52A8\u5C06\u94FE\u8868\u7ED3\u679C\u76F8\u8FDE</li><li>\u5BF9\u6839\u8282\u70B9\u7684\u904D\u5386\u4F1A\u8FD4\u56DE\u94FE\u8868\u7684\u672B\u5C3E\u8282\u70B9\uFF0C\u5411\u524D\u904D\u5386\u94FE\u8868\u627E\u5230\u94FE\u8868\u5934\u6307\u9488\uFF0C\u8FD4\u56DE\u5373\u53EF</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">ConvertNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pNode<span class="token punctuation">,</span> pLastNodeInList<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u8F6C\u6362\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\uFF0C\u8FD4\u56DE\u8F6C\u6362\u6210\u94FE\u8868\u540E\u7684\u6700\u540E\u4E00\u4E2A\u8282\u70B9
        \u6CE8\u610F\uFF1ApLastNodeList\u5BF9\u8C61\u672C\u8EAB\u5728\u51FD\u6570\u4E2D\u662F\u4E0D\u53EF\u66F4\u6539\u7684\uFF0C\u82E5\u5F3A\u884C\u4FEE\u6539\u76F8\u5F53\u4E8E\u5B9A\u4E49\u4E86\u540C\u540D\u7684\u5C40\u90E8\u53D8\u91CF\uFF0C\u56E0\u6B64\u5FC5\u987B\u7528return\u7684\u65B9\u5F0F\u8FD4\u56DE\u4FEE\u6539\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pNode <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        pCurrent <span class="token operator">=</span> pNode
        <span class="token keyword">if</span> pCurrent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pLastNodeInList <span class="token operator">=</span> self<span class="token punctuation">.</span>ConvertNode<span class="token punctuation">(</span>pCurrent<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pLastNodeInList<span class="token punctuation">)</span>
        pCurrent<span class="token punctuation">.</span>left <span class="token operator">=</span> pLastNodeInList
        <span class="token keyword">if</span> pLastNodeInList <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pLastNodeInList<span class="token punctuation">.</span>right <span class="token operator">=</span> pCurrent
        pLastNodeInList <span class="token operator">=</span> pCurrent
        <span class="token keyword">if</span> pCurrent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pLastNodeInList <span class="token operator">=</span> self<span class="token punctuation">.</span>ConvertNode<span class="token punctuation">(</span>pCurrent<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pLastNodeInList<span class="token punctuation">)</span>
        <span class="token keyword">return</span> pLastNodeInList
    <span class="token keyword">def</span> <span class="token function">Convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRootOfTree<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u901A\u8FC7\u8C03\u7528\u8F6C\u6362\u51FD\u6570\uFF0C\u5E76\u8C03\u6574\u8FD4\u56DE\u7684\u672B\u5C3E\u8282\u70B9\uFF0C\u8FD4\u56DE\u5934\u8282\u70B9&quot;&quot;&quot;</span>
        pLastNodeInList <span class="token operator">=</span> <span class="token boolean">None</span>
        pLastNodeInList <span class="token operator">=</span> self<span class="token punctuation">.</span>ConvertNode<span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">,</span>pLastNodeInList<span class="token punctuation">)</span>
        pHeadOfList <span class="token operator">=</span> pLastNodeInList
        <span class="token keyword">while</span> pHeadOfList <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pHeadOfList<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pHeadOfList <span class="token operator">=</span> pHeadOfList<span class="token punctuation">.</span>left
        <span class="token keyword">return</span> pHeadOfList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-37-\u5E8F\u5217\u5316\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#no-37-\u5E8F\u5217\u5316\u4E8C\u53C9\u6811" aria-hidden="true">#</a> NO.37 \u5E8F\u5217\u5316\u4E8C\u53C9\u6811</h2><p>\u9898\u76EE\uFF1A\u8BF7\u5B9E\u73B0\u4E24\u4E2A\u51FD\u6570\uFF0C\u5206\u522B\u7528\u6765\u5E8F\u5217\u5316\u548C\u53CD\u5E8F\u5217\u5316\u4E8C\u53C9\u6811</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A<a href="#no7-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91">\u9762\u8BD5\u98987</a>\u4E2D\u5229\u7528\u4E86\u524D\u5E8F\u548C\u4E2D\u5E8F\u5E8F\u5217\u6765\u91CD\u5EFA\u4E8C\u53C9\u6811\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528\u524D\u5E8F\u65B9\u6CD5\u6765\u5E8F\u5217\u5316\u4E8C\u53C9\u6811\uFF0C\u4E3A\u4E86\u80FD\u53CD\u5E8F\u5217\u5316\uFF0C\u5BF9\u4E8E\u7A7A\u8282\u70B9\u4F7F\u7528null\u8868\u793A\uFF0C\u56E0\u6B64\u6839\u8282\u70B9\u540E\u5373\u4E3A\u5176\u5DE6\u5B50\u6811\u7684\u6839\u8282\u70B9\uFF0C\u82E5\u503C\u4E3Anull\u5219\u8868\u793A\u6CA1\u6709\u5DE6\u5B50\u6811\uFF0C\u82E5\u5176\u540E\u8DDF\u4E24\u4E2Anull\u5219\u8868\u793A\u5230\u8FBE\u53F6\u5B50\u8282\u70B9\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5229\u7528\u9012\u5F52\u7684\u65B9\u5F0F\u5BF9\u5176\u5E8F\u5217\u5316\u548C\u53CD\u5E8F\u5217\u5316</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">Serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u524D\u5E8F\u904D\u5386\u4E8C\u53C9\u6811\uFF0C\u9047\u7A7A\u8282\u70B9\u4F7F\u7528\u7279\u6B8A\u5B57\u7B26\u4EE3\u66FF&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> result
        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>Serialize<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>Serialize<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
        
    <span class="token keyword">def</span> <span class="token function">Deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u8BFB\u53D6\u5E8F\u5217\u751F\u6210\u8282\u70B9&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        value <span class="token operator">=</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        pRoot <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> value<span class="token punctuation">:</span>
            pRoot <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            pRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>Deserialize<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            pRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>Deserialize<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token keyword">return</span> pRoot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-38-\u5B57\u7B26\u4E32\u7684\u6392\u5217" tabindex="-1"><a class="header-anchor" href="#no-38-\u5B57\u7B26\u4E32\u7684\u6392\u5217" aria-hidden="true">#</a> NO.38 \u5B57\u7B26\u4E32\u7684\u6392\u5217</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u6253\u5370\u51FA\u8BE5\u5B57\u7B26\u4E32\u4E2D\u5B57\u7B26\u7684\u6240\u6709\u6392\u5217\u3002\u4F8B\u5982\uFF0C\u8F93\u5165\u5B57\u7B26abc\uFF0C\u5219\u6253\u5370\u51FA\u7531\u5B57\u7B26a,b,c\u6240\u80FD\u6392\u5217\u51FA\u6765\u7684\u6240\u6709\u5B57\u7B26\u4E32abc,acb,bac,bca,cab,cba\u3002</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u5BF9\u5B57\u7B26\u4E32\u8FDB\u884C\u6392\u5217\uFF0C\u5728\u8003\u8651\u6709\u91CD\u590D\u5B57\u7B26\u7684\u60C5\u51B5\u4E0B\uFF0C\u56FA\u5B9A\u4E00\u4F4D\u5B57\u7B26\uFF0C\u5269\u4E0B\u7684\u5B57\u7B26f(n-1)\u79CD\u6392\u5217\u65B9\u6CD5\uFF0C\u800C\u56FA\u5B9A\u5B57\u7B26\u7684\u9009\u53D6\u53EF\u4EE5\u6709n\u79CD\u9009\u62E9\uFF0C\u56E0\u6B64\u957F\u5EA6\u4E3An\u7684\u5B57\u7B26\u4E32\u6709n*f(n-1)\u4E2D\u6392\u5217\u65B9\u6CD5\uFF0C\u53EF\u91C7\u53D6\u9012\u5F52\u7684\u65B9\u5F0F\u6C42\u5F97f(n-1)\u7684\u7EC4\u5408\uFF0C\u5728\u5C06\u7B2C\u4E00\u4E2A\u56FA\u5B9A\u4F4D\u7684\u5B57\u7B26\u4E0E\u540E\u9762\u7684\u5B57\u7B26\u4F9D\u6B21\u4EA4\u6362\uFF0C\u5206\u522B\u6C42f(n-1)\u5373\u53EF\u5F97\u5230\u5168\u6392\u5217\uFF0C\u5728\u6709\u91CD\u590D\u5B57\u7B26\u7684\u60C5\u51B5\u4E0B\uFF0C\u6BCF\u6B21\u4FDD\u5B58\u4EA4\u6362\u8FC7\u7684\u5B57\u7B26\uFF0C\u5BF9\u91CD\u590D\u7684\u5B57\u7B26\u4EC5\u4EA4\u6362\u4E00\u6B21\uFF0C\u5373\u53EF\u907F\u514D\u7EE7\u7EED\u91CD\u590D\u6392\u5217\u3002</li><li>\u6B65\u9AA4 <ol><li>\u8BBE\u7F6E\u7ED3\u679C\u5BB9\u5668result\uFF0C\u5224\u65AD\u5F53\u524D\u56FA\u5B9A\u4F4DpCur\u662F\u5426\u662F\u6700\u540E\u4E00\u4F4D\uFF0C\u82E5\u662F\u5219\u76F4\u63A5\u5C06\u5F53\u524D\u5B57\u7B26\u6570\u7EC4\u62FC\u63A5\uFF0C\u63A8\u5165result\u4E2D\uFF0C\u5E76\u8FD4\u56DEresult</li><li>\u8BBE\u7F6EcharSet\u96C6\u5408\u4E34\u65F6\u53D8\u91CF\uFF0C\u4ECE\u5F53\u524D\u56FA\u5B9A\u4F4D\u5F00\u59CB\u904D\u5386\uFF0C\u82E5charSet\u4E2D\u5B58\u50A8\u6709\u8BE5\u5B57\u7B26\u5219\uFF0C\u8DF3\u8FC7\u672C\u6B21\u904D\u5386\uFF0C\u82E5\u6CA1\u6709\u5219\u52A0\u5165charSet\u4E2D\uFF0C\u8FDB\u884C\u6B65\u9AA43</li><li>\u4EA4\u6362\u5F53\u524D\u7D22\u5F15i\u548CpCur\u5904\u7684\u5B57\u7B26\uFF0C\u5411\u540E\u79FB\u52A8pCur\uFF0C\u9012\u5F52\u5B50\u4E32\u7684\u6392\u5217\uFF0C\u91CD\u590D\u6B65\u9AA41-3</li><li>\u5C06\u9012\u5F52\u7684\u8FD4\u56DE\u7ED3\u679C\u4E0Eresult\u8FDE\u63A5\u8D77\u6765\uFF0C\u590D\u539F\u4EA4\u6362\u7684\u5B57\u7B26(\u56DE\u6EAF)</li><li>\u904D\u5386\u5B8C\u6210\u540E\u8FD4\u56DEresult\u5373\u53EF</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F9D\u7167\u5251\u6307offer\u4E2DC++\u4EE3\u7801\u601D\u8DEF\u4FEE\u6539\u7684python\u7B97\u6CD5\uFF0C\u539FC++\u4EE3\u7801\u4E2D\u65E0\u6CD5\u4FDD\u8BC1\u8F93\u5165\u91CD\u590D\u5B57\u7B26\u65F6\uFF0C\u8F93\u51FA\u4E0D\u91CD\u590D\u7684\u7EC4\u5408\uFF0C\u4E5F\u65E0\u6CD5\u4FDD\u8BC1\u6309\u5B57\u5178\u5E8F\u8F93\u51FA\u3002
    \u672C\u7B97\u6CD5\u4E2D\u5728\u5FAA\u73AF\u4E2D\u6DFB\u52A0if\u5224\u65AD\u662F\u5426\u5B57\u7B26\u662F\u5426\u91CD\u590D\uFF0C\u5E76\u5728Permutation\u51FD\u6570\u8FD4\u56DE\u65F6\uFF0C\u8C03\u7528sorted\u51FD\u6570\u8FDB\u884C\u6392\u5E8F\uFF0C\u56E0\u6B64\u6709\u5F88\u5927\u7684\u7B97\u6CD5\u6539\u8FDB\u7A7A\u95F4&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">PermutationCore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u4ECE\u5DE6\u5230\u53F3\u8C03\u6362\u5217\u8868\u4E2D\u7684\u5143\u7D20\u4F4D\u7F6E\uFF0C\u8FD4\u56DE\u8C03\u6362\u540E\u7684\u7EC4\u5408\uFF0Ci\u4E3A\u8C03\u6362\u7684\u8D77\u59CB\u4F4D\u7F6E&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token comment"># \u5F53\u8D77\u59CB\u4F4D\u7F6E\u5230\u8FBE\u5217\u8868\u672B\u5C3E\u65F6\uFF0C\u76F4\u63A5\u8FD4\u56DE\u8BE5\u5217\u8868\u7EC4\u5408\u6210\u7684\u5B57\u7B26\u4E32\u5373\u53EF</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> result
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># \u5FAA\u73AF\u4E2D\u4F9D\u6B21\u5C06\u6BCF\u4E2A\u5B57\u7B26\u548C\u8D77\u59CB\u5B57\u7B26\u4EA4\u6362\uFF0C\u9012\u5F52\u8FD4\u56DE\u5269\u4F59\u90E8\u5206\u7EC4\u5408\u7684\u5B57\u7B26\u4E32</span>
                <span class="token keyword">if</span> ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> j <span class="token operator">!=</span> i<span class="token punctuation">:</span>
                    <span class="token comment"># \u82E5\u4E24\u5B57\u7B26\u76F8\u540C\uFF0C\u5219\u6CA1\u6709\u4EA4\u6362\u7684\u5FC5\u8981(\u9996\u5B57\u7B26\u4EA4\u6362\u7684\u60C5\u51B5\u9664\u5916)</span>
                    <span class="token keyword">continue</span>
                temp <span class="token operator">=</span> ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp
                result <span class="token operator">=</span> result <span class="token operator">+</span> self<span class="token punctuation">.</span>PermutationCore<span class="token punctuation">(</span>ss<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token comment"># \u8FD8\u539F\u4EA4\u6362\u8FC7\u7684\u5B57\u7B26</span>
                temp <span class="token operator">=</span> ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp
        <span class="token keyword">return</span> result

    <span class="token keyword">def</span> <span class="token function">Permutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ss<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\uFF0C\u4F20\u5165\u5217\u8868\uFF0C\u4F7F\u7528sorted\u51FD\u6570\u6309\u5B57\u5178\u5E8F\u91CD\u65B0\u6392\u5E8F\u8FD4\u56DE\u7684\u5B57\u7B26\u4E32\u7EC4\u5408&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> ss<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>PermutationCore<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-39-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-39-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57" aria-hidden="true">#</a> NO.39 \u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57</h2><p>\u9898\u76EE\uFF1A\u6570\u7EC4\u4E2D\u6709\u4E00\u4E2A\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570\u8D85\u8FC7\u6570\u7EC4\u957F\u5EA6\u7684\u4E00\u534A\uFF0C\u8BF7\u627E\u51FA\u8FD9\u4E2A\u6570\u5B57\u3002\u4F8B\u5982\uFF0C\u8F93\u5165\u4E00\u4E2A\u957F\u5EA6\u4E3A9\u7684\u6570\u7EC4[1,2,3,2,2,2,5,4,2]\u3002\u7531\u4E8E\u6570\u7EC42\u5728\u6570\u7EC4\u4E2D\u51FA\u73B0\u4E865\u6B21\uFF0C\u8D85\u8FC7\u6570\u7EC4\u957F\u5EA6\u7684\u4E00\u534A\uFF0C\u56E0\u6B64\u8F93\u51FA2.</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A <ol><li>\u6B21\u6570\u8D85\u8FC7\u4E00\u822C\u7684\u6570\u5B57\u4E00\u5B9A\u4F4D\u4E8E\u6392\u5E8F\u540E\u6570\u7EC4\u7684n/2\u5904\uFF0C\u53EF\u4EE5\u5229\u7528\u5FEB\u901F\u6392\u5E8F\u6CD5\uFF0C\u9009\u62E9\u6BD4\u8F83\u57FA\u6570\uFF0C\u82E5\u5DE6\u8FB9\u7684\u5E8F\u5217\u957F\u5EA6\u8D85\u8FC7\u4E00\u534A\uFF0C\u5219\u8BE5\u6570\u5B57\u5728\u5DE6\u8FB9\u5E8F\u5217\u4E2D\uFF0C\u9012\u5F52\u5224\u65AD\u5B50\u5E8F\u5217\u7D2F\u79EF\u957F\u5EA6\uFF0C\u5373\u53EF\u627E\u5230\u8BE5\u6570\u5B57</li><li>\u904D\u5386\u6570\u7EC4\uFF0C\u5BF9\u6570\u5B57\u51FA\u73B0\u6B21\u6570\u8FDB\u884C\u7EDF\u8BA1\uFF0Cnum\u521D\u59CB\u6B21\u6570\u4E3A1\uFF0C\u82E5\u4E0B\u4E00\u4E2A\u6570\u5B57\u76F8\u540C\u5219\u6B21\u6570times++\uFF0C\u5426\u5219times--\uFF0C\u82E5times\u4E3A0\u65F6\uFF0C\u5219\u6539\u53D8num\u4E3A\u5F53\u524D\u904D\u5386\u7684\u6570\u5B57\uFF0C\u91CD\u7F6Etimes\u4E3A1\uFF0C\u904D\u5386\u5B8C\u6210\u540E\uFF0Ctimes\u4E0D\u4E3A0\uFF0Cnum\u4E00\u5B9A\u662F\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u6700\u591A\u7684\u6570\u5B57\uFF0C\u9A8C\u8BC1\u5176\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u65F6\u5373\u53EF\u8FD4\u56DE</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">CheckMoreThanHalf</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers <span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u68C0\u67E5\u8F93\u5165\u6570\u5B57\u91CD\u590D\u6B21\u6570\u662F\u5426\u8D85\u8FC7\u6570\u7EC4\u957F\u5EA6\u7684\u4E00\u534A&quot;&quot;&quot;</span>
        times <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> number<span class="token punctuation">:</span>
                times <span class="token operator">+=</span> <span class="token number">1</span>
        isMoreThanHalf <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> times <span class="token operator">*</span><span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
            isMoreThanHalf <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> isMoreThanHalf

    <span class="token keyword">def</span> <span class="token function">MoreThanHalfNum_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u901A\u8FC7\u52A0\u51CF\u6CD5\u7EDF\u8BA1\u6570\u5B57\u5728\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570\uFF0C\u5F97\u5230\u6B21\u6570\u6700\u9AD8\u7684\u6570\u5B57\uFF0C\u6700\u7EC8\u5224\u65AD\u5176\u6B21\u6570\u662F\u5426\u8D85\u8FC7\u6570\u7EC4\u957F\u5EA6\u7684\u4E00\u534A\uFF0C\u7B97\u6CD5\u590D\u6742\u5EA6O(n)&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        result <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        times <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> times <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                times <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">:</span>
                times <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                times <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>CheckMoreThanHalf<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u53E6\u4E00\u4E2A\u601D\u8DEF\uFF0C\u5229\u7528\u5FEB\u901F\u6392\u5E8F\u6CD5\u7684\u601D\u60F3\uFF0C(\u6B64\u4EE3\u7801\u5C1A\u5B58\u5728bug\u901A\u8FC7\u725B\u5BA2\u7F51\u6D4B\u8BD5)</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521D\u59CB\u5316\u5168\u5C40\u9519\u8BEF\u6307\u9488\uFF0C\u4E3A\u4E86\u80FD\u4F7F\u7528random\u6807\u51C6\u5E93\uFF0C\u7528self.random\u53BB\u5E94\u7528\u5BFC\u5165\u540E\u7684\u8BE5\u5E93&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>g_bInputInvalid <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">import</span> random
        self<span class="token punctuation">.</span>random <span class="token operator">=</span> random

    <span class="token keyword">def</span> <span class="token function">Partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u968F\u673A\u9009\u62E9\u57FA\u51C6\u6570\uFF0C\u5C06\u8F83\u5C0F\u6570\u79FB\u5230\u524D\u65B9\uFF0C\u8FD4\u56DE\u57FA\u51C6\u6570\u5728\u8C03\u6574\u987A\u5E8F\u540E\u7684\u7D22\u5F15\u4F4D\u7F6E&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;Invalid Parameters&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># \u5728\u5FEB\u901F\u6392\u5E8F\u6CD5\u57FA\u7840\u4E0A\u989D\u5916\u6DFB\u52A0\u7684\u9632\u6B62\u9519\u8BEF\u51FA\u5165\u4EE3\u7801</span>
        <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
            <span class="token keyword">return</span> start
        
        index <span class="token operator">=</span> self<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>

        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp

        small <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>
                small <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> small <span class="token operator">!=</span> index<span class="token punctuation">:</span>
                    temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
                    data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>small<span class="token punctuation">]</span>
                    data<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">=</span> temp
        small <span class="token operator">+=</span> <span class="token number">1</span>

        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>small<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp

        <span class="token keyword">return</span> small

    <span class="token keyword">def</span> <span class="token function">CheckMoreThanHalf</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u540C\u4E0A\u4E00cell\u65B9\u6CD5\u7684\u68C0\u67E5\u51FD\u6570&quot;&quot;&quot;</span>
        times <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> number<span class="token punctuation">:</span>
                times <span class="token operator">+=</span> <span class="token number">1</span>
        isMoreThanHalf <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> times <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
            isMoreThanHalf <span class="token operator">=</span> <span class="token boolean">False</span>
            self<span class="token punctuation">.</span>g_bInputInvalid <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> isMoreThanHalf

    <span class="token keyword">def</span> <span class="token function">CheckInvalidArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u68C0\u67E5\u8F93\u5165\u662F\u5426\u5408\u6CD5&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>g_bInputInvalid <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>g_bInputInvalid <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>g_bInputInvalid

    <span class="token keyword">def</span> <span class="token function">MoreThanHalfNum_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u57FA\u4E8E\u5FEB\u901F\u6392\u5E8F\u6CD5\uFF0C\u91CD\u590D\u6B21\u6570\u8D85\u8FC7\u6570\u7EC4\u957F\u5EA6\u4E00\u534A\u65F6\u8BE5\u5143\u7D20\u5FC5\u5B9A\u4F4D\u4E8E\u6392\u5E8F\u540E\u6570\u7EC4\u7684\u4E2D\u95F4\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u57FA\u4E8E\u5FEB\u901F\u6392\u5E8F\u6CD5\u67E5\u627E\u6392\u5E8F\u540E\u4F4D\u4E8E\u4E2D\u95F4\u4F4D\u7F6E
        \u7684\u5143\u7D20\uFF0C\u5E76\u68C0\u67E5\u8BE5\u5143\u7D20\u662F\u5426\u7B26\u5408\u8981\u6C42&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>CheckInvalidArray<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        middle <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        start <span class="token operator">=</span> <span class="token number">0</span>
        end <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        <span class="token keyword">while</span> index <span class="token operator">!=</span> middle<span class="token punctuation">:</span>
            <span class="token keyword">if</span> index <span class="token operator">&gt;</span> middle<span class="token punctuation">:</span>
                end <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span>
                index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                start <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
                index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        result <span class="token operator">=</span> numbers<span class="token punctuation">[</span>middle<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>CheckMoreThanHalf<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-40-\u6700\u5C0F\u7684k\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#no-40-\u6700\u5C0F\u7684k\u4E2A\u6570" aria-hidden="true">#</a> NO.40 \u6700\u5C0F\u7684k\u4E2A\u6570</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165n\u4E2A\u6574\u6570\uFF0C\u627E\u51FA\u5176\u4E2D\u6700\u5C0F\u7684k\u4E2A\u6570\u3002\u4F8B\u5982\uFF0C\u8F93\u51654,5,1,6,2,7,3,8\u8FD98\u4E2A\u6570\uFF0C\u5219\u6700\u5C0F\u7684\u56DB\u4E2A\u6570\u662F1,2,3,4.</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A <ol><li>\u5229\u7528\u5FEB\u901F\u6392\u5E8F\u6CD5\uFF0C\u9009\u5B9A\u57FA\u6570\uFF0C\u5C06\u8F83\u5C0F\u7684\u6570\u79FB\u5230\u6570\u7EC4\u524D\u65B9\uFF0C\u8FD4\u56DE\u57FA\u6570\u6240\u5728\u4F4D\u7F6E\u7D22\u5F15\u3002\u82E5\u7D22\u5F15\u5C0F\u4E8E\u76EE\u6807k-1(\u7D22\u5F15\u4ECE0\u5F00\u59CB)\uFF0C\u5219\u8BF4\u660E\u6700\u5C0F\u7684k\u4E2A\u6570\u6709\u4E00\u90E8\u5206\u5728\u53F3\u8FB9\u5E8F\u5217\u4E2D\uFF0C\u5E76\u5BF9\u53F3\u65B9\u8303\u56F4\u5E8F\u5217\u518D\u8FDB\u884C\u5FEB\u6392\u6BD4\u8F83\uFF0C\u5982\u6B64\u53CD\u590D\u76F4\u5230\u8FD4\u56DE\u7D22\u5F15\u4E3Ak-1,\u5219\u8BE5\u6570\u7EC4\u524Dk\u9879\u5373\u4E3A\u6700\u5C0F\u7684k\u4E2A\u6570\u3002\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)</li><li>\u5229\u7528\u5BB9\u91CF\u4E3Ak\u4E2A\u6570\u7684\u6700\u5927\u5806\u6216\u7EA2\u9ED1\u6811\u5BB9\u5668\uFF0C\u5BF9\u6570\u7EC4\u8FDB\u884C\u4E00\u6B21\u904D\u5386\u6BD4\u8F83\uFF0C\u8F83\u5C0F\u7684\u5B58\u5165/\u4EA4\u6362\u5230\u5BB9\u5668\u4E2D\uFF0C\u904D\u5386\u5B8C\u6210\u540E\u5BB9\u5668\u4E2D\u5373\u4E3A\u6700\u5C0F\u7684k\u4E2A\u6570\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(nlogk)</li></ol></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)\u7684\u7B97\u6CD5\uFF0C\u9700\u8981\u4FEE\u6539\u6570\u7EC4\uFF0C\u4E14\u8F93\u51FA\u7684k\u4E2A\u6570\u4E0D\u4E00\u5B9A\u662F\u6392\u5E8F\u7684\uFF0C\u6B64\u7B97\u6CD5\u867D\u80FD\u6EE1\u8DB3\u9898\u76EE\u8981\u6C42\uFF0C\u4F46\u4E0D\u80FD\u901A\u8FC7\u725B\u5BA2\u7F51\u6D4B\u8BD5&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">Partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u968F\u673A\u9009\u62E9\u57FA\u51C6\u6570\uFF0C\u5C06\u8F83\u5C0F\u6570\u79FB\u5230\u524D\u65B9\uFF0C\u8FD4\u56DE\u57FA\u51C6\u6570\u5728\u8C03\u6574\u987A\u5E8F\u540E\u7684\u7D22\u5F15\u4F4D\u7F6E&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;Invalid Parameters&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># \u5728\u5FEB\u901F\u6392\u5E8F\u6CD5\u57FA\u7840\u4E0A\u989D\u5916\u6DFB\u52A0\u7684\u9632\u6B62\u9519\u8BEF\u51FA\u5165\u4EE3\u7801</span>
        <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
            <span class="token keyword">return</span> start

        index <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>

        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp

        small <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>
                small <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> small <span class="token operator">!=</span> index<span class="token punctuation">:</span>  <span class="token comment"># \u6B64\u65F6index\u6307\u5411\u8F83\u5C0F\u6570\uFF0Csmall\u6307\u5411\u8F83\u5927\u6570\uFF0C\u4EA4\u6362\u4E24\u8005\u7684\u4F4D\u7F6E</span>
                    temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
                    data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>small<span class="token punctuation">]</span>
                    data<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">=</span> temp
        small <span class="token operator">+=</span> <span class="token number">1</span>

        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>small<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
        data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp

        <span class="token keyword">return</span> small

    <span class="token keyword">def</span> <span class="token function">GetLeastNumbers_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tinput<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> tinput <span class="token keyword">or</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        start <span class="token operator">=</span> <span class="token number">0</span>
        end <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tinput<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>tinput<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        <span class="token keyword">while</span> index <span class="token operator">!=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># \u82E5\u57FA\u51C6\u4E3A\u4E0D\u4E3Ak\uFF0C\u5927\u4E8E\u5219\u9012\u5F52\u5176\u524D\u65B9\u7684\u4F4D\u7F6E\uFF0C\u5C0F\u4E8E\u5219\u9012\u5F52\u540E\u65B9\uFF0C\u76F4\u5230\u627E\u5230k\u6240\u5728\u7684\u4F4D\u7F6E\uFF0C\u5176\u524D\u65B9\u5747\u4E3A\u5C0F\u4E8Ek\u7684\u6570</span>
            <span class="token keyword">if</span> index <span class="token operator">&gt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                end <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span>
                index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>tinput<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                start <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
                index <span class="token operator">=</span> self<span class="token punctuation">.</span>Partition<span class="token punctuation">(</span>tinput<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        <span class="token keyword">return</span> tinput<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>
<span class="token comment">#test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>GetLeastNumbers_Solution<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u89E3\u6CD5\u4E8C\uFF1A\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(nlogK)\u7684\u7B97\u6CD5\uFF0C\u5229\u7528\u7EA2\u9ED1\u6811\u6765\u7EF4\u62A4\u6700\u5927\u503C\uFF0C\u9002\u5408\u7528\u6765\u5904\u7406\u6D77\u91CF\u6570\u636E&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">GetLeastNumbers_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tinput<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> tinput <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tinput<span class="token punctuation">)</span> <span class="token operator">&lt;</span> k <span class="token keyword">or</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> tinput<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-41-\u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570" tabindex="-1"><a class="header-anchor" href="#no-41-\u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570" aria-hidden="true">#</a> NO.41 \u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570</h2><p>\u9898\u76EE\uFF1A\u5982\u4F55\u5F97\u5230\u4E00\u4E2A\u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570\uFF1F\u5982\u679C\u4ECE\u6570\u636E\u6D41\u4E2D\u8BFB\u51FA\u5947\u6570\u4E2A\u6570\u503C\uFF0C\u90A3\u4E48\u4E2D\u4F4D\u6570\u5C31\u662F\u6240\u6709\u6570\u503C\u6392\u5E8F\u4E4B\u540E\u4F4D\u4E8E\u4E2D\u95F4\u7684\u6570\u503C\uFF0C\u82E5\u679C\u4ECE\u6570\u636E\u6D41\u4E2D\u8BFB\u51FA\u5076\u6570\u4E2A\u6570\u503C\uFF0C\u90A3\u4E48\u4E2D\u4F4D\u6570\u5C31\u662F\u6240\u6709\u6570\u503C\u6392\u5E8F\u540E\u4E2D\u95F4\u4E24\u4E2A\u6570\u7684\u5E73\u5747\u503C</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u6700\u5927\u5806\u548C\u6700\u5C0F\u5806\u6765\u5B58\u50A8\u6392\u597D\u5E8F\u540E\u7684\u4E2D\u4F4D\u6570\u5DE6\u8FB9\u548C\u53F3\u8FB9\uFF0C\u6839\u636E\u4E24\u5806\u7684\u603B\u5143\u7D20\u4E24\u5373\u53EF\u5224\u65AD\u4E2D\u4F4D\u6570\u7684\u6570\u503C&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u5BF9\u8C61\u7684\u521D\u59CB\u5316\u529F\u80FD\uFF0C\u5BFC\u5165heapq\u4F18\u5148\u961F\u5217\u5806\u6807\u51C6\u5E93\uFF0C\u5E76\u521D\u59CB\u5316\u6700\u5927\u5806\u548C\u6700\u5C0F\u5806&quot;&quot;&quot;</span>
        <span class="token keyword">import</span> heapq
        self<span class="token punctuation">.</span>hq <span class="token operator">=</span> heapq
        self<span class="token punctuation">.</span>max_hq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>min_hq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">Insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6570\u636E\u6D41\u7684\u4E2A\u6570\u662F\u5076\u6570\u4E2A\u5219\u5728\u6700\u5C0F\u5806\u4E2D\u63D2\u5165\uFF0C\u540C\u65F6\u5224\u65AD\u65B0\u8F93\u5165\u7684\u6570\u636E\u6D41\u63D2\u5165\u540E\u662F\u5426\u7B26\u5408\u6700\u5927\u5806\u7684\u6700\u5927\u5143\u7D20\u5C0F\u4E8E\u6700\u5C0F\u5806\u7684\u6700\u5C0F\u5143\u7D20\u3002
        \u7531\u4E8Eheapq\u6807\u51C6\u5E93\u4E2D\u53EA\u6709\u6700\u5C0F\u5806\uFF0C\u6240\u4EE5\u91C7\u7528\u6240\u6709\u6570\u636E\u53D6\u53CD\u5B58\u50A8\u7684\u65B9\u5F0F\u5B9E\u73B0\u6700\u5927\u5806&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> num <span class="token operator">&lt;</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>hq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">,</span> <span class="token operator">-</span>num<span class="token punctuation">)</span>
                num <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>hq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>hq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>min_hq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>hq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
                num <span class="token operator">=</span> self<span class="token punctuation">.</span>hq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>hq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">,</span> <span class="token operator">-</span>num<span class="token punctuation">)</span>
                
    <span class="token keyword">def</span> <span class="token function">GetMedian</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fuck<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5224\u65AD\u6570\u636E\u6D41\u7684\u5927\u5C0F\uFF0C\u6309\u7167\u5947\u5076\u89C4\u5219\u4ECE\u5806\u4E2D\u8FD4\u56DE\u4E2D\u4F4D\u6570,\u53E6\u5916\u7531\u4E8E\u725B\u5BA2\u7F51bug\uFF0C\u6B64\u51FD\u6570\u5FC5\u987B\u989D\u5916\u589E\u52A0\u4E00\u4E2A\u53C2\u6570\uFF0C\u9042\u7528fuck\u4EE3\u66FF&quot;&quot;&quot;</span>
        size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_hq<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">)</span>
        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;No number are available!&quot;</span><span class="token punctuation">)</span>
        median <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            median <span class="token operator">=</span> self<span class="token punctuation">.</span>min_hq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            median <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_hq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>max_hq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        <span class="token keyword">return</span> median
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-42-\u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C" tabindex="-1"><a class="header-anchor" href="#no-42-\u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C" aria-hidden="true">#</a> NO.42 \u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u6574\u5F62\u6570\u7EC4\uFF0C\u6570\u7EC4\u4E2D\u6709\u6B63\u6570\u4E5F\u6709\u8D1F\u6570\u3002\u6570\u7EC4\u4E2D\u7684\u4E00\u4E2A\u6216\u8FDE\u7EED\u591A\u4E2A\u6574\u6570\u7EC4\u6210\u4E00\u4E2A\u5B50\u6570\u7EC4\u3002\u6C42\u6240\u6709\u5B50\u6570\u7EC4\u7684\u548C\u7684\u6700\u5927\u503C\u3002\u8981\u6C42\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A <ul><li>\u601D\u8DEF1\uFF1A\u4F7F\u7528sum\u53D8\u91CF\u5B58\u50A8\u7D2F\u52A0\u548C\uFF0C\u5F53sum\u5C0F\u4E8E\u6216\u7B49\u4E8E0\u65F6\u518D\u7D2F\u52A0\u53EA\u80FD\u8BA9\u6570\u5B57\u66F4\u5C0F\uFF0C\u56E0\u6B64\u4E22\u5F03sum\u503C\uFF0C\u5E76\u8D4B\u4E88\u5F53\u524D\u904D\u5386\u7684\u503Citem\uFF0C\u6BCF\u6B21\u904D\u5386\u5224\u65ADsum\u662F\u5426\u6BD4\u6682\u5B58\u7684max\u5927\uFF0C\u82E5\u5927\u5219\u5C06max\u66F4\u65B0\u4E3A\u6700\u65B0\u7684sum</li><li>\u601D\u8DEF2\uFF1A\u52A8\u6001\u89C4\u5212</li></ul></li><li>js\u5B9E\u73B0\u601D\u8DEF1\uFF1A</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FindGreatestSumOfSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E00\u6B21\u904D\u5386\uFF0C\u9010\u4E2A\u6BD4\u8F83\u7D2F\u52A0\u5B50\u6570\u7EC4\u4E4B\u548C\uFF0C\u82E5\u5F53\u524D\u548C\u5C0F\u4E8E\u7B49\u4E8E0\u5219\u91CD\u65B0\u9009\u62E9\u4E0B\u4E00\u503C\u4E3A\u65B0\u8D77\u70B9&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> array<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        nCurSum <span class="token operator">=</span> <span class="token number">0</span>
        nGreatSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x80000000</span> <span class="token comment"># python\u4E2D\u6570\u503C\u6EA2\u51FA\u4F1A\u81EA\u52A8\u4F7F\u7528\u5927\u6570\u8868\u793A\u6CD5\uFF0C\u56E0\u6B64\u8981\u8868\u793A\u6700\u5C0F\u6574\u578B\u6570\u5B57\u53EA\u80FD\u5728\u524D\u65B9\u52A0\u2018-\u2019\u53F7</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span>
            <span class="token keyword">if</span> nCurSum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                nCurSum <span class="token operator">=</span> i
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                nCurSum <span class="token operator">+=</span> i
            <span class="token keyword">if</span> nCurSum <span class="token operator">&gt;</span> nGreatSum<span class="token punctuation">:</span>
                nGreatSum <span class="token operator">=</span> nCurSum
        <span class="token keyword">return</span> nGreatSum
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-43-1-n-\u6574\u6570\u4E2D1\u51FA\u73B0\u7684\u6B21\u6570" tabindex="-1"><a class="header-anchor" href="#no-43-1-n-\u6574\u6570\u4E2D1\u51FA\u73B0\u7684\u6B21\u6570" aria-hidden="true">#</a> NO.43 [1,n]\u6574\u6570\u4E2D1\u51FA\u73B0\u7684\u6B21\u6570</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u6574\u6570n\uFF0C\u6C42[1,n]\u8FD9n\u4E2A\u6574\u6570\u7684\u5341\u8FDB\u5236\u8868\u793A\u4E2D1\u51FA\u73B0\u7684\u6B21\u6570\u3002\u4F8B\u5982\uFF0C\u8F93\u516512\uFF0C\u5219[1,12]\u8FD9\u4E9B\u6574\u6570\u4E2D\u5305\u542B1\u7684\u6570\u5B57\u67091\uFF0C10,11\u548C12,1\u4E00\u5171\u51FA\u73B0\u4E865\u6B21</p><ul><li>\u89E3\u9898\u601D\u8DEF\uFF1A\u6B64\u9898\u672C\u8D28\u53EF\u6309\u7167\u6392\u5217\u7EC4\u5408\u6765\u5904\u7406</li></ul><p>\u5C061~n\uFF0C\u4E2A\u3001\u5341\u3001\u767E\u3001\u5343\xB7\xB7\xB7\u7B49\u5404\u4F4D\u7F6E\u51FA\u73B01\u7684\u6B21\u6570\u76F8\u52A0\uFF0C\u5373\u4E3A\u603B\u6B21\u6570<br> \u8BBE\u5F53\u524D\u4E3Ai\u7684\u503C\u4E3Acur\uFF0C\u5219\u9AD8\u4F4D\u7EC4\u6210\u7684\u503C\u4E3Ahigh\u3001\u4F4E\u4F4D\u7EC4\u6210\u7684\u503C\u4E3Alow\uFF0C\u5F53\u524D\u4E3A\u4E58\u7387\u4E3Adigit</p><ol><li>\u5F53cur=0\uFF0C\u51FA\u73B01\u7684\u6B21\u6570\u4E3A<code>high*digit</code>\uFF0C\u4EE5n=2304\u7684\u5341\u4F4D\u4E3A\u4F8B:<br><img src="`+i+'" alt="S4O43-1.png"></li><li>\u5F53cur=1\uFF0C\u51FA\u73B01\u7684\u6B21\u6570\u4E3A<code>high*digit + low + 1</code>\uFF0C\u4EE5n=2314\u7684\u5341\u4F4D\u4E3A\u4F8B:<br><img src="'+u+'" alt="S4O43-2.png"></li><li>\u5F53cur&gt;1\u65F6\uFF0C\u51FA\u73B01\u7684\u6B21\u6570\u4E3A<code>(high + 1) * digit</code>\uFF0C\u4EE5n=2324\u7684\u5341\u4F4D\u4E3A\u4F8B:<br><img src="'+r+'" alt="S4O43-3.png"></li></ol>',199),h={href:"https://leetcode.cn/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/solution/mian-shi-ti-43-1n-zheng-shu-zhong-1-chu-xian-de-2/",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        digit<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
        high<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> low <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">,</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">while</span> high <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">or</span> cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> high <span class="token operator">*</span> digit
            <span class="token keyword">elif</span> cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> high <span class="token operator">*</span> digit <span class="token operator">+</span> low <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> digit
            low <span class="token operator">+=</span> cur <span class="token operator">*</span> digit
            cur <span class="token operator">=</span> high <span class="token operator">%</span> <span class="token number">10</span>
            high <span class="token operator">//=</span> <span class="token number">10</span>
            digit <span class="token operator">*=</span> <span class="token number">10</span>
        <span class="token keyword">return</span> res
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-44-\u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-44-\u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57" aria-hidden="true">#</a> NO.44 \u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57</h2><p>\u9898\u76EE\uFF1A\u6570\u5B57\u4EE50123456789101112131415...\u7684\u683C\u5F0F\u5E8F\u5217\u5316\u5230\u4E00\u4E2A\u5B57\u7B26\u5E8F\u5217\u4E2D\u3002\u5728\u8FD9\u4E2A\u5E8F\u5217\u4E2D\uFF0C\u7B2C5\u4F4D(\u4ECE0\u5F00\u59CB\u8BA1\u6570)\u662F5\uFF0C\u7B2C13\u4F4D\u662F1\uFF0C\u7B2C19\u4E3A\u662F4\uFF0C\u7B49\u7B49\u3002\u8BF7\u5199\u4E00\u4E2A\u51FD\u6570\uFF0C\u6C42\u4EFB\u610F\u7B2Cn\u4F4D\u5BF9\u5E94\u7684\u6570\u5B57</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">beginNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> digits <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> digits <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">digitsAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        number <span class="token operator">=</span> self<span class="token punctuation">.</span>beginNumber<span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token operator">+</span> index <span class="token operator">/</span> digits
        indexFromRight <span class="token operator">=</span> digits <span class="token operator">-</span> index <span class="token operator">%</span> digits
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>indexFromRight<span class="token punctuation">)</span><span class="token punctuation">:</span>
            number <span class="token operator">/=</span> <span class="token number">10</span>
        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">countOfIntegers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> digits <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">10</span>
        count <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> digits <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">9</span><span class="token operator">*</span>count
    <span class="token keyword">def</span> <span class="token function">digitsAtIndex_main</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        digits <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            number <span class="token operator">=</span> self<span class="token punctuation">.</span>countOfIntegers<span class="token punctuation">(</span>digits<span class="token punctuation">)</span>
            <span class="token keyword">if</span> index <span class="token operator">&lt;</span> number <span class="token operator">*</span> digits<span class="token punctuation">:</span>
                <span class="token keyword">return</span> self<span class="token punctuation">.</span>digitsAtIndex<span class="token punctuation">(</span>index<span class="token punctuation">,</span> digits<span class="token punctuation">)</span>
            index <span class="token operator">-=</span> digits <span class="token operator">*</span> number
            digits <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>digitsAtIndex_main<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-45-\u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570" tabindex="-1"><a class="header-anchor" href="#no-45-\u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570" aria-hidden="true">#</a> NO.45 \u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u6B63\u6574\u6570\u6570\u7EC4\uFF0C\u628A\u6570\u7EC4\u91CC\u6240\u6709\u6570\u5B57\u62FC\u63A5\u8D77\u6765\u6392\u6210\u4E00\u4E2A\u6570\uFF0C\u6253\u5370\u80FD\u62FC\u63A5\u51FA\u7684\u6240\u6709\u6570\u7EC4\u4E2D\u6700\u5C0F\u7684\u4E00\u4E2A\u3002\u4F8B\u5982\uFF0C\u8F93\u5165\u6570\u7EC4{3,32,321}\uFF0C\u5219\u6253\u5370\u51FA\u8FD9\u4E09\u4E2A\u6570\u5B57\u80FD\u6392\u6210\u7684\u6700\u5C0F\u6570\u5B57321323</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5B9A\u4E49\u4E00\u79CD\u65B0\u7684\u6BD4\u8F83\u5927\u5C0F\u6570\u5B57\u5927\u5C0F\u7684\u65B9\u6CD5\uFF0C\u4F7F\u7528\u8BE5\u65B9\u6CD5\u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\uFF0C\u540C\u65F6\u8003\u8651\u5927\u6570\u95EE\u9898&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">PrintMinNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        strNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> numbers<span class="token punctuation">]</span>

        <span class="token keyword">def</span> <span class="token function">compare</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token triple-quoted-string string">&quot;&quot;&quot;\u65B0\u7684\u6BD4\u8F83\u65B9\u6CD5\uFF0C\u5C1D\u8BD5\u62FC\u63A5\u4E24\u5B57\u7B26\u4E32\u7136\u540E\u6BD4\u8F83\u5927\u5C0F&quot;&quot;&quot;</span>
            <span class="token keyword">if</span> str1<span class="token operator">+</span>str2 <span class="token operator">&gt;</span> str2<span class="token operator">+</span>str1<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> str1 <span class="token operator">+</span> str2 <span class="token operator">&lt;</span> str2 <span class="token operator">+</span> str1<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token comment"># python3\u4E2D\u53D6\u6D88\u4E86cmp\u53C2\u6570\uFF0C\u4F46\u725B\u5BA2\u7F51\u4E2D\u4F7F\u7528\u7684\u662Fpython2.7\u6545\u80FD\u901A\u8FC7\u6D4B\u8BD5\u4EE3\u7801\uFF0Cpython3\u4E2D\u7684\u89E3\u51B3\u4EE3\u7801\u5982\u4E0B;</span>
<span class="token comment">#         import functools</span>
<span class="token comment">#         strNumber = sorted(strNumber, key=functools.cmp_to_key(compare))</span>
        strNumber <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>strNumber<span class="token punctuation">,</span> <span class="token builtin">cmp</span><span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>compare<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>strNumber<span class="token punctuation">)</span>
<span class="token comment"># test code </span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-46-\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#no-46-\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32" aria-hidden="true">#</a> NO.46 \u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32</h2><p>\u9898\u76EE\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u6570\u5B57\uFF0C\u6211\u4EEC\u6309\u7167\u5982\u4E0B\u89C4\u5219\u628A\u5B83\u7FFB\u8BD1\u4E3A\u5B57\u7B26\u4E32\uFF1A0\u7FFB\u8BD1\u6210&#39;a&#39;\uFF0C1\u7FFB\u8BD1\u4E3A&#39;b&#39;\uFF0C....\uFF0C11\u7FFB\u8BD1\u4E3A&#39;l&#39;\uFF0C...\uFF0C25\u7FFB\u8BD1\u4E3A&#39;z&#39;\u3002\u4E00\u4E2A\u6570\u5B57\u53EF\u80FD\u6709\u591A\u4E2A\u7FFB\u8BD1\u3002\u4F8B\u5982\uFF0C12258\u67095\u4E2D\u4E0D\u540C\u7684\u7FFB\u8BD1\uFF0C\u5206\u522B\u662F&#39;bccfi&#39;,&#39;bwfi&#39;,&#39;bczi&#39;,&#39;mcfi&#39;,&#39;mzi&#39;\u3002\u8BF7\u7F16\u7A0B\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u7528\u6765\u8BA1\u7B97\u4E00\u4E2A\u6570\u5B57\u6709\u591A\u5C11\u79CD\u4E0D\u540C\u7684\u7FFB\u8BD1\u65B9\u6CD5\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4ECE\u53F3\u5411\u5DE6\u7684\u4F9D\u6B21\u8BA1\u7B97\u53EF\u7EC4\u5408\u7FFB\u8BD1\u7684\u79CD\u7C7B\uFF0C\u907F\u514D\u91CD\u590D\u8BA1\u7B97\u4E86\u62C6\u5206\u7684\u5C0F\u95EE\u9898&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">GetTranslationCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        strNumber <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strNumber<span class="token punctuation">)</span>
        counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> length
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            count <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># \u907F\u514Dcounts\u5728\u672A\u521D\u59CB\u5316\u65F6\u5BF9count\u8FDB\u884C\u4E86\u8D4B\u503C</span>
                count <span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># count\u521D\u59CB\u503C\u603B\u662F\u524D\u9762\u53EF\u7EC4\u5408\u7684\u6B21\u6570\uFF0C\u5728\u6B64\u57FA\u7840\u4E0A\u8FDB\u884C\u7D2F\u79EF</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                count <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                digit1 <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>strNumber<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
                digit2 <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>strNumber<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
                converted <span class="token operator">=</span> digit1 <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit2
                <span class="token keyword">if</span> converted <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token keyword">and</span> converted <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">:</span> <span class="token comment"># \u53EF\u5408\u5E76\u7FFB\u8BD1\u7684\u60C5\u51B5</span>
                    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>
                        count <span class="token operator">+=</span> counts<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        count <span class="token operator">+=</span> <span class="token number">1</span>
            counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count
        <span class="token keyword">return</span> count
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token number">12258</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>GetTranslationCount<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-47-\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C" tabindex="-1"><a class="header-anchor" href="#no-47-\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C" aria-hidden="true">#</a> NO.47 \u793C\u7269\u7684\u6700\u5927\u4EF7\u503C</h2><p>\u9898\u76EE:\u5728\u4E00\u4E2Am*n\u7684\u68CB\u76D8\u7684\u6BCF\u4E00\u683C\u90FD\u653E\u6709\u4E00\u4E2A\u793C\u7269\uFF0C\u6BCF\u4E2A\u793C\u7269\u90FD\u6709\u4E00\u5B9A\u7684\u4EF7\u503C(\u4EF7\u503C\u5927\u4E8E0).\u4F60\u53EF\u4EE5\u4ECE\u68CB\u76D8\u7684\u5DE6\u4E0A\u89D2\u5F00\u59CB\u62FF\u683C\u5B50\u91CC\u7684\u793C\u7269\uFF0C\u5E76\u6BCF\u6B21\u5411\u53F3\u6216\u8005\u5411\u4E0B\u79FB\u52A8\u4E00\u683C\uFF0C\u76F4\u5230\u8FBE\u5230\u68CB\u76D8\u7684\u53F3\u4E0B\u89D2\u3002\u7ED9\u5B9A\u4E00\u4E2A\u68CB\u76D8\u53CA\u5176\u4E0A\u9762\u7684\u793C\u7269\uFF0C\u8BF7\u8BA1\u7B97\u4F60\u6700\u591A\u80FD\u62FF\u5230\u591A\u5C11\u4EF7\u503C\u7684\u793C\u7269\uFF1F</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getMaxValue_solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u89E3\u51B3\u65B9\u6848\u4E00\uFF0C\u4F7F\u7528\u8F85\u52A9\u7684\u4E8C\u7EF4\u77E9\u9635\u8BB0\u5F55\u8DEF\u5F84\u4E0A\u80FD\u5F97\u5230\u7684\u6700\u5927\u4EF7\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> values<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        rows <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
        clos <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        maxValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> clos <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> <span class="token number">0</span>
                up <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    up <span class="token operator">=</span> maxValue<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token keyword">if</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    left <span class="token operator">=</span> maxValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                maxValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> up<span class="token punctuation">)</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        maxValue <span class="token operator">=</span> maxValue<span class="token punctuation">[</span>rows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>clos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> maxValue
    <span class="token keyword">def</span> <span class="token function">getMaxValue_solution2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F18\u5316\u65B9\u6848\uFF0C\u4F7F\u7528\u4E00\u7EF4\u6570\u7EC4\u8BB0\u5F55\u8DEF\u5F84\u4E0A\u80FD\u5F97\u5230\u7684\u6700\u5927\u4EF7\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> values<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        rows <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
        clos <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        maxValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> clos
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> <span class="token number">0</span>
                up <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>
                    up <span class="token operator">=</span> maxValues<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token keyword">if</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    left <span class="token operator">=</span> maxValues<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                maxValues<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> left<span class="token punctuation">)</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        maxValues <span class="token operator">=</span> maxValues<span class="token punctuation">[</span>clos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> maxValues
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>getMaxValue_solution2<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-48-\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#no-48-\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B57\u7B26\u4E32" aria-hidden="true">#</a> NO.48 \u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B57\u7B26\u4E32</h2><p>\u9898\u76EE\uFF1A\u8BF7\u4ECE\u5B57\u7B26\u4E32\u4E2D\u627E\u51FA\u4E00\u4E2A\u6700\u957F\u7684\u4E0D\u5305\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32\uFF0C\u8BA1\u7B97\u8BE5\u6700\u957F\u5B50\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\u3002\u5047\u8BBE\u5B57\u7B26\u4E32\u4E2D\u53EA\u5305\u542B&#39;a&#39;-&#39;z&#39;\u7684\u5B57\u7B26\u3002\u4F8B\u5982\uFF0C\u5728\u5B57\u7B26\u4E32&quot;arabcacfr&quot;\u4E2D\uFF0C\u6700\u957F\u7684\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32\u662F&quot;acfr&quot;\uFF0C\u957F\u5EA6\u4E3A4.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">longestSubstringWithoutDuplication</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;position\u7528\u6765\u5B58\u50A8\u4E0A\u4E00\u6B21\u5BF9\u5E94\u4F4D\u7F6E\u5B57\u7B26\u51FA\u73B0\u7684\u7D22\u5F15\u503C&quot;&quot;&quot;</span>
        curLength <span class="token operator">=</span> <span class="token number">0</span>
        maxLength <span class="token operator">=</span> <span class="token number">0</span>
        position <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">26</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            prevIndex <span class="token operator">=</span> position<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> prevIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">-</span> prevIndex <span class="token operator">&gt;</span> curLength<span class="token punctuation">:</span> <span class="token comment"># \u8BA1\u7B97\u8DDD\u79BBd\u662F\u5426\u5927\u4E8E\u5F53\u524D\u957F\u5EA6</span>
                curLength <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> curLength <span class="token operator">&gt;</span> maxLength<span class="token punctuation">:</span>
                    maxLength <span class="token operator">=</span> curLength
                curLength <span class="token operator">=</span> i <span class="token operator">-</span> prevIndex
            position<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token keyword">if</span> curLength <span class="token operator">&gt;</span> maxLength<span class="token punctuation">:</span>
            maxLength <span class="token operator">=</span> curLength
        <span class="token keyword">return</span> maxLength
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token string">&#39;arabcacfr&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>longestSubstringWithoutDuplication<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-49-\u4E11\u6570" tabindex="-1"><a class="header-anchor" href="#no-49-\u4E11\u6570" aria-hidden="true">#</a> NO.49 \u4E11\u6570</h2><p>\u9898\u76EE\uFF1A\u6211\u4EEC\u628A\u53EA\u5305\u542B\u56E0\u5B502,3,5\u7684\u6570\u6210\u4E3A\u4E11\u6570\uFF0C\u6C42\u4ECE\u5C0F\u5230\u5927\u7684\u987A\u5E8F\u7684\u7B2C1500\u4E2A\u4E11\u6570\u3002\u4F8B\u5982\uFF0C6,8\u90FD\u662F\u4E11\u6570\uFF0C\u4F4614\u4E0D\u662F\uFF0C\u56E0\u4E3A\u5B83\u5305\u542B\u56E0\u5B507.\u4E60\u60EF\u4E0A\u6211\u4EEC\u628A1\u5F53\u505A\u7B2C\u4E00\u4E2A\u4E11\u6570\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetUglyNumber_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u4E11\u6570\u4EA7\u751F\u4E11\u6570\uFF0C\u76F8\u6BD4\u4E8E\u76F4\u63A5\u5224\u65AD\u6BCF\u4E00\u4E2A\u6574\u6570\u7684\u65B9\u6CD5\u8BA1\u7B97\u901F\u5EA6\u8981\u5FEB\uFF0C\u4F46\u540C\u65F6\u5C06\u4F7F\u7528O(n)\u590D\u6742\u5EA6\u7684\u5B58\u50A8\u7A7A\u95F4&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        pUglyNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> index
        pUglyNumbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        nextUglyIndex <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token comment"># pMultiply&#39;s Index in pUglyNumbers \u8BB0\u5F55\u7B2C\u4E00\u4E2A\u4E58\u4EE5\u56E0\u5B50\u6BD4\u5F53\u524D\u6700\u5927\u4E11\u6570\u5927\u7684\u57FA\u4E11\u6570\u7684\u7D22\u5F15\u4F4D\u7F6E</span>
        pMultiply2 <span class="token operator">=</span> <span class="token number">0</span>
        pMultiply3 <span class="token operator">=</span> <span class="token number">0</span>
        pMultiply5 <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> nextUglyIndex <span class="token operator">&lt;</span> index<span class="token punctuation">:</span>
            minNumber <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pUglyNumbers<span class="token punctuation">[</span>pMultiply2<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> pUglyNumbers<span class="token punctuation">[</span>pMultiply3<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> 
                             pUglyNumbers<span class="token punctuation">[</span>pMultiply5<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            pUglyNumbers<span class="token punctuation">[</span>nextUglyIndex<span class="token punctuation">]</span> <span class="token operator">=</span> minNumber
            <span class="token comment"># update T2,T3,T5</span>
            <span class="token keyword">while</span> pUglyNumbers<span class="token punctuation">[</span>pMultiply2<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> pUglyNumbers<span class="token punctuation">[</span>nextUglyIndex<span class="token punctuation">]</span><span class="token punctuation">:</span>
                pMultiply2 <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> pUglyNumbers<span class="token punctuation">[</span>pMultiply3<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> pUglyNumbers<span class="token punctuation">[</span>nextUglyIndex<span class="token punctuation">]</span><span class="token punctuation">:</span>
                pMultiply3 <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> pUglyNumbers<span class="token punctuation">[</span>pMultiply5<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> pUglyNumbers<span class="token punctuation">[</span>nextUglyIndex<span class="token punctuation">]</span><span class="token punctuation">:</span>
                pMultiply5 <span class="token operator">+=</span> <span class="token number">1</span>
            nextUglyIndex <span class="token operator">+=</span> <span class="token number">1</span>
        ugly <span class="token operator">=</span> pUglyNumbers<span class="token punctuation">[</span>nextUglyIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> ugly
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26" tabindex="-1"><a class="header-anchor" href="#no-50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26" aria-hidden="true">#</a> NO.50 \u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26</h2><ul><li>\u9898\u76EE\u4E00\uFF1A\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u3002<br> \u5982\u8F93\u5165&quot;abaccdeff&quot;\u5219\u8F93\u51FA&#39;b&#39;</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FirstNotRepeatingChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u957F\u5EA6\u4E3A256\u7684\u5217\u8868\u8868\u793AASCII\u7801\uFF0C\u5217\u8868\u4E2D\u7684\u503C\u8868\u793A\u5BF9\u5E94\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570\uFF0C\u6A21\u62DF\u54C8\u5E0C\u8868\uFF0C\u7EDF\u8BA1\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570\uFF0C
        \u518D\u4F9D\u7167\u5B57\u7B26\u51FA\u73B0\u7684\u987A\u5E8F\u68C0\u67E5\u54C8\u5E0C\u8868\uFF0C\u627E\u51FA\u7B2C\u4E00\u6B21\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        tableSize <span class="token operator">=</span> <span class="token number">256</span>
        hashTable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> tableSize
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hashTable<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> hashTable<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token string">&#39;abaccdeff&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>FirstNotRepeatingChar<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u725B\u5BA2\u7F51\u5BF9\u5E94\u4EE3\u7801</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;\u5728\u4E00\u4E2A\u5B57\u7B26\u4E32(0&lt;=\u5B57\u7B26\u4E32\u957F\u5EA6&lt;=10000\uFF0C\u5168\u90E8\u7531\u5B57\u6BCD\u7EC4\u6210)\u4E2D\u627E\u5230\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26,\u5E76\u8FD4\u56DE\u5B83\u7684\u4F4D\u7F6E, 
\u5982\u679C\u6CA1\u6709\u5219\u8FD4\u56DE -1\uFF08\u9700\u8981\u533A\u5206\u5927\u5C0F\u5199\uFF09&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FirstNotRepeatingChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u957F\u5EA6\u4E3A256\u7684\u5217\u8868\u8868\u793AASCII\u7801\uFF0C\u5217\u8868\u4E2D\u7684\u503C\u8868\u793A\u5BF9\u5E94\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570\uFF0C\u6A21\u62DF\u54C8\u5E0C\u8868\uFF0C\u7EDF\u8BA1\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570\uFF0C
        \u518D\u4F9D\u7167\u5B57\u7B26\u51FA\u73B0\u7684\u987A\u5E8F\u68C0\u67E5\u54C8\u5E0C\u8868\uFF0C\u627E\u51FA\u7B2C\u4E00\u6B21\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\uFF0C\u5E76\u5728\u7B2C\u4E00\u9898\u7684\u57FA\u7840\u4E0A\u8FD4\u56DE\u5B57\u7B26\u6539\u4E3A\u8303\u56F4\u8BE5\u7D22\u5F15\uFF0C
        \u5E76\u5C06\u8FD4\u56DE\u7A7A\u5B57\u7B26\u7684\u4EE3\u7801\u6539\u4E3A\u8FD4\u56DE-1&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        tableSize <span class="token operator">=</span> <span class="token number">256</span>
        hashTable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> tableSize
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hashTable<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> hashTable<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> i
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u6D4B\u8BD5\u901A\u8FC7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u5B57\u7B26\u6D41\u4E2D\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26<br> \u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u7528\u6765\u627E\u51FA\u5B57\u7B26\u6D41\u4E2D\u7684\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u3002\u4F8B\u5982\uFF0C\u5F53\u4ECE\u5B57\u7B26\u6D41\u4E2D\u53EA\u8BFB\u51FA\u4E24\u4E2A\u5B57\u7B26&quot;go&quot;\u65F6\uFF0C\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u662F&quot;g&quot;\uFF1B\u5F53\u4ECE\u8BE5\u5B57\u7B26\u6D41\u4E2D\u8BFB\u51FA\u524D6\u4E2A\u5B57\u7B26&quot;google&quot;\u65F6\uFF0C\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u662F&quot;I&quot;\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521D\u59CB\u5316\u54C8\u5E0C\u8868\u548C\u7D22\u5F15,\u5176\u4E2D
        occurrence[i] = -1 \u8868\u793A\u5143\u7D20\u5C1A\u672A\u627E\u5230
        occurrence[i] = -2 \u8868\u793A\u5143\u7D20\u88AB\u627E\u5230\u591A\u6B21
        occurrence[i] &gt;= 0 \u8868\u793A\u5143\u7D20\u4EC5\u88AB\u627E\u5230\u4E00\u6B21&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>occurrence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">256</span>
        self<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">def</span> <span class="token function">Insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>index
        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
        self<span class="token punctuation">.</span>index <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">FirstAppearingOnce</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u82E5\u5143\u7D20\u4E0D\u5B58\u5728\uFF0C\u6216\u672A\u88AB\u627E\u5230\u5219\u8F93\u51FA#&quot;&quot;&quot;</span>
        ch <span class="token operator">=</span> <span class="token string">&#39;#&#39;</span>
        minIndex <span class="token operator">=</span> <span class="token number">0xffffffff</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minIndex<span class="token punctuation">:</span>
                ch <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                minIndex <span class="token operator">=</span> self<span class="token punctuation">.</span>occurrence<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">return</span> ch
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token string">&#39;abaccdebff&#39;</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>Insert<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>FirstAppearingOnce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u5B58\u50A8\u6570\u636E\u7248\u4EE3\u7801\uFF0C\u4E0A\u8FF0\u7B97\u6CD5\u5E76\u672A\u5728\u63D2\u5165\u65F6\u5B58\u50A8\u6709\u6548\u7684\u63D2\u5165\u6570\u636E\uFF0C\u6B64\u7248\u672C\u5229\u7528\u5B58\u50A8\u7684\u6570\u636E\u5BF9\u5B57\u7B26\u8FDB\u884C\u7D22\u5F15</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u521D\u59CB\u5316\u6570\u636E\u5B58\u50A8\u5217\u8868\uFF0C\u6563\u5217\u8868\uFF0C\u548C\u7D22\u5F15\u503C&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>countNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">256</span>
        self<span class="token punctuation">.</span>once <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">def</span> <span class="token function">FirstAppearingOnce</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u59CB\u7EC8\u6307\u5411\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u7684\u7D22\u5F15\u503C\u8FD4\u56DE\u5BF9\u5E94\u5B57\u7B26&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>once<span class="token punctuation">]</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>once <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&#39;#&#39;</span>
    <span class="token keyword">def</span> <span class="token function">Insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5B58\u50A8\u63D2\u5165\u7684\u5B57\u7B26\u5E76\u66F4\u65B0\u6563\u5217\u8868\u4E2D\u7684\u6B21\u6570\uFF0C\u68C0\u67E5\u7D22\u5F15\u503C\u662F\u5426\u59CB\u7EC8\u6307\u5411\u7B2C\u4E00\u6B21\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\uFF0C\u82E5\u6B64\u5B57\u7B26\u4E0D\u5B58\u5728\uFF0C\u5219\u7D22\u5F15\u503C\u6307\u5411\u754C\u5916&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>char<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>countNumber<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>once <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>countNumber<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>once<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>once <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-51-\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9" tabindex="-1"><a class="header-anchor" href="#no-51-\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9" aria-hidden="true">#</a> NO.51 \u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9</h2><p>\u9898\u76EE\uFF1A\u5728\u6570\u7EC4\u4E2D\u6709\u4E24\u4E2A\u6570\u5B57\uFF0C\u5982\u679C\u524D\u9762\u4E00\u4E2A\u6570\u5B57\u5927\u4E8E\u540E\u9762\u7684\u6570\u5B57\uFF0C\u5219\u4E24\u4E2A\u6570\u5B57\u7EC4\u6210\u4E00\u4E2A\u9006\u5E8F\u5BF9\u3002\u8F93\u5165\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6C42\u51FA\u8FD9\u4E2A\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9\u7684\u603B\u6570\u3002\u4F8B\u5982\u5728\u6570\u7EC4{7,5,6,4}\u4E2D\uFF0C\u4E00\u5171\u5B58\u57285\u4E2A\u9006\u5E8F\u5BF9\uFF0C\u5206\u522B\u662F(7,6),(7,5),(7,4),(6,4),(5,4).</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">InverseParisCroe</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u5F52\u5E76\u6392\u5E8F\u539F\u7406\uFF0C\u9012\u5F52\u7684\u5C06\u6570\u7EC4\u8FDB\u884C\u62C6\u5206\uFF0C\u5728\u62C6\u5206\u7684\u5185\u90E8\u8FDB\u884C\u6BD4\u8F83\u8BA1\u7B97\u9006\u5E8F\u5BF9\u6570\uFF0C\u518D\u6BD4\u8F83\u5206\u7EC4\u4E4B\u95F4\u7684\u5927\u5C0F\u548C\u9006\u5E8F\u5BF9\u6570\u5408\u5E76\u5206\u7EC4&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
            copy<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        length <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        left <span class="token operator">=</span> self<span class="token punctuation">.</span>InverseParisCroe<span class="token punctuation">(</span>copy<span class="token punctuation">,</span>data<span class="token punctuation">,</span>start<span class="token punctuation">,</span>start <span class="token operator">+</span> length<span class="token punctuation">)</span>
        right <span class="token operator">=</span> self<span class="token punctuation">.</span>InverseParisCroe<span class="token punctuation">(</span>copy<span class="token punctuation">,</span>data<span class="token punctuation">,</span> start <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        i <span class="token operator">=</span> start <span class="token operator">+</span> length
        j <span class="token operator">=</span> end
        indexCopy <span class="token operator">=</span> end
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> start <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> start <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                copy<span class="token punctuation">[</span>indexCopy<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                indexCopy <span class="token operator">-=</span> <span class="token number">1</span>
                i <span class="token operator">-=</span> <span class="token number">1</span>
                count <span class="token operator">+=</span> j <span class="token operator">-</span> start <span class="token operator">-</span> length
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                copy<span class="token punctuation">[</span>indexCopy<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                indexCopy <span class="token operator">-=</span> <span class="token number">1</span>
                j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> start<span class="token punctuation">:</span>
            copy<span class="token punctuation">[</span>indexCopy<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            indexCopy <span class="token operator">-=</span> <span class="token number">1</span>
            i <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> start <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
            copy<span class="token punctuation">[</span>indexCopy<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            indexCopy <span class="token operator">-=</span> <span class="token number">1</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> left <span class="token operator">+</span> right <span class="token operator">+</span> count
    <span class="token keyword">def</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        copy <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        count <span class="token operator">=</span> self<span class="token punctuation">.</span>InverseParisCroe<span class="token punctuation">(</span>data<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> count
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>InversePairs<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u7531\u4E8E\u725B\u5BA2\u7F51\u7684\u539F\u56E0\uFF0C\u4E0A\u4E2Acell\u4E2D\u7684\u5F52\u5E76\u6392\u5E8F\u4EE3\u7801\u5728\u7B97\u6CD5\u590D\u6742\u5EA6\u4E0A\u65E0\u6CD5\u901A\u8FC7\u6D4B\u8BD5\uFF0C\u4F46\u540C\u6837\u4F7F\u7528\u5F52\u5E76\u6392\u5E8F\u7684\u4EE5\u4E0B\u7B97\u6CD5\u53EF\u4EE5
    \u4E00\u4E0B\u7B97\u6CD5\u548C\u4E0A\u8FF0\u5F52\u5E76\u6392\u5E8F\u539F\u7406\u7684\u7B97\u6CD5\u7684\u533A\u522B\u5728\u4E8E\uFF0C\u8BE5\u7B97\u6CD5\u5728\u6570\u7EC4\u4E0A\u4ECE\u5DE6\u5230\u53F3\u7684\u8FDB\u884C\u6BD4\u8F83\u548C\u7EDF\u8BA1\u9006\u5E8F\u5BF9\u6570&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span>

    <span class="token keyword">def</span> <span class="token function">sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token number">0</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                temp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                <span class="token keyword">return</span> <span class="token number">1</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        res <span class="token operator">=</span> self<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
        <span class="token comment"># \u5408\u5E76</span>
        i <span class="token operator">=</span> left
        j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        index <span class="token operator">=</span> left

        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token keyword">and</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                res <span class="token operator">+=</span> mid <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>
                j <span class="token operator">+=</span> <span class="token number">1</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>
            temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res
<span class="token comment"># test code</span>
<span class="token comment"># \u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-52-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#no-52-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9" aria-hidden="true">#</a> NO.52 \u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E24\u4E2A\u94FE\u8868\uFF0C\u627E\u51FA\u5B83\u4EEC\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u7531\u4E8E\u662F\u5355\u5411\u94FE\u8868\uFF0C\u516C\u5171\u8282\u70B9\u53CA\u5176\u540E\u7684\u8282\u70B9\u4E00\u5B9A\u90FD\u76F8\u540C\uFF0C\u4E0D\u4F1A\u51FA\u73B0\u5206\u53C9\u3002\u57FA\u4E8E\u6B64\u7B97\u6CD5\u5148\u6C42\u51FA\u4E24\u94FE\u8868\u7684\u957F\u5EA6\uFF0C\u8BA9\u8F83\u957F\u7684\u94FE\u8868\u5148\u904D\u5386\u591A\u51FA\u7684\u8282\u70B9\uFF0C
    \u7136\u540E\u4E24\u94FE\u8868\u518D\u4E00\u8D77\u904D\u5386\uFF0C\u901A\u8FC7\u6BD4\u8F83\u627E\u51FA\u516C\u5171\u8282\u70B9\uFF0C\u82E5\u65E0\u516C\u5171\u8282\u70B9\u8FD4\u56DENone&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">GetListLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>phaed<span class="token punctuation">)</span><span class="token punctuation">:</span>
        nLength <span class="token operator">=</span> <span class="token number">0</span>
        pNode <span class="token operator">=</span> phaed
        <span class="token keyword">while</span> pNode <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            nLength <span class="token operator">+=</span> <span class="token number">1</span>
            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> nLength
    <span class="token keyword">def</span> <span class="token function">FindFirstCommonNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pHead1<span class="token punctuation">,</span> pHead2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        nLength1 <span class="token operator">=</span> self<span class="token punctuation">.</span>GetListLength<span class="token punctuation">(</span>pHead1<span class="token punctuation">)</span>
        nLength2 <span class="token operator">=</span> self<span class="token punctuation">.</span>GetListLength<span class="token punctuation">(</span>pHead2<span class="token punctuation">)</span>
        nLengthDif <span class="token operator">=</span> nLength1 <span class="token operator">-</span> nLength2
        
        pListHeadLong <span class="token operator">=</span> pHead1
        pListHeadShort <span class="token operator">=</span> pHead2
        
        <span class="token keyword">if</span> nLength2 <span class="token operator">&gt;</span> nLength1<span class="token punctuation">:</span>
            pListHeadLong <span class="token operator">=</span> pHead2
            pListHeadShort <span class="token operator">=</span> pHead1
            nLengthDif <span class="token operator">=</span> nLength2 <span class="token operator">-</span> nLength1
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nLengthDif<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pListHeadLong <span class="token operator">=</span> pListHeadLong<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> pListHeadLong <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pListHeadShort <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pListHeadLong <span class="token operator">!=</span> pListHeadShort<span class="token punctuation">:</span>
            pListHeadLong <span class="token operator">=</span> pListHeadLong<span class="token punctuation">.</span><span class="token builtin">next</span>
            pListHeadShort <span class="token operator">=</span> pListHeadShort<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> pListHeadLong
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-53-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-53-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57" aria-hidden="true">#</a> NO.53 \u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57</h2><ul><li>\u9898\u76EE\u4E00\uFF1A\u6570\u5B57\u5728\u6392\u5E8F\u6570\u5B57\u4E2D\u51FA\u73B0\u7684\u6B21\u6570<br> \u7EDF\u8BA1\u4E00\u4E2A\u6570\u5B57\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570\u3002\u4F8B\u5982\uFF0C\u8F93\u5165\u6392\u5E8F\u6570\u7EC4{1,2,3,3,3,3,4,5}\u548C\u6570\u5B573\uFF0C\u7531\u4E8E3\u5728\u8FD9\u4E2A\u6570\u7EC4\u4E2D\u51FA\u73B0\u4E864\u6B21\uFF0C\u56E0\u6B64\u8F93\u51FA4</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetFirstK</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u4E8C\u5206\u67E5\u627E\u6CD5\u539F\u7406\u67E5\u627E\u7B2C\u4E00\u4E2Ak\u51FA\u73B0\u7684\u4F4D\u7F6E\uFF0C\u4E8C\u5206\u6CD5\u627E\u5230k\u4E4B\u540E\u518D\u5C1D\u8BD5\u5224\u65AD\u524D\u4E00\u4F4D\u6570\u503C\uFF0C\u7528\u4E0E\u5224\u65AD\u5F53\u524D\u627E\u5230\u7684k\u662F\u5426\u662F\u7B2C\u4E00\u4E2Ak&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> start <span class="token operator">&gt;</span> end<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        middleIndex <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        middleData <span class="token operator">=</span> data<span class="token punctuation">[</span>middleIndex<span class="token punctuation">]</span>
        <span class="token keyword">if</span> middleData <span class="token operator">==</span> k<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>middleIndex <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> data<span class="token punctuation">[</span>middleIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token keyword">or</span> middleIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> middleIndex
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                end <span class="token operator">=</span> middleIndex <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> middleData <span class="token operator">&gt;</span> k<span class="token punctuation">:</span>
            end <span class="token operator">=</span> middleIndex <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            start <span class="token operator">=</span> middleIndex <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>GetFirstK<span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">GetLastK</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u4E8C\u5206\u67E5\u627E\u6CD5\u539F\u7406\u67E5\u627E\u6700\u540E\u4E00\u4E2Ak\u51FA\u73B0\u7684\u4F4D\u7F6E\uFF0C\u4E8C\u5206\u6CD5\u627E\u5230k\u4E4B\u540E\u518D\u5C1D\u8BD5\u5224\u65AD\u540E\u4E00\u4F4D\u6570\u503C\uFF0C\u7528\u4E0E\u5224\u65AD\u5F53\u524D\u627E\u5230\u7684k\u662F\u5426\u662F\u6700\u540E\u4E00\u4E2Ak&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> start <span class="token operator">&gt;</span> end<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        middleIndex <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        middleData <span class="token operator">=</span> data<span class="token punctuation">[</span>middleIndex<span class="token punctuation">]</span>
        <span class="token keyword">if</span> middleData <span class="token operator">==</span> k<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>middleIndex <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> data<span class="token punctuation">[</span>middleIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token keyword">or</span> middleIndex <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> middleIndex
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                start <span class="token operator">=</span> middleIndex <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> middleData <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>
            start <span class="token operator">=</span> middleIndex <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> middleIndex <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>GetLastK<span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">GetNumberOfK</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E3B\u51FD\u6570\uFF0C\u8C03\u7528\u4E8C\u5206\u6CD5\u539F\u7406\u7684\u5B50\u51FD\u6570\uFF0C\u627E\u5230\u7B2C\u4E00\u4E2Ak\u548C\u6700\u540E\u4E00\u4E2Ak\u51FA\u73B0\u7684\u4F4D\u7F6E\uFF0C\u4ECE\u800C\u8BA1\u7B97\u51FAk\u5728\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570&quot;&quot;&quot;</span>
        number <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> data<span class="token punctuation">:</span>
            first <span class="token operator">=</span> self<span class="token punctuation">.</span>GetFirstK<span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            last <span class="token operator">=</span> self<span class="token punctuation">.</span>GetLastK<span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> first <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> last <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                number <span class="token operator">=</span> last <span class="token operator">-</span> first <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A[0,n-1]\u4E2D\u7F3A\u5931\u7684\u6570\u5B57<br> \u4E00\u4E2A\u957F\u5EA6\u4E3An-1\u7684\u9012\u589E\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6240\u6709\u6570\u5B57\u90FD\u662F\u552F\u4E00\u7684\uFF0C\u5E76\u4E14\u6BCF\u4E00\u4E2A\u6570\u5B57\u90FD\u5728\u8303\u56F4[0,n-1]\u4E4B\u5185\u3002\u5728\u8303\u56F4[0,n-1]\u4E4B\u5185\u7684n\u4E2A\u6570\u5B57\u6709\u4E14\u53EA\u6709\u4E00\u4E2A\u6570\u5B57\u4E0D\u5728\u8BE5\u6570\u7EC4\u4E2D\uFF0C\u8BF7\u627E\u51FA\u8BE5\u6570\u5B57\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetMissingNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u95EE\u9898\u8F6C\u6362\u4E3A\u627E\u5230\u7B2C\u4E00\u4E2A\u4E0B\u6807\u548C\u503C\u4E0D\u7B49\u7684\u5143\u7D20\uFF0C\u5229\u7528\u4E8C\u5206\u67E5\u627E\u6CD5\u539F\u7406\u5BF9\u6392\u5E8F\u6570\u7EC4\u8FDB\u884C\u67E5\u627E&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            middle <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">!=</span> middle<span class="token punctuation">:</span>
                <span class="token keyword">if</span> middle <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> numbers<span class="token punctuation">[</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> middle
                right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>GetMissingNumber<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E09\uFF1A\u6570\u7EC4\u4E2D\u6570\u503C\u548C\u4E0B\u6807\u76F8\u7B49\u7684\u5143\u7D20<br> \u5047\u8BBE\u4E00\u4E2A\u5355\u8C03\u9012\u589E\u7684\u6570\u7EC4\u91CC\u6BCF\u4E2A\u5143\u7D20\u90FD\u662F\u6574\u6570\u5E76\u4E14\u552F\u4E00\u3002\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u627E\u51FA\u6570\u7EC4\u4E2D\u4EFB\u610F\u4E00\u4E2A\u6570\u503C\u7B49\u4E8E\u5176\u4E0B\u6807\u7684\u5143\u7D20\u3002\u4F8B\u5982\uFF0C\u5728\u6570\u7EC4{-3,-1,1,3,5}\u4E2D\uFF0C\u6570\u5B573\u548C\u5B83\u7684\u4E0B\u6807\u76F8\u7B49\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetNumberSameAsIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> middle<span class="token punctuation">:</span>
                <span class="token keyword">return</span> middle
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> middle<span class="token punctuation">:</span>
                right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>GetNumberSameAsIndex<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-54-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#no-54-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9" aria-hidden="true">#</a> NO.54 \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2CK\u5927\u8282\u70B9</h2><p>\u9898\u76EE\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u641C\u7D22\u6570\uFF0C\u8BF7\u627E\u51FA\u5176\u4E2D\u7B2Ck\u5927\u7684\u8282\u70B9\u3002\u4F8B\u5982\uFF0C\u5728\u4E0B\u56FE\u4E2D\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u91CC\uFF0C\u6309\u8282\u70B9\u6570\u503C\u5927\u5C0F\u987A\u5E8F\uFF0C\u7B2C3\u5927\u8282\u70B9\u7684\u503C\u662F4<br><img src="`+k+`" alt="n54.png"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4E2D\u6839\u5E8F\u904D\u5386\u4E00\u904D\u4E8C\u53C9\u641C\u7D22\u6811\u76F8\u5F53\u4E8E\u6309\u8282\u70B9\u6570\u503C\u5927\u5C0F\u987A\u904D\u5386\u4E8C\u53C9\u6811\uFF0C\u904D\u5386k\u6B21\u5373\u53EF\u627E\u5230\u7B2Ck\u5927\u7684\u8282\u70B9&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">KthNodeCroe</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pRoot<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> pRoot<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            target <span class="token operator">=</span> self<span class="token punctuation">.</span>KthNodeCroe<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                target <span class="token operator">=</span> pRoot
            k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pRoot<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            target <span class="token operator">=</span> self<span class="token punctuation">.</span>KthNodeCroe<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        <span class="token keyword">return</span> target
    <span class="token keyword">def</span> <span class="token function">KthNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pRoot<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> pRoot <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>KthNodeCroe<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
pRoot <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>KthNode<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-55-\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6" tabindex="-1"><a class="header-anchor" href="#no-55-\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6" aria-hidden="true">#</a> NO.55 \u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6</h2><ul><li>\u9898\u76EE\u4E00\uFF1A\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6<br> \u8F93\u5165\u4E00\u9897\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9\uFF0C\u6C42\u8BE5\u6811\u7684\u6DF1\u5EA6\u3002\u4ECE\u6839\u8282\u70B9\u5230\u53F6\u8282\u70B9\u4F9D\u6B21\u7ECF\u8FC7\u7684\u8282\u70B9(\u542B\u6839\u3001\u53F6\u8282\u70B9)\u5F62\u6210\u6811\u7684\u4E00\u6761\u8DEF\u5F84\uFF0C\u6700\u957F\u8DEF\u5F84\u7684\u957F\u5EA6\u4E3A\u6811\u7684\u6DF1\u5EA6</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u8BA1\u7B97\u5DE6\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6\uFF0C\u5176\u4E2D\u8F83\u5927\u8005\u52A01\u5C31\u662F\u672C\u6811\u7684\u6DF1\u5EA6&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pRoot <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        nLeft <span class="token operator">=</span> self<span class="token punctuation">.</span>TreeDepth<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        nRight <span class="token operator">=</span> self<span class="token punctuation">.</span>TreeDepth<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
        <span class="token keyword">return</span> nLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">if</span> nLeft <span class="token operator">&gt;</span> nRight <span class="token keyword">else</span> nRight <span class="token operator">+</span> <span class="token number">1</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u5E73\u8861\u4E8C\u53C9\u6811<br> \u8F93\u5165\u4E00\u9897\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9\uFF0C\u5224\u65AD\u8BE5\u6811\u662F\u4E0D\u662F\u5E73\u8861\u4E8C\u53C9\u6811\u3002\u5982\u679C\u67D0\u4E8C\u53C9\u6811\u4E2D\u4EFB\u610F\u8282\u70B9\u7684\u5DE6\u3001\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6\u76F8\u5DEE\u4E0D\u8D85\u8FC71\uFF0C\u90A3\u4E48\u5B83\u5C31\u662F\u4E00\u9897\u5E73\u8861\u4E8C\u53C9\u6811\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5229\u7528\u540E\u6839\u5E8F\u904D\u5386\u539F\u7406\uFF0C\u904D\u5386\u7684\u540C\u65F6\u6BD4\u8F83\u4E24\u9897\u5B50\u6811\u7684\u6DF1\u5EA6\uFF0C\u5224\u65AD\u662F\u5426\u5E73\u8861\uFF0C\u5229\u7528\u53EF\u53D8\u7C7B\u578Blist\u4F20\u5165\u9012\u5F52\u51FD\u6570\u53D6\u5F97\u88AB\u9012\u5F52\u7684\u5DE6\u53F3\u5B50\u6811\u7684\u6700\u5927\u6DF1\u5EA6&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">IsBalancedCroe</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">,</span> pDepth<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> pRoot<span class="token punctuation">:</span>
            pDepth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>IsBalancedCroe<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>left<span class="token punctuation">,</span> left<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>IsBalancedCroe<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
            diff <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> diff <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token keyword">and</span> diff <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                pDepth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">else</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">IsBalanced_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">)</span><span class="token punctuation">:</span>
        depth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>IsBalancedCroe<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> depth<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u901A\u8FC7\u725B\u5BA2\u7F51\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-56-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570" tabindex="-1"><a class="header-anchor" href="#no-56-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570" aria-hidden="true">#</a> NO.56 \u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570</h2><ul><li>\u9898\u76EE\uFF0D\uFF1A\u6570\u7EC4\u4E2D\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u4E24\u4E2A\u6570\u5B57<br> \u4E00\u4E2A\u6574\u578B\u6570\u7EC4\u91CC\u9664\u4E86\u4E24\u4E2A\u6570\u5B57\u4E4B\u5916\uFF0C\u5176\u4ED6\u6570\u5B57\u90FD\u51FA\u73B0\u4E86\u4E24\u6B21\u3002\u8BF7\u5199\u7A0B\u5E8F\u627E\u51FA\u8FD9\u4E24\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57\u3002\u8981\u6C42\u65F6\u95F4\u590D\u6742\u5EA6O(n)\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6O(1)\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">IsBit1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num<span class="token punctuation">,</span>indexBit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5224\u65ADnum\u7684\u4ECE\u53F3\u5230\u5DE6\u7B2CindexBit\u4F4D\u662F\u5426\u662F1&quot;&quot;&quot;</span>
        num <span class="token operator">=</span> num <span class="token operator">&gt;&gt;</span> indexBit
        <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">FindFirstBitIs1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u68C0\u67E5num\u4E8C\u8FDB\u5236\u4E2D1\u4F4D\u4E8E\u4ECE\u5DE6\u5230\u53F3\u7684\u7B2C\u51E0\u4F4D\uFF0C\u5E76\u8FD4\u56DE\u4F4D\u6570&quot;&quot;&quot;</span>
        indexBit <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">and</span> indexBit <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">:</span>
            num <span class="token operator">=</span> num <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
            indexBit <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> indexBit
    <span class="token keyword">def</span> <span class="token function">FindNumsAppearOnce</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u75280\u4F5C\u4E3A\u521D\u59CB\u503C\uFF0C\u4ECE\u5DE6\u5230\u53F3\u8FDE\u7EED\u5BF9array\u6BCF\u4E2A\u5143\u7D20\u8FDB\u884C\u5F02\u6216\uFF0C\u51FA\u73B0\u4E24\u6B21\u7684\u5143\u7D20\u6700\u7EC8\u4F1A\u76F8\u4E92\u62B5\u6D88\uFF0C\u5269\u4E0B\u7684\u5C31\u662F\u4E24\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5143\u7D20\u7684
        \u5F02\u6216\u7684\u7ED3\u679CresultExclusiveOR\uFF0C\u8C03\u7528\u51FD\u6570\u83B7\u53D6\u7ED3\u679C\u4E8C\u8FDB\u5236\u4E2D\u6700\u4F4E\u4F4D\u7684\u4F4D\u7F6EindexOf1\uFF0C\u5E76\u518D\u6B21\u8FDE\u7EED\u5F02\u6216\u5229\u7528\u8BE5\u4F4D\u7F6E\u5BF9\u53E6\u4E00\u4E2A\u53EA\u51FA\u73B0
        \u4E00\u6B21\u7684\u5143\u7D20\u8FDB\u884C\u6392\u9664\uFF0C\u4ECE\u800C\u83B7\u5F97\u7684\u4E24\u4E2A\u7ED3\u679C\u5C31\u662Farray\u4E2D\u4E24\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5143\u7D20&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> array<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        resultExclusiveOr <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span>
            resultExclusiveOr <span class="token operator">=</span> resultExclusiveOr <span class="token operator">^</span> i
        indexOf1 <span class="token operator">=</span> self<span class="token punctuation">.</span>FindFirstBitIs1<span class="token punctuation">(</span>resultExclusiveOr<span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>IsBit1<span class="token punctuation">(</span>i<span class="token punctuation">,</span>indexOf1<span class="token punctuation">)</span><span class="token punctuation">:</span>
                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> i
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> i
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u6570\u7EC4\u4E2D\u552F\u4E00\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57<br> \u5728\u4E00\u4E2A\u6570\u7EC4\u4E2D\u9664\u4E00\u4E2A\u6570\u5B57\u53EA\u51FA\u73B0\u4E00\u6B21\u4E4B\u5916\uFF0C\u5176\u4ED6\u6570\u5B57\u90FD\u51FA\u73B0\u4E86\u4E09\u6B21\uFF0C\u8BF7\u627E\u51FA\u90A3\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FindNumsAppearOnce</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5C06\u6570\u7EC4\u4E2D\u6240\u6709\u5143\u7D20\u7684\u4E8C\u8FDB\u5236\u6570\u7684\u6BCF\u4E00\u4F4D\u76F8\u52A0\uFF0C\u82E5\u80FD\u88AB3\u6574\u9664\u5219\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57\u5728\u6B64\u4F4D\u4E00\u5B9A\u4E3A0\uFF0C\u5426\u5219\u4E3A1\uFF0C\u6536\u96C6\u8FD9\u4E9B1\u5373\u53EF\u5F97\u5230\u8BE5\u6570&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        bitSum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">32</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            bitMask <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                bit <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> bitMask
                <span class="token keyword">if</span> bit <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    bitSum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
                bitMask <span class="token operator">=</span> bitMask <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
        result <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
            result <span class="token operator">+=</span> bitSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>FindNumsAppearOnce<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-57-\u548C\u4E3As\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-57-\u548C\u4E3As\u7684\u6570\u5B57" aria-hidden="true">#</a> NO.57 \u548C\u4E3As\u7684\u6570\u5B57</h2><ul><li>\u9898\u76EE\u4E00\uFF1A\u548C\u4E3As\u7684\u6570\u5B57<br> \u8F93\u5165\u4E00\u4E2A\u9012\u589E\u6392\u5E8F\u7684\u6570\u7EC4\u548C\u4E00\u4E2A\u6570\u5B57s\uFF0C\u5728\u6570\u7EC4\u4E2D\u67E5\u627E\u4E24\u4E2A\u6570\uFF0C\u4F7F\u5F97\u5B83\u4EEC\u7684\u548C\u6B63\u597D\u662Fs\u3002\u5982\u679C\u6709\u591A\u5BF9\u6570\u5B57\u7684\u548C\u7B49\u4E8Es\uFF0C\u5219\u8F93\u51FA\u4EFB\u610F\u4E00\u5BF9\u5373\u53EF</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u4E24\u4E2A\u7D22\u5F15\u5206\u522B\u6307\u5411\u6570\u7EC4\u7684\u9996\u5C3E\uFF0C\u6307\u9488\u5411\u4E2D\u95F4\u5BF9\u649E\u67E5\u627E\u7B26\u5408\u8981\u6C42\u7684\u6570\u5B57\uFF0C\u5BF9\u4E8E\u6709\u591A\u4E2A\u7B26\u5408\u8981\u6C42\u7684\u6570\u5B57\u5BF9\u6765\u8BF4\uFF0C\u8FD9\u79CD\u65B9\u6CD5\u7B2C\u4E00\u4E2A\u627E\u5230\u7684
    \u5FC5\u5B9A\u662F\u4E24\u6570\u5B57\u53EA\u5DEE\u6700\u5927\u7684\uFF0C\u56E0\u6B64\u4E5F\u662F\u4E58\u79EF\u6700\u5C0F\u7684\uFF0C\u7B26\u5408\u725B\u5BA2\u7F51\u7684\u9644\u52A0\u6761\u4EF6\uFF0C\u6B64\u5916result\u8FD8\u5177\u5907\u6536\u96C6\u591A\u5BF9\u7B26\u5408\u8981\u6C42\u7684\u6570\u5B57\u7684\u6F5C\u529B&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">FindNumbersWithSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">,</span> tsum<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> array<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        ahead <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        behind <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> ahead <span class="token operator">&gt;</span> behind<span class="token punctuation">:</span>
            curSum <span class="token operator">=</span> array<span class="token punctuation">[</span>ahead<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>behind<span class="token punctuation">]</span>
            <span class="token keyword">if</span> curSum <span class="token operator">==</span> tsum<span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array<span class="token punctuation">[</span>behind<span class="token punctuation">]</span><span class="token punctuation">)</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array<span class="token punctuation">[</span>ahead<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">elif</span> curSum <span class="token operator">&gt;</span> tsum<span class="token punctuation">:</span>
                ahead <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                behind <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217<br> \u8F93\u5165\u4E00\u4E2A\u6B63\u6570s\uFF0C\u6253\u5370\u51FA\u6240\u6709\u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217(\u81F3\u5C11\u542B\u6709\u4E24\u4E2A\u6570)\u3002\u4F8B\u5982\uFF0C\u8F93\u516515\uFF0C\u7531\u4E8E1+2+3+4+5=4+5+6=7+8=15\uFF0C\u6240\u4EE5\u6253\u5370\u51FA3\u4E2A\u8FDE\u7EED\u5E8F\u52171~5,4~6,7~8\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FindContinuousSequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tsum<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u548C\u4E0A\u9898\u76F8\u540C\u7684\u601D\u8DEF\uFF0C\u6307\u9488\u6269\u6563\uFF0C\u8BBE\u7F6E\u4E00\u4E2A\u6BD4\u8F83\u5C0F\u6570\u548C\u8F83\u5927\u6570\uFF0C\u5224\u65AD\u5176\u4E2D\u95F4\u7684\u5E8F\u5217\u548C\u662F\u5426\u7B26\u5408\u6761\u4EF6\uFF0C\u5176\u4E2D\u5F53\u524D\u5E8F\u5217\u548C\u7684\u8BA1\u7B97\u53C2\u8003\u4E86
        \u524D\u4E00\u5E8F\u5217\u548C\uFF0C\u5728\u524D\u4E00\u5E8F\u5217\u548C\u57FA\u7840\u4E0A\u589E\u52A0big\u6216\u51CF\u5C11small\uFF0C\u8FD9\u6837\u53EF\u4EE5\u51CF\u5C11\u8BA1\u7B97\u91CF&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> tsum <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> result
        small <span class="token operator">=</span> <span class="token number">1</span>
        big <span class="token operator">=</span> <span class="token number">2</span>
        middle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> tsum<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        curSum <span class="token operator">=</span> small <span class="token operator">+</span> big
        <span class="token keyword">while</span> small <span class="token operator">&lt;</span> middle<span class="token punctuation">:</span>
            <span class="token keyword">if</span> curSum <span class="token operator">==</span> tsum<span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> big<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">while</span> curSum <span class="token operator">&gt;</span> tsum <span class="token keyword">and</span> small <span class="token operator">&lt;</span> middle<span class="token punctuation">:</span>
                curSum <span class="token operator">-=</span> small
                small <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> curSum <span class="token operator">==</span> tsum<span class="token punctuation">:</span>
                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> big <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            big <span class="token operator">+=</span> <span class="token number">1</span>
            curSum <span class="token operator">+=</span> big
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-58-\u7FFB\u8F6C\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#no-58-\u7FFB\u8F6C\u5B57\u7B26\u4E32" aria-hidden="true">#</a> NO.58 \u7FFB\u8F6C\u5B57\u7B26\u4E32</h2><ul><li>\u9898\u76EE\u4E00\uFF1A\u7FFB\u8F6C\u5355\u8BCD\u987A\u5E8F<br> \u8F93\u5165\u4E00\u4E2A\u82F1\u6587\u53E5\u5B50\uFF0C\u7FFB\u8F6C\u53E5\u5B50\u4E2D\u5355\u8BCD\u7684\u987A\u5E8F\uFF0C\u4F46\u5355\u8BCD\u5185\u5B57\u7B26\u7684\u987A\u5E8F\u4E0D\u53D8\u3002\u4E3A\u7B80\u5355\u8D77\u89C1\uFF0C\u6807\u70B9\u7B26\u53F7\u548C\u666E\u901A\u5B57\u6BCD\u4E00\u6837\u5904\u7406\u3002\u4F8B\u5982\u8F93\u5165\u5B57\u7B26\u4E32&quot;I am a student&quot;\uFF0C\u5219\u8F93\u51FA&quot;student a am I&quot;\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5148\u4F7F\u7528reverse\u7FFB\u8F6C\u6574\u4E2A\u53E5\u5B50\uFF0C\u518D\u5C06\u5355\u8BCD\u9010\u4E2A\u6062\u590D\u8FC7\u6765&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">Reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span> pBegin<span class="token punctuation">,</span> pEnd<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;\u8F93\u5165\u6570\u636E\u4E3A\u7A7A&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd <span class="token keyword">and</span> pEnd <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> data<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span>
            data<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span>
            data<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">=</span> temp
            pBegin <span class="token operator">+=</span> <span class="token number">1</span>
            pEnd <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">ReverseSentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        pBegin <span class="token operator">=</span> <span class="token number">0</span>
        pEnd <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>Reverse<span class="token punctuation">(</span>data<span class="token punctuation">,</span> pBegin<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
                pBegin <span class="token operator">+=</span> <span class="token number">1</span>
                pEnd <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> pEnd <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">or</span> data<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>Reverse<span class="token punctuation">(</span>data<span class="token punctuation">,</span> pBegin<span class="token punctuation">,</span> pEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                pBegin <span class="token operator">=</span> pEnd
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                pEnd <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u5DE6\u65CB\u5B57\u7B26\u4E32\u3002\u3000\u3000 \u5B57\u7B26\u4E32\u7684\u5DE6\u65CB\u8F6C\u64CD\u4F5C\u662F\u628A\u5B57\u7B26\u4E32\u7684\u524D\u9762\u82E5\u5E72\u4E2A\u5B57\u7B26\u8F6C\u79FB\u5230\u5B57\u7B26\u4E32\u7684\u5C3E\u90E8\u3002\u8BF7\u5B9A\u4E49\u4E00\u4E2A\u51FD\u6570\u5B9E\u73B0\u5B57\u7B26\u4E32\u5DE6\u65CB\u8F6C\u64CD\u4F5C\u7684\u529F\u80FD\u3002\u6BD4\u5982\uFF0C\u8F93\u5165\u5B57\u7B26\u4E32&quot;abcdefg&quot;\u548C\u6570\u5B57\uFF12\uFF0C\u8BE5\u51FD\u6570\u5C06\u8FD4\u56DE\u5DE6\u65CB\u8F6C\u4E24\u4F4D\u5F97\u5230\u7684\u7ED3\u679C&quot;cdefgab&quot;</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u548C\u9898\u76EE\u4E00\u7684\u601D\u8DEF\u4E00\u81F4\uFF0C\u5C06\u5B57\u7B26\u4E32\u6309\uFF4E\u5206\u6210\u4E24\u6BB5\uFF0C\u5148\u5206\u522B\u7FFB\u8F6C\uFF0C\u5728\u6574\u4F53\u7FFB\u8F6C\u5373\u53EF\u8FBE\u5230\u6548\u679C&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">Reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span> pBegin<span class="token punctuation">,</span> pEnd<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;\u8F93\u5165\u6570\u636E\u4E3A\u7A7A&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> pBegin <span class="token operator">&lt;</span> pEnd <span class="token keyword">and</span> pEnd <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> data<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span>
            data<span class="token punctuation">[</span>pBegin<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span>
            data<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">=</span> temp
            pBegin <span class="token operator">+=</span> <span class="token number">1</span>
            pEnd <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> s
        <span class="token keyword">if</span> s<span class="token punctuation">:</span>
            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            <span class="token keyword">if</span> length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>
                data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
                pFirstStart <span class="token operator">=</span> <span class="token number">0</span>
                pFirstEnd <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>
                pSecondStart <span class="token operator">=</span> n
                pSecondEnd <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>
                self<span class="token punctuation">.</span>Reverse<span class="token punctuation">(</span>data<span class="token punctuation">,</span> pFirstStart<span class="token punctuation">,</span> pFirstEnd<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>Reverse<span class="token punctuation">(</span>data<span class="token punctuation">,</span> pSecondStart<span class="token punctuation">,</span> pSecondEnd<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>Reverse<span class="token punctuation">(</span>data<span class="token punctuation">,</span> pFirstStart<span class="token punctuation">,</span> pSecondEnd<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-59-\u961F\u5217\u7684\u6700\u5927\u503C" tabindex="-1"><a class="header-anchor" href="#no-59-\u961F\u5217\u7684\u6700\u5927\u503C" aria-hidden="true">#</a> NO.59 \u961F\u5217\u7684\u6700\u5927\u503C</h2><ul><li>\u9898\u76EE\u4E00\uFF1A\u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C<br> \u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4\u548C\u6ED1\u52A8\u7A97\u53E3\u7684\u5927\u5C0F\uFF0C\u8BF7\u627E\u51FA\u6240\u6709\u6ED1\u52A8\u7A97\u53E3\u91CC\u7684\u6700\u5927\u503C\u3002\u4F8B\u5982\uFF0C\u5982\u679C\u8F93\u5165\u6570\u7EC4{2,3,4,2,6,2,5,1}\u4EE5\u53CA\u6ED1\u52A8\u7A97\u53E3\u5927\u5C0F3\uFF0C\u90A3\u4E48\u4E00\u5171\u5B58\u57286\u4E2A\u6ED1\u52A8\u7A97\u53E3\uFF0C\u4ED6\u4EEC\u7684\u6700\u5927\u503C\u5206\u522B\u662F{4,4,6,6,6,5}\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maxInWindows</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u53CC\u7AEF\u961F\u5217\uFF0C\u7EF4\u6301\u961F\u5217\u9876\u7AEF\u59CB\u7EC8\u662F\u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C\u7684\u7D22\u5F15\u4F4D\u7F6E&quot;&quot;&quot;</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> size <span class="token keyword">and</span> size <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># \u7B2C\u4E00\u6BB5\u5FAA\u73AF\u586B\u5145\u6EE1\u7B2C\u4E00\u4E2A\u6ED1\u52A8\u7A97\u53E3</span>
                <span class="token keyword">while</span> index <span class="token keyword">and</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> num<span class="token punctuation">[</span>index<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    index<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># \u7B2C\u4E8C\u6BB5\u5FAA\u73AF\u5F00\u59CB\u8BB0\u5F55\u6BCF\u4E2A\u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">[</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">while</span> index <span class="token keyword">and</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> num<span class="token punctuation">[</span>index<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    index<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> index <span class="token keyword">and</span> index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i <span class="token operator">-</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># \u82E5\u5F53\u524D\u6700\u5927\u503C\u5DF2\u6ED1\u51FA\u7A97\u53E3\uFF0C\u5219\u5C06\u5176\u5220\u9664</span>
                    index<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">[</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u9898\u76EE\u4E8C\uFF1A\u961F\u5217\u7684\u6700\u5927\u503C<br> \u8BF7\u5B9A\u4E49\u4E00\u4E2A\u961F\u5217\u5E76\u5B9E\u73B0\u51FD\u6570max\u5F97\u5230\u961F\u5217\u91CC\u7684\u6700\u5927\u503C\uFF0C\u8981\u6C42\u51FD\u6570max\uFF0Cpush_back\u548Cpop_front\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u90FD\u662FO(1)\u3002</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u601D\u8DEF\u7C7B\u4F3C\u9898\u76EE\u4E00&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>maximums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">def</span> <span class="token function">push_back</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>maximums <span class="token keyword">and</span> number <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>maximums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>maximums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span> self<span class="token punctuation">.</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maximums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span> self<span class="token punctuation">.</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>currentIndex <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">pop_front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>maximums<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;queue is empty&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>maximums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>maximums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">maxNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>maximums<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;queue is empty&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>maximums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>push_back<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>maxNumber<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        a<span class="token punctuation">.</span>pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-60-n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570" tabindex="-1"><a class="header-anchor" href="#no-60-n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570" aria-hidden="true">#</a> NO.60 n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570</h2><p>\u9898\u76EE\uFF1A\u628An\u4E2A\u9AB0\u5B50\u4ECD\u5728\u5730\u4E0A\uFF0C\u6240\u6709\u9AB0\u5B50\u671D\u4E0A\u4E00\u9762\u7684\u70B9\u6570\u4E4B\u548C\u4E3As\u3002\u8F93\u5165n\uFF0C\u6253\u5370\u51FAs\u6240\u6709\u53EF\u80FD\u7684\u503C\u51FA\u73B0\u7684\u6982\u7387\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u9012\u5F52\u7684\u5B9E\u73B0\u7B97\u6CD5\u601D\u8DEF\u867D\u7136\u6E05\u6670\uFF0C\u4F46\u7B97\u6CD5\u590D\u6742\u5EA6\u9AD8\uFF0C\u6545\u800C\u4EC5\u5B9E\u73B0\u57FA\u4E8E\u5FAA\u73AF\u7684\u7B97\u6CD5\uFF0C\u4F7F\u7528\u4E24\u4E2A\u8F85\u52A9\u6570\u7EC4\u6765\u5B58\u50A8\u4E2D\u95F4\u7ED3\u679C\uFF0C\u591A\u51FA\u4E00\u4E2A\u9AB0\u5B50\uFF0C\u5176\u589E\u52A0
    \u7684\u7ED3\u679C\u7684\u9891\u6B21\u662F\u6570\u7EC4\u524D6\u4E2A\u6570\u5B57\u4E4B\u548C\uFF0C\u57FA\u4E8E\u6B64\u5229\u7528\u5FAA\u73AF\u6765\u6A21\u62DF\u5B9E\u73B0&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>g_maxValue <span class="token operator">=</span> <span class="token number">6</span>
    <span class="token keyword">def</span> <span class="token function">probability</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        pProbabilities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>g_maxValue <span class="token operator">*</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>g_maxValue <span class="token operator">*</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        flag <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>g_maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pProbabilities<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
                pProbabilities<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> self<span class="token punctuation">.</span>g_maxValue<span class="token operator">*</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                pProbabilities<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                k <span class="token operator">=</span> <span class="token number">1</span>
                <span class="token keyword">while</span> k <span class="token operator">&lt;=</span> i <span class="token keyword">and</span> k <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>g_maxValue<span class="token punctuation">:</span>
                    pProbabilities<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> pProbabilities<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span>
                    k <span class="token operator">+=</span> <span class="token number">1</span>
            flag <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> flag
        total <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>g_maxValue<span class="token punctuation">,</span> number<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>pProbabilities<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>total <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> self<span class="token punctuation">.</span>g_maxValue<span class="token operator">*</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> a<span class="token punctuation">.</span>probability<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-61-\u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50" tabindex="-1"><a class="header-anchor" href="#no-61-\u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50" aria-hidden="true">#</a> NO.61 \u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50</h2><p>\u9898\u76EE\uFF1A\u4ECE\u6251\u514B\u724C\u4E2D\u968F\u673A\u62BD\u51FA5\u5F20\u724C\uFF0C\u5224\u65AD\u662F\u4E0D\u662F\u4E00\u4E2A\u987A\u5B50\uFF0C\u5373\u8FD95\u5F20\u724C\u662F\u4E0D\u662F\u8FDE\u7EED\u7684\u30022~10\u4E3A\u6570\u5B57\u672C\u8EAB\uFF0CA\u4E3A1\uFF0CJ\u4E3A11\uFF0CQ\u4E3A12\uFF0CK\u4E3A13\uFF0C\u800C\u5927\u3001\u5C0F\u738B\u53EF\u4EE5\u770B\u6210\u4EFB\u610F\u6570\u5B57\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">IsContinuous</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5148\u5C06\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\uFF0C\u8BA1\u7B970\u7684\u4E2A\u6570\u548C\u95F4\u9694\u7684\u957F\u5EA6\uFF0C\u82E5\u95F4\u9694\u7684\u957F\u5EA6\u5927\u4E8E0\u7684\u4E2A\u6570\uFF0C\u5219\u8BF4\u660E\u4F7F\u7528\u5927\u5C0F\u738B\u4E5F\u65E0\u6CD5\u5C06\u4E94\u5F20\u724C\u8FDE\u6210\u987A\u5B50\uFF0C
        \u53E6\u5916\u68C0\u6D4B\u5230\u5BF9\u5B50\u5219\u76F4\u63A5\u5224\u65AD\u4E0D\u662F\u987A\u5B50&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        numbers<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        numberOfZero <span class="token operator">=</span> <span class="token number">0</span>
        numberOfGap <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            numberOfZero <span class="token operator">+=</span> <span class="token number">1</span>
        small <span class="token operator">=</span> numberOfZero
        big <span class="token operator">=</span> small <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">while</span> big <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">==</span> numbers<span class="token punctuation">[</span>big<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
            numberOfGap <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>big<span class="token punctuation">]</span> <span class="token operator">-</span> numbers<span class="token punctuation">[</span>small<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>
            small <span class="token operator">=</span> big
            big <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token keyword">if</span> numberOfGap <span class="token operator">&gt;</span> numberOfZero <span class="token keyword">else</span> <span class="token boolean">True</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-62-\u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#no-62-\u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57" aria-hidden="true">#</a> NO.62 \u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57</h2><p>\u9898\u76EE\uFF1A0,1,...,n-1\u8FD9n\u4E2A\u6570\u5B57\u6392\u6210\u4E00\u4E2A\u5706\u5708\uFF0C\u4ECE\u6570\u5B570\u5F00\u59CB\uFF0C\u6BCF\u6B21\u4ECE\u8FD9\u4E00\u4E2A\u5706\u5708\u91CC\u5220\u9664\u7B2Cm\u4E2A\u6570\u5B57\u3002\u6C42\u51FA\u8FD9\u4E2A\u5706\u5708\u91CC\u5269\u4E0B\u7684\u6700\u540E\u4E00\u4E2A\u6570\u5B57\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u6B64\u4E3A\u7ECF\u5178\u7684\u7EA6\u745F\u592B\u73AF\u95EE\u9898\uFF0C\u53EF\u4EE5\u91C7\u7528\u73AF\u5F62\u94FE\u8868\u6A21\u62DF\u5706\u5708\u8FDB\u884C\u6C42\u89E3\uFF0C\u4F46\u6B64\u65B9\u6CD5\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(mn),\u7A7A\u95F4\u590D\u6742\u5EA6O(n)\u7B97\u6CD5\u6548\u7387\u4E0D\u9AD8\u3002
    \u53E6\u4E00\u79CD\u65B9\u6CD5\u662F\u627E\u51FA\u88AB\u5220\u6570\u5B57\u7684\u89C4\u5F8B\uFF0C\u76F4\u63A5\u8BA1\u7B97\u5706\u5708\u4E2D\u5269\u4E0B\u7684\u6570\u5B57\uFF0C\u6B64\u65B9\u6CD5\u9700\u8981\u8FDB\u884C\u6570\u5B66\u5206\u6790\u5EFA\u6A21\uFF0C\u8FC7\u7A0B\u8F83\u4E3A\u590D\u6742\uFF0C\u4F46\u7B97\u6CD5\u6548\u7387\u4E00\u822C\u6BD4\u8F83\u9AD8
    \u4EE5\u4E0B\u4EE3\u7801\u6839\u636E\u6570\u5B66\u5EFA\u6A21\u540E\u7684\u9012\u5F52\u516C\u5F0F\u5199\u6210\uFF0C\u7B97\u6CD5\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n),\u7A7A\u95F4\u590D\u6742\u5EA6O(1)\uFF0C\u5177\u4F53\u5EFA\u6A21\u8FC7\u7A0B\u8BE6\u89C1\u5251\u6307offer\uFF0CP302-303\u3002&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">or</span> m <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        last <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            last <span class="token operator">=</span> <span class="token punctuation">(</span>last <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i
        <span class="token keyword">return</span> last
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-63-\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6" tabindex="-1"><a class="header-anchor" href="#no-63-\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6" aria-hidden="true">#</a> NO.63 \u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6</h2><p>\u9898\u76EE\uFF1A\u5047\u8BBE\u628A\u67D0\u80A1\u7968\u7684\u4EF7\u683C\u6309\u7167\u65F6\u95F4\u5148\u540E\u987A\u5E8F\u5B58\u50A8\u5728\u6570\u7EC4\u4E2D\uFF0C\u8BF7\u95EE\u4E70\u5356\u8BE5\u80A1\u7968\u4E00\u6B21\u53EF\u80FD\u83B7\u5F97\u7684\u6700\u5927\u5229\u6DA6\u662F\u591A\u5C11\uFF1F\u4F8B\u5982\uFF0C\u4E00\u53EA\u80A1\u7968\u5728\u67D0\u4E9B\u65F6\u95F4\u8282\u70B9\u7684\u4EF7\u683C\u4E3A{9,11,8,5,7,12,16,14}\u3002\u5982\u679C\u6211\u4EEC\u80FD\u5728\u4EF7\u683C\u4E3A5\u7684\u65F6\u5019\u4E70\u5165\uFF0C\u5E76\u5728\u4EF7\u683C\u4E3A16\u65F6\u5356\u51FA\uFF0C\u5219\u80FD\u6536\u83B7\u6700\u5927\u7684\u5229\u6DA611.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">MaxDiff</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;maxdiff\u5B58\u50A8\u626B\u63CF\u8FC7\u7684\u6570\u5B57\u4E2D\u6700\u5927\u5229\u6DA6\uFF0CminNumber\u5B58\u50A8\u626B\u63CF\u8FC7\u7684\u6570\u5B57\u4E2D\u7684\u6700\u5C0F\u6570\u5B57\uFF0C\u5FAA\u73AF\u904D\u5386\u6574\u4E2A\u6570\u7EC4\uFF0C
        \u6700\u540E\u5F97\u5230\u7684\u5FC5\u5B9A\u662F\u6700\u5927\u7684\u5DEE\u503C\uFF0C\u5373\u6700\u5927\u5229\u6DA6&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        minNumber <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        maxDiff <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> minNumber
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> minNumber<span class="token punctuation">:</span>
                minNumber <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            currentDiff <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minNumber
            <span class="token keyword">if</span> currentDiff <span class="token operator">&gt;</span> maxDiff<span class="token punctuation">:</span>
                maxDiff <span class="token operator">=</span> currentDiff
        <span class="token keyword">return</span> maxDiff
<span class="token comment"># test code</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>MaxDiff<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-64-\u6C421-2-n" tabindex="-1"><a class="header-anchor" href="#no-64-\u6C421-2-n" aria-hidden="true">#</a> NO.64 \u6C421+2+...+n</h2><p>\u9898\u76EE\uFF1A\u6C421+2+...+n\uFF0C\u8981\u6C42\u4E0D\u80FD\u4F7F\u7528\u4E58\u9664\u6CD5\uFF0Cfor\uFF0Cwhile\uFF0Cif\uFF0Celse\uFF0Cswitch\uFF0Ccase\u7B49\u5173\u952E\u5B57\u53CA\u6761\u4EF6\u5224\u65AD\u8BED\u53E5\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u901A\u8FC7\u6784\u9020\u51FD\u6570\u7ED5\u8FC7\u7ED5\u8FC7\u6761\u4EF6\u5224\u65AD\uFF0C\u6784\u9020\u51FA\u9012\u5F52\u7EC8\u6B62\u6761\u4EF6\uFF0C\u901A\u8FC7\u9012\u5F52\u5B9E\u73B0\u5FAA\u73AF\u76F8\u52A0\u3002\u5251\u6307offer\u4E2D\u56DB\u79CD\u65B9\u6CD5(\u6784\u9020\u51FD\u6570\uFF0C\u865A\u51FD\u6570\uFF0C\u51FD\u6570\u6307\u9488\uFF0C
    \u6A21\u677F\u7C7B\u578B)\u90FD\u662F\u7ED5\u5F00\u5FAA\u73AF\u9012\u5F52\u76F8\u52A0\u7684\u601D\u8DEF&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">sum_stop</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>fun_list <span class="token operator">=</span> <span class="token punctuation">[</span>sum_stop<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fun_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>Sum_Solution<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fun_list<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-65-\u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5" tabindex="-1"><a class="header-anchor" href="#no-65-\u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5" aria-hidden="true">#</a> NO.65 \u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5</h2><p>\u9898\u76EE\uFF1A\u5199\u4E00\u4E2A\u51FD\u6570\uFF0C\u6C42\u4E24\u6574\u6570\u4E4B\u548C\uFF0C\u8981\u6C42\u5728\u51FD\u6570\u4F53\u5185\u4E0D\u5F97\u4F7F\u7528+-*/\u56DB\u5219\u8FD0\u7B97\u7B26\u53F7</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u4F7F\u7528\u5F02\u6216\u8FD0\u7B97\uFF0C\u8BA1\u7B97\u65E0\u8FDB\u4F4D\u65F6\u7684\u7ED3\u679C\uFF0C\u4F7F\u7528\u6309\u4F4D\u4E0E\u548C\u5DE6\u79FB\u8FD0\u7B97\u6765\u8BA1\u7B97\u8FDB\u4F4D\u6570\u5B57\u3002\u7531\u4E8Epython\u5728\u6570\u5B57\u5373\u5C06\u6EA2\u51FA\u65F6\u4F1A\u81EA\u52A8\u4F7F\u7528\u5927\u6570\u8868\u793A\uFF0C\u56E0\u6B64
    \u9700\u8981\u5BF9\u6C42\u548C\u7ED3\u679C\u5224\u65AD\u6EA2\u51FA&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">Add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> num2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> num1 <span class="token operator">^</span> num2
            num2 <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
            num1 <span class="token operator">=</span> temp <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span> 
        <span class="token keyword">return</span> num1 <span class="token keyword">if</span> num1 <span class="token operator">&gt;&gt;</span> <span class="token number">31</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">~</span><span class="token punctuation">(</span>num1 <span class="token operator">^</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span>
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-66-\u6784\u5EFA\u4E58\u79EF\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#no-66-\u6784\u5EFA\u4E58\u79EF\u6570\u7EC4" aria-hidden="true">#</a> NO.66 \u6784\u5EFA\u4E58\u79EF\u6570\u7EC4</h2><p>\u9898\u76EE\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4A[0,1,...,n-1],\u8BF7\u6784\u5EFA\u4E00\u4E2A\u6570\u7EC4B[0,1,...,n-1]\uFF0C\u5176\u4E2DB\u4E2D\u7684\u5143\u7D20$$ B[i]=A[0]\\times A[1]\\times ...\\times A[i-1] \\times A[i+1] \\times ... \\times A[n-1] $$\u4E0D\u80FD\u4F7F\u7528\u9664\u6CD5</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\u5C06B[i]\u6309\u7167A[i-1]\u548CA[i+1]\u5206\u6210\u524D\u9762\u4E58\u79EFC[i]\u548C\u540E\u9762\u4E58\u79EFD[i]\u4E24\u90E8\u5206\uFF0C\u5BF9\u4E8EC[i]=C[i-1]*A[i-1]\uFF0CD[i]=D[i+1]*A[i+1]\uFF0C
    \u56E0\u6B64\u53EF\u4EE5\u91C7\u7528\u4ECE\u6CBF\u7740i\u589E\u52A0\u7684\u65B9\u5411\u5FAA\u73AF\u8BA1\u7B97C[i]\uFF0C\u518D\u6CBF\u7740i\u51CF\u5C11\u7684\u65B9\u5411\u8BA1\u7B97D[i]\uFF0C\u6700\u7EC8\u83B7\u5F97B&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span>length
        <span class="token keyword">if</span> length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># calculate C[i]</span>
        result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment"># calculate D[i]*C[i]</span>
        temp <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">*=</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> temp
        <span class="token keyword">return</span> result
<span class="token comment"># test code</span>
<span class="token comment"># \u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-67-\u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570" tabindex="-1"><a class="header-anchor" href="#no-67-\u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570" aria-hidden="true">#</a> NO.67 \u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570</h2><p>\u9898\u76EE\uFF1A\u5C06\u4E00\u4E2A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u4E00\u4E2A\u6574\u6570(\u5B9E\u73B0Integer.valueOf(string)\u7684\u529F\u80FD\uFF0C\u4F46\u662Fstring\u4E0D\u7B26\u5408\u6570\u5B57\u8981\u6C42\u65F6\u8FD4\u56DE0)\uFF0C\u8981\u6C42\u4E0D\u80FD\u4F7F\u7528\u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570\u7684\u5E93\u51FD\u6570\u3002 \u6570\u503C\u4E3A0\u6216\u8005\u5B57\u7B26\u4E32\u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u6570\u503C\u5219\u8FD4\u56DE0\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u8BBE\u7F6E\u8F93\u5165\u662F\u5426\u7B26\u5408\u8981\u6C42\u6307\u793A\u6807\u5FD7&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>g_nStatus <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">def</span> <span class="token function">StrToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>g_nStatus <span class="token operator">=</span> <span class="token boolean">False</span>
        num <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> s<span class="token punctuation">:</span>
            minus <span class="token operator">=</span> <span class="token boolean">False</span>
            i <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
                minus <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
                num <span class="token operator">=</span> self<span class="token punctuation">.</span>StrToIntCore<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minus<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">StrToIntCore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minus<span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">:</span>
                flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> minus <span class="token keyword">else</span> <span class="token number">1</span>
                num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> flag <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> minus <span class="token keyword">and</span> num <span class="token operator">&gt;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>minus <span class="token keyword">and</span> num <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\u3000<span class="token comment"># \u5224\u65AD\u662F\u5426\u6EA2\u51FA</span>
                    num <span class="token operator">=</span> <span class="token number">0</span>
                    <span class="token keyword">break</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                num <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">break</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>g_nStatus <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> num
<span class="token comment"># test code</span>
<span class="token comment">#\u4EE3\u7801\u5DF2\u5728\u725B\u5BA2\u7F51\u901A\u8FC7\u6D4B\u8BD5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="no-68-\u6811\u4E2D\u4E24\u4E2A\u8282\u70B9\u7684\u6700\u4F4E\u516C\u5171\u7956\u5148" tabindex="-1"><a class="header-anchor" href="#no-68-\u6811\u4E2D\u4E24\u4E2A\u8282\u70B9\u7684\u6700\u4F4E\u516C\u5171\u7956\u5148" aria-hidden="true">#</a> NO.68 \u6811\u4E2D\u4E24\u4E2A\u8282\u70B9\u7684\u6700\u4F4E\u516C\u5171\u7956\u5148</h2><p>\u9898\u76EE\uFF1A\u8F93\u5165\u6811\u7684\u6839\u8282\u70B9\u548C\u4E4B\u4E2D\u4E24\u4E2A\u8282\u70B9\uFF0C\u6C42\u4E24\u4E2A\u8282\u70B9\u7684\u6700\u4F4E\u516C\u5171\u7956\u5148</p><ul><li>\u601D\u8DEF\u4E00\uFF1A\u5224\u5B9A\u4E3A\u4E8C\u53C9\u641C\u7D22\u6811<br> \u82E5\u662F\u4E8C\u53C9\u641C\u7D22\u6811\uFF0C\u5219\u901A\u8FC7\u6BD4\u8F83\u4E24\u8282\u70B9\u548C\u6839\u8282\u70B9\u503C\u7684\u5927\u5C0F\uFF0C\u6765\u5224\u65AD\u5176\u4F4D\u4E8E\u6839\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u6216\u53F3\u5B50\u6811\uFF0C\u9012\u5F52\u5224\u65AD\u6839\u8282\u70B9\u7684\u5B50\u8282\u70B9\uFF0C\u82E5\u4E24\u8282\u70B9\u5206\u522B\u4F4D\u4E8E\u5B50\u8282\u70B9(\u5305\u62EC\u6839\u8282\u70B9)\u7684\u4E24\u4FA7\uFF0C\u5219\u8BE5\u8282\u70B9\u4E3A\u4E24\u8282\u70B9\u7684\u6700\u4F4E\u516C\u5171\u7956\u5148</li><li>\u601D\u8DEF\u4E8C\uFF1A\u82E5\u4E0D\u662F\u4E8C\u53C9\u641C\u7D22\u6811\uFF0C\u4E14\u6709\u6307\u5411\u7236\u8282\u70B9\u7684\u6307\u9488<br> \u82E5\u6709\u6307\u5411\u7236\u8282\u70B9\u7684\u6307\u9488\uFF0C\u8BE5\u95EE\u9898\u53EF\u8F6C\u6362\u4E3A\u6C42\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9\uFF0C\u8BE5\u94FE\u8868\u7684\u5C3E\u8282\u70B9\u90FD\u662F\u6307\u5411\u6839\u8282\u70B9\uFF0C\u53EF\u53C2\u8003\u4E24\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9\u7684\u89E3\u6CD5</li><li>\u601D\u8DEF\u4E09\uFF1A\u82E5\u53EA\u662F\u666E\u901A\u6811\uFF0C\u4E14\u6CA1\u6709\u6307\u5411\u7236\u8282\u70B9\u7684\u6307\u9488<br> \u82E5\u53EA\u662F\u666E\u901A\u6811\uFF0C\u5219\u53EF\u91C7\u7528\u6DF1\u5EA6\u4F18\u5148\u904D\u5386\uFF0C\u627E\u5230\u4E24\u8282\u70B9\u5230\u6839\u8282\u70B9\u7684\u8DEF\u5F84\uFF0C\u5C06\u5176\u8F6C\u6362\u4E3A\u6C42\u4E24\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9\u3002\u4EE5\u4E0B\u4E3A\u6B64\u601D\u8DEF\u7684\u4EE3\u7801(\u5176\u4E2D\u6D4B\u8BD5\u4EE3\u7801\u4EE5\u4E0B\u56FE\u4E3A\u4F8B)\uFF1A<br><img src="`+y+`" alt="n68.png"></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetNodePath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">,</span> pNode<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u83B7\u53D6pNode\u5230pRoot\u7684\u8DEF\u5F84\uFF0C\u901A\u8FC7\u4FEE\u6539list\u7C7B\u578Bpath\u8FD4\u56DE\u503C&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> pRoot <span class="token operator">==</span> pNode<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span>
        found <span class="token operator">=</span> <span class="token boolean">False</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token keyword">not</span> found <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">:</span>
            found <span class="token operator">=</span> self<span class="token punctuation">.</span>GetNodePath<span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pNode<span class="token punctuation">,</span> path<span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> found<span class="token punctuation">:</span>
            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> found
    <span class="token keyword">def</span> <span class="token function">GetLastCommonNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path1<span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;\u904D\u5386\u4E24\u4E2Alist\u6A21\u62DF\u7684\u94FE\u8868\uFF0C\u627E\u51FA\u6700\u540E\u4E00\u4E2A\u76F8\u540C\u7684\u8282\u70B9&quot;&quot;&quot;</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        pLast <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> path1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> path2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                pLast <span class="token operator">=</span> path1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> pLast
    <span class="token keyword">def</span> <span class="token function">GetLastCommonParent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pRoot<span class="token punctuation">,</span> pNode1<span class="token punctuation">,</span> pNode2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> pRoot <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> pNode1 <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> pNode2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        path1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        path2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>GetNodePath<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> pNode1<span class="token punctuation">,</span> path1<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>GetNodePath<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> pNode2<span class="token punctuation">,</span> path2<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>GetLastCommonNode<span class="token punctuation">(</span>path1<span class="token punctuation">,</span> path2<span class="token punctuation">)</span>
<span class="token comment"># test code</span>
pRoot <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pRoot<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp <span class="token operator">=</span> pRoot<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp <span class="token operator">=</span> pRoot<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
temp<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span><span class="token string">&#39;j&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
reuslt <span class="token operator">=</span> a<span class="token punctuation">.</span>GetLastCommonParent<span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span> temp<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pRoot<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>reuslt<span class="token punctuation">.</span>val <span class="token keyword">if</span> reuslt <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">else</span> reuslt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,96);function x(N,_){const e=a("center"),o=a("ExternalLinkIcon");return v(),m("div",null,[f,p(e,null,{default:b(()=>[n(" ***\u524D\u8A00*** ")]),_:1}),n(" _\u4EE5\u4E0B\u4EE3\u7801\u5757\u7ED3\u5408\u4E86 [\u5251\u6307offer][1] \u548C [\u725B\u5BA2\u7F51][2] \u6765\u7F16\u5199\uFF0C\u90E8\u5206\u4EE3\u7801\u5C06\u5728\u725B\u5BA2\u7F51\u4E0A\u8FDB\u884C\u6D4B\u8BD5\uFF0C\u4E3A\u4E86\u8FD8\u539F\u5251\u6307offer\u7684\u7B97\u6CD5\u601D\u60F3\uFF0C\u4EE3\u7801\u5B8C\u5168\u4EFF\u7167C++\u7248\u8FDB\u884C\u7F16\u5199\uFF0C\u56E0\u6B64\u9488\u5BF9python\u8BED\u8A00\u8FD8\u6709\u4E00\u5B9A\u7684\u6539\u8FDB\u7A7A\u95F4_ [1]https://pan.baidu.com/s/1pavnkxcIRgwR1sKmjosVAQ \u63D0\u53D6\u7801:za5n [2]https://www.nowcode.com/ta/coding-interviews "),g,s("p",null,[n("\u5FAA\u73AF\u904D\u5386\u6BCF\u4E00\u4F4D\uFF0C\u7EC8\u6B62\u6761\u4EF6\u4E3Acur\u548Chigh\u540C\u65F6\u4E3A0\uFF0C"),s("a",h,[n("\u53C2\u8003leetcode\u8DEF\u98DE"),p(o)]),n(" \u6B64\u9898\u8F6C\u6362\u4E3A\u6392\u5217\u7EC4\u5408\u540E\uFF0C\u5173\u952E\u5728\u4E8E\u786E\u5B9Acur\u51FA\u73B01\u7684\u6570\u5B57\u8303\u56F4\uFF0C\u9650\u5B9A\u8303\u56F4\u540E\uFF0C\u53EF\u6309\u7167\u6392\u5217\u7EC4\u5408\u7684\u65B9\u5F0F\u786E\u5B9A\uFF0C\u7EC4\u5408\u6570")]),q])}const O=d(w,[["render",x],["__file","python_sword_for_offer.html.vue"]]);export{O as default};
