(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{482:function(t,a,s){"use strict";s.r(a);var e=s(62),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"es6基础教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6基础教程"}},[t._v("#")]),t._v(" es6基础教程")]),t._v(" "),s("p",[t._v("ECMAScript6.0是JavaScript语言的下一代标准"),s("br"),t._v("\n本笔记参考了"),s("a",{attrs:{href:""}},[t._v("尚硅谷的es6教程")]),t._v("和"),s("a",{attrs:{href:"https://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰的es6入门教程"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"babel插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel插件"}},[t._v("#")]),t._v(" babel插件")]),t._v(" "),s("p",[t._v("Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在老版本的浏览器执行。")]),t._v(" "),s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[t._v("在脚手架环境中一般会安装好该插件"),s("br"),t._v("\n手动安装方式"),s("code",[t._v("npm install --save-dev @babel/core")])]),t._v(" "),s("p",[t._v("命令行转码工具安装:"),s("code",[t._v("npm install --save-dev @babel/cli")]),s("br"),t._v("\n使用方法"),s("code",[t._v("npx babel filename/dir <-o/-d> <outFileName/outDir> <-s保存source map文件>")])]),t._v(" "),s("p",[t._v("@babel/node模块的babel-node命令，提供一个支持ES6的REPL(交互式)环境。它支持Node的REPL环境的所有功能，可以直接运行ES6代码。"),s("br"),t._v("\n安装"),s("code",[t._v("npm install --save-dev @babel/node")]),t._v(",启动"),s("code",[t._v("npx babel-node")]),t._v(",执行文件"),s("code",[t._v("npx babel-node es6.js")])]),t._v(" "),s("h3",{attrs:{id:"配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),s("p",[s("code",[t._v(".babelrc")]),t._v("或"),s("code",[t._v("babel.config.js")]),t._v("文件是Babel插件的配置文件"),s("br"),t._v("\n文件书写规则一般如下:")]),t._v(" "),s("div",{staticClass:"language-JSON extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"presets"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/env"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/preset-react"')]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设定转码规则  ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"plugins"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设定插件  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),s("p",[t._v("规则集和插件也需要安装"),s("code",[t._v("npm install --save-dev @babel/preset-env")])]),t._v(" "),s("h3",{attrs:{id:"polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polyfill"}},[t._v("#")]),t._v(" polyfill")]),t._v(" "),s("p",[t._v("Babel默认只转换JS语法，不转换api，如"),s("code",[t._v("Iterator, Generator, Set, Proxy")]),t._v("等"),s("br"),t._v("\n因此还需要额外安装"),s("code",[t._v("core-js")]),t._v("和"),s("code",[t._v("regenerator-runtime(generator函数的转码)")]),t._v("作为执行环境的基础")]),t._v(" "),s("h2",{attrs:{id:"基础新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础新特性"}},[t._v("#")]),t._v(" 基础新特性")]),t._v(" "),s("h3",{attrs:{id:"let和const命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let和const命令"}},[t._v("#")]),t._v(" let和const命令")]),t._v(" "),s("p",[t._v("let声明没有变量提升,在块级作用域中如果在let命令之前使用了该变量会报错,如:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError  ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若块级作用域中始终不声明tmp则，首次tmp将使用外部全局变量tmp  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),s("p",[t._v("函数在块级作用域中声明es5规定中是非法的,es6中是合法的,但由于浏览器环境和其他环境对标准支持不同,实际表现也与规范不大一样.因此尽量避免在块级作用域中声明函数,取而代之使用函数表达式")]),t._v(" "),s("p",[t._v("const声明大体上与let一致,const仅能锁定对象的引用")]),t._v(" "),s("ul",[s("li",[t._v("es6中声明变量的方法:var,function,let,const,import,class")])]),t._v(" "),s("p",[t._v("let,const,class声明的全局变量将不会挂载在全局对象window/global上,各环境中全局对象在es2020上通过globalThis可以取到")]),t._v(" "),s("h3",{attrs:{id:"解构赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),s("ul",[s("li",[t._v("数组的解构赋值:")])]),t._v(" "),s("p",[t._v("凡具有Iterator接口的数据结构,都可以用数组形式的解构赋值(等号左侧数组形式)"),s("br"),t._v("\n解构赋值中设定默认值,仅当右方数据严格===undefined时,默认值才生效"),s("code",[t._v("let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'")])]),t._v(" "),s("ul",[s("li",[t._v("对象的解构赋值")])]),t._v(" "),s("p",[s("code",[t._v("let { foo: foo, bar: bar } = { foo: 'aaa', bar: 'bbb' };")]),s("br"),t._v("\n简写为"),s("code",[t._v("let {foo, bar} = { foo: 'aaa', bar: 'bbb' }")]),t._v("前者为key模式,后者为变量."),s("br"),t._v("\n可以取得继承的属性,同数组一样也支持默认值")]),t._v(" "),s("ul",[s("li",[t._v("解构赋值注意的点")])]),t._v(" "),s("ol",[s("li",[t._v("已声明的变量用于解构赋值")])]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误写法  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左边会被解释为代码块,解决方法为整体包一层括号  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明语句不可使用圆括号  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有赋值语句的非模式部分，可以使用圆括号,如:  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确,非声明语句,模式为数组索引0  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确,非声明语句,模式为p  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确  ")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("数组特殊解构")])]),t._v(" "),s("p",[t._v("数组本质是,特殊的对象,因此下列数组的解构赋值有效")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" last"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("字符串进行解构赋值将按数组规则进行,其他类型的数据将先转换为对象")]),t._v(" "),s("h3",{attrs:{id:"字符串扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串扩展"}},[t._v("#")]),t._v(" 字符串扩展")]),t._v(" "),s("ul",[s("li",[t._v("字符的Unicode表示法相关特性")])]),t._v(" "),s("p",[t._v("方式1:"),s("code",[t._v("\\u0000~\\uFFFF")]),t._v(",超出范围的字符采用双字节形式表示"),s("br"),t._v("\n方式2:"),s("code",[t._v("\\u{*****}")]),t._v(",使用"),s("code",[t._v("{}")]),t._v("可避免方式1的问题")]),t._v(" "),s("p",[t._v("字符串添加了Iterator接口支持for...of遍历循环相比于传统的for循环能够正确遍历"),s("code",[t._v("\\u{*****}")]),t._v("表示的字符")]),t._v(" "),s("p",[t._v("由于JSON的字符规定与js略有不同,es6对JSON.parse和stringify方法进行了改造,具体来说涉及"),s("code",[t._v("\\u2029")]),t._v("等字符的处理")]),t._v(" "),s("ul",[s("li",[t._v("模板字符串")])]),t._v(" "),s("p",[t._v("模板字符串使用反引号`标识,包含多行字符串时,所有的空格、换行、缩进都会被保留,通过"),s("code",[t._v("${}")]),t._v("的方式嵌入js表达式,模板字符串还可以嵌套,如:")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("tmpl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("addrs")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("  \n  <table>  \n  ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("addrs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("addr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("  \n    <tr><td>")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("</td></tr>  \n    <tr><td>")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("last"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("</td></tr>  \n  ")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("  \n  </table>  \n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("通过"),s("code",[t._v("${}")]),t._v("嵌入的表达式最终都会被转换为字符串输出，如:"),s("code",[t._v("${new Promise(()=>{console.log()})}")]),t._v(" 输出为"),s("code",[t._v("[object Promise]")]),s("br"),t._v("\n模板字符串可用于模板编译,如vue中插值语法,脚手架中的index.html文件中"),s("br"),t._v(" "),s("code",[t._v("<title><%= htmlWebpackPlugin.options.title %></title>")]),t._v("webpack插件句法")]),t._v(" "),s("ul",[s("li",[t._v("标签模板")])]),t._v(" "),s("p",[t._v("函数后紧跟一个模板字符串,被称为标签模板,是函数调用的一种特殊形式,模板字符串将作为参数,如：console.log`123`")]),t._v(" "),s("p",[t._v("带变量的模板字符串作为参数时，会将模板字符串处理为多个参数，然后调用函数：")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \ntag"),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" world ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' world '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("标签模板可用于过滤html字符串,防止恶意输入、国际化处理、嵌入其他编程语言。模板字符串会对特殊字符进行转义导致嵌入其他编程语言时的一些麻烦")]),t._v(" "),s("h3",{attrs:{id:"字符串的新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的新增方法"}},[t._v("#")]),t._v(" 字符串的新增方法")]),t._v(" "),s("p",[t._v("String.fromCodePoint() 用于从 Unicode 码点返回对应字符"),s("br"),t._v("\nString.raw() 返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。"),s("br"),t._v("\n实例方法：codePointAt() 能够正确处理4个字节储存的字符，返回一个字符的码点"),s("br"),t._v("\n实例方法：normalize() Unicode 正规化"),s("br"),t._v("\n实例方法：includes(), startsWith(), endsWith()等"),s("br"),t._v(" "),s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多方法"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"正则的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则的扩展"}},[t._v("#")]),t._v(" 正则的扩展")]),t._v(" "),s("ul",[s("li",[t._v("u修饰符:用来正确处理大于\\uFFFF的 Unicode 字符")]),t._v(" "),s("li",[t._v("y修饰符:与g修饰符类似,但y修饰符确保匹配必须从剩余的第一个位置开始,与之前的匹配结果'粘连',隐含了头部匹配的标志^")]),t._v(" "),s("li",[t._v("s 修饰符：dotAll模式,使得.可以匹配任意单个字符")]),t._v(" "),s("li",[t._v("后行断言,"),s("code",[t._v("/(?<=y)x/")]),t._v("x只有在y后面才匹配,先行断言"),s("code",[t._v("/x(?=y)/")]),t._v("x只有在y前面才匹配,其否定形式都是将"),s("code",[t._v("=")]),t._v("换成"),s("code",[t._v("!")])]),t._v(" "),s("li",[t._v("Unicode属性类 写法\\p{...}和\\P{...}，允许正则表达式匹配符合 Unicode 某种属性的所有字符")]),t._v(" "),s("li",[t._v("具名组匹配:在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”如"),s("code",[t._v("(?<year>)")]),t._v(",返回结果的groups属性上引用该组名")])]),t._v(" "),s("h3",{attrs:{id:"数值的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值的扩展"}},[t._v("#")]),t._v(" 数值的扩展")]),t._v(" "),s("ul",[s("li",[t._v("0b/0B表示二进制数值,0o/0O表示八进制数值,通过Number()方法转换为十进制")]),t._v(" "),s("li",[t._v("增加了'_'作为数值分隔符,以方便书写")]),t._v(" "),s("li",[t._v("新增Number.isFinite(),Number.isNaN(),Number.isInteger()方法")]),t._v(" "),s("li",[t._v("新增Number.EPSILON极小常量，表示1与大于1的最小浮点数之间的差")]),t._v(" "),s("li",[t._v("新增Number.MAX_SAFE_INTEGER,Number.MIN_SAFE_INTEGER常量表示整数的上下限,Number.isSafeInteger()方法判断整数是否在该范围内")]),t._v(" "),s("li",[t._v("在Math对象上新增了Math.trunc()截取取整,Math.sign()判断正负0等方法")]),t._v(" "),s("li",[t._v("新增BigInt数据类型,可以表示更大范围的数值,在数字后面跟n来表示")])]),t._v(" "),s("h3",{attrs:{id:"函数的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的扩展"}},[t._v("#")]),t._v(" 函数的扩展")]),t._v(" "),s("ul",[s("li",[t._v("支持默认参数,使用默认参数时不能有同名参数,")]),t._v(" "),s("li",[t._v("指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。默认参数是惰性的调用重新计算")]),t._v(" "),s("li",[t._v("一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域")]),t._v(" "),s("li",[t._v("引入rest参数（形式为...变量名），用于以数组的形式获取函数的多余参数")]),t._v(" "),s("li",[t._v("支持箭头函数，箭头函数没有自己的this，不可当做构造函数或生成器函数使用。在定义对象时使用箭头函数将导致this指向其上级作用域")]),t._v(" "),s("li",[t._v('尾调用:在函数的最后一步调用另一个函数(仅调用),由于调用位置处于函数,尾调用优化不会保留调用函数的"调用帧"(保存着调用位置和内部变量),从而大幅节省内存.尾调用优化函数内需开启严格模式,递归函数通过这种优化方式能避免内存溢出')])]),t._v(" "),s("h3",{attrs:{id:"数组的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的扩展"}},[t._v("#")]),t._v(" 数组的扩展")]),t._v(" "),s("ul",[s("li",[t._v("扩展运算符"),s("code",[t._v("...")]),t._v("类似于解构赋值,可与解构赋值结合,任何定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组。")]),t._v(" "),s("li",[t._v("Array.from()将类数组对象和可遍历对象转换成Array对象，扩展运算符依赖Symbol.iterator接口,Array.from()方法依赖length属性")]),t._v(" "),s("li",[t._v("数组空位,一个位置没有任何值,与该位置值为undefined不同")])]),t._v(" "),s("p",[t._v("更多新增方法参见MDN")]),t._v(" "),s("h3",{attrs:{id:"对象的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展"}},[t._v("#")]),t._v(" 对象的扩展")]),t._v(" "),s("p",[t._v("属性名表达式,es6中可以在字面量定义对象时通过中括号传入表达式作为属性名")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("propKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  {  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    value: 123,  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    writable: true,  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    enumerable: true,  /可枚举性  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    configurable: true  ")]),t._v("\n")])])]),s("p",[t._v("属性遍历:"),s("br"),t._v(" "),s("code",[t._v("for...in")]),t._v("遍历对象自身和继承的可枚举属性(不含Symbol属性)"),s("br"),t._v(" "),s("code",[t._v("Object.keys")]),t._v("返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名"),s("br"),t._v("\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名"),s("br"),t._v("\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名"),s("br"),t._v("\nReflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。")]),t._v(" "),s("p",[t._v("super关键字只能在对象的方法中使用,指向当前对象的原型对象")]),t._v(" "),s("p",[t._v("AggregateError错误对象可以同时构造多个错误对象,同时抛出多个错误")]),t._v(" "),s("h3",{attrs:{id:"对象的新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的新增方法"}},[t._v("#")]),t._v(" 对象的新增方法")]),t._v(" "),s("p",[t._v("Object.is()同值相等"),s("br"),t._v("\nObject.assign()方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。实现了对象的浅拷贝")]),t._v(" "),s("p",[t._v("es6不推荐直接操作对象隐式原型对象__proto__,而是通过Object.setPrototypeOf()写,Object.getPrototypeOf()读,Object.create()生成等方法来操作原型对象")]),t._v(" "),s("p",[t._v("Object.entries()获取对象自身的可枚举键值对数组,Object.fromEntries()则是对应的反向操作")]),t._v(" "),s("h3",{attrs:{id:"运算符扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符扩展"}},[t._v("#")]),t._v(" 运算符扩展")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("指数运算符"),s("code",[t._v("**")]),t._v(",表示指数计算,以右结合的方式进行,从右向左计算")])]),t._v(" "),s("li",[s("p",[t._v("链判断运算符"),s("code",[t._v("?.")]),t._v(",示例"),s("code",[t._v("const firstName = message?.body?.user?.firstName || 'default';")]),t._v("层层判断上级对象或属性是否存在,如果不存在直接返回undefined"),s("br"),t._v("\n被圆括号包裹时不会影响括号外面的代码."),s("br"),t._v("\n不得用于构造函数实例化,右侧不能有模板字符串或十进制数字,不可用于super关键字,不可用于赋值运算左侧")])]),t._v(" "),s("li",[s("p",[t._v("Null判断运算符"),s("br"),t._v(" "),s("code",[t._v("??")]),t._v("相对于"),s("code",[t._v("||")]),t._v(","),s("code",[t._v("??")]),t._v("的仅左侧为"),s("code",[t._v("null, undefined")]),t._v(",时右侧默认值生效,为"),s("code",[t._v("'', false, 0")]),t._v("时则不生效."),s("br"),t._v(" "),s("code",[t._v("??")]),t._v("也是逻辑运算符,与"),s("code",[t._v("&&")]),t._v("和"),s("code",[t._v("||")]),t._v("混用时需加上括号表示优先级否则会报错,"),s("br"),t._v("\n这三种运算符还可与赋值结合"),s("code",[t._v("??=")]),t._v(", "),s("code",[t._v("||=")]),t._v(", "),s("code",[t._v("&&=")]),t._v(",将左边和右边先进行逻辑判断,最后一次惰性判断的表达式的值赋给左边")])])]),t._v(" "),s("h3",{attrs:{id:"symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),s("p",[t._v("原始类型Symbol表示独一无二的值,需要调用Symbol()函数生成,函数参数仅为描述信息,相同的参数生成的Symbol也不同,不可与其他类型的值运算,可转换为bool和String."),s("br"),t._v("\nSymbol常用作属性名,避免重名,其定义的属性名为非私有属性")]),t._v(" "),s("p",[t._v("由于对象的key默认为字符串,使用Symbol定义key时需使用方括号,使用也相同")]),t._v(" "),s("p",[t._v("Symbol.for()传入字符串,先搜索同参数的symbol值，未找到再创建"),s("br"),t._v("\nSymbol.keyFor()返回一个已登记的Symbol类型的key"),s("br"),t._v("\nES6还提供了11个内置的Symbol值，指向语言内部使用的方法.详情参考官方文档")]),t._v(" "),s("h3",{attrs:{id:"set和map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set和map"}},[t._v("#")]),t._v(" Set和Map")]),t._v(" "),s("p",[t._v("Set类似数组,但没有重复值,去重算法类似与"),s("code",[t._v("===")]),t._v(",但NaN被认为等于自身,"),s("br"),t._v("\n通过size方法返回成员总数，遍历顺序就是插入顺序")]),t._v(" "),s("p",[t._v("WeakSet与Set类似,但成员只能是对象,对象都是弱引用(垃圾回收不会考虑WeakSet中的引用),因此WeakSet也不可遍历")]),t._v(" "),s("p",[t._v("es6之前Object对象的key只能是字符串,Map则没有这个限制.Map通过"),s("code",[t._v("new Map()")]),t._v("来创建,传入参数由键值对数组组成的二维数组,提供了get和set方法.")]),t._v(" "),s("p",[t._v("类似的es6也提供了WeakMap类与WeakSet性质类似,其键名key为弱引用，该对象的其他强引用消除后，对象会被垃圾回收机制回收，不会考虑弱引用，因此WeakMap中的键值对会自动消失(类比linux系统的软连接和硬链接与文件实体inode之间的关系)")]),t._v(" "),s("p",[t._v("WeakRef用于直接创建对象的弱引用,"),s("code",[t._v("new WeakRef(Object)")]),t._v(",传入对象,返回对象的弱引用,deref()方法返回原始对象或undefined")]),t._v(" "),s("p",[t._v("FinalizationRegistry用来指定目标对象被垃圾回收机制清除以后，所要执行的回调函数。")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" registry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FinalizationRegistry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("heldValue")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nregistry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("theObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// thisObject要观察的对象  ")]),t._v("\n")])])]),s("h3",{attrs:{id:"proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),s("p",[t._v('Proxy在目标对象之前架设"拦截",修改某些操作的默认行为,属于元编程(对编程语言进行编程)'),s("code",[t._v("var proxy = new Proxy(target, handler);")]),t._v("target是要拦截的对象,handler对象定义拦截行为,对返回proxy实例的操作会被相应的拦截.proxy实例作为其他对象的原型时,对该对象操作也会相应的拦截")]),t._v(" "),s("p",[t._v("Proxy支持get, set, has, deleteProperty, ownKeys, getOwnPropertyDescriptor, defineProperty, preventExtensions, getPrototypeOf, isExtensible, setPrototypeOf, apply, construct 一共13中行为")]),t._v(" "),s("p",[s("code",[t._v("get(target, propKey, receiver)")]),t._v("拦截读取操作,传入目标对象,属性名,Proxy实例操作对象(可选)"),s("br"),t._v(" "),s("code",[t._v("set(target, propKey, value, receiver)")]),t._v("拦截某个属性的赋值操作"),s("br"),t._v(" "),s("code",[t._v("apply(target, ctx, args)")]),t._v("拦截函数的调用,call,apply操作,传入目标对象,上下文,参数")]),t._v(" "),s("p",[t._v("Proxy.revocable()返回一个可取消的Proxy实例")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" revoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("revocable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nproxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nproxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("revoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取消代理实例  ")]),t._v("\nproxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError: Revoked  ")]),t._v("\n")])])]),s("p",[t._v("代理情况下被代理目标对象内部的this关键字会指向Proxy代理,而proxy拦截对象内部的this指向handler,这两个问题会导致某些对象无法代理需要特别注意"),s("br"),t._v("\nTODO:proxy和Object.defineProperty在代理数据时的区别")]),t._v(" "),s("h3",{attrs:{id:"reflect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[t._v("#")]),t._v(" Reflect")]),t._v(" "),s("p",[t._v("原来属于Object对象的一些语言内部的方法,均放置到Reflect对象上,Object操作都变成了函数式的行为，操作成功与失败返回bool值"),s("br"),t._v("\nReflect对象的方法与Proxy对象的方法一一对应"),s("br"),t._v("\n13个静态方法："),s("br"),t._v("\nReflect.apply(target, thisArg, args)"),s("br"),t._v("\nReflect.construct(target, args)"),s("br"),t._v("\nReflect.get(target, name, receiver)"),s("br"),t._v("\nReflect.set(target, name, value, receiver)"),s("br"),t._v("\nReflect.defineProperty(target, name, desc)"),s("br"),t._v("\nReflect.deleteProperty(target, name)"),s("br"),t._v("\nReflect.has(target, name)"),s("br"),t._v("\nReflect.ownKeys(target)"),s("br"),t._v("\nReflect.isExtensible(target)"),s("br"),t._v("\nReflect.preventExtensions(target)"),s("br"),t._v("\nReflect.getOwnPropertyDescriptor(target, name)"),s("br"),t._v("\nReflect.getPrototypeOf(target)"),s("br"),t._v("\nReflect.setPrototypeOf(target, prototype)")]),t._v(" "),s("h3",{attrs:{id:"promise对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise对象"}},[t._v("#")]),t._v(" Promise对象")]),t._v(" "),s("p",[t._v("主要用于异步编程，Promise对象状态不受外界影响，只有pending，fulfilled，rejected三种状态，一旦状态改变就不会再变。"),s("br"),t._v("\n一旦新建就无法取消，没有设置回调函数就会内部报错，处于pending状态是无法得知进度")]),t._v(" "),s("p",[t._v("调用resolve或reject并不会结束Promise参数函数的执行,所以最好在调用这两个函数时return,并将后续要处理的逻辑放入then方法中")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Promise.prototype.then()方法将返回一个新的Promise,因此可以使用链式调用.")])]),t._v(" "),s("li",[s("p",[t._v("Promise.Prototype.catch()是.then(null/undefined, rejection)的别名,指定发生错误时的回调函数.推荐使用then,catch的组合,以便catch可以捕获到之前所有then的错误,若没有指定catch,Promise的错误不会冒泡到对象外面")])]),t._v(" "),s("li",[s("p",[t._v("Promise.prototype.finally()方法无论Promise最后状态如何,都会执行操作,其本质时then的特例")])]),t._v(" "),s("li",[s("p",[t._v("Promise.all()方法将多个Promise实例包装成一个新的Promise实例,入参为数组或具有Iterator接口的对象,每个成员为Promise实例;")])])]),t._v(" "),s("p",[t._v("只有所有的Promise实例都为fulfilled状态时,返回的Promise才为fulfilled状态取得返回值数组,否则就为rejected并且获取到rejected实例的返回值")]),t._v(" "),s("ul",[s("li",[t._v("与Promise.all()类似的方法还有Promise.race(),Promise.allSettled(),Promise.any()等")])]),t._v(" "),s("h3",{attrs:{id:"iterator-和-for-of-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator-和-for-of-循环"}},[t._v("#")]),t._v(" Iterator 和 for...of 循环")]),t._v(" "),s("p",[t._v("Iterator机制,是一种接口,为不同的数据提供统一的访问机制,主要供for...of循环遍历消费."),s("br"),t._v("\n其本质是包含next方法的指针对象,next方法会返回成员信息和done(bool类型,表遍历是否结束),"),s("br"),t._v("\n原生数据结构的Iterator接口键值为"),s("code",[t._v("[Symbol.iterator]")]),t._v(",解构赋值、扩展运算符、yield*等运算符依赖于该接口")]),t._v(" "),s("p",[t._v("for...of循环提前退出时,就会调用指针对象的return方法")]),t._v(" "),s("h3",{attrs:{id:"generator函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator函数"}},[t._v("#")]),t._v(" Generator函数")]),t._v(" "),s("ul",[s("li",[t._v("Generator函数内封装了多个状态,执行函数会返回一个遍历器Iterator,调用遍历器的next方法依次返回每个内部状态,定义与使用：")])]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GenFun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'status1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'status2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ending'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" iter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GenFun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \niter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {value : 'status1'， done:false}  ")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("yield表达式是暂停标志,采用了惰性求值只有调用next指向该语句时,表达式才会执行.和return语句类似,但只能在Generator函数内部使用")])]),t._v(" "),s("li",[s("p",[t._v("next方法携带参数时,参数会被当做上一个yield表达式的返回值res"),s("code",[t._v("let res = yield i")]),t._v(",若没有带参数,则表达式返回值为undefined")])]),t._v(" "),s("li",[s("p",[t._v("Generator 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获")])]),t._v(" "),s("li",[s("p",[t._v("next()、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的传入语句替换yield表达式。")])]),t._v(" "),s("li",[s("p",[t._v("yield* 表达式用于在一个Generator函数中调用另一个Generator函数或实现了Iterator接口的对象,其结果将被整合进调用方的Generator函数中")])]),t._v(" "),s("li",[s("p",[t._v("Generator函数作为对象属性时可简写为"),s("code",[t._v("*GenFunAttr(){}")]),t._v(",Generator函数返回遍历器的this并不指向Generator")])])]),t._v(" "),s("p",[t._v("Generator是实现状态机的最佳结构,通过调用next实现状态翻转.Generator函数是ES6对协程的不完全实现。"),s("br"),t._v("\nps：协程通常用于单线程程序实现并发，其调用栈为冻结交换执行权的方式，与子例程(一个调用栈嵌套)相比和线程的工作默认更像"),s("br"),t._v("\nGenerator函数多用于将异步操作同步化表达、控制流管理、部署Iterator接口等场景")]),t._v(" "),s("h3",{attrs:{id:"generator函数的异步应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator函数的异步应用"}},[t._v("#")]),t._v(" Generator函数的异步应用")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("异步是指一个任务不连续完成，Generator函数能够暂停函数的执行,向外部交出函数执行权,因此也能实现异步应用")])]),t._v(" "),s("li",[s("p",[t._v("Thunk函数类似于包装函数,是自动执行(将执行权交回Generator函数)Generator函数的一种方法")])])]),t._v(" "),s("p",[t._v("Thunk函数的思想源于传名调用,即传入参数为表达式时,不立即计算表达式,而是用到对应参数时,再计算表达式参数,这个过程可以通过将参数放入临时函数(Thunk函数)中再将函数传入函数体,使用时调用来实现"),s("br"),t._v("\nJS是传值调用的,Thunk函数被用来包装其他函数,可将多参数函数变为单参数函数,对应的库有Thunkify等"),s("br"),t._v("\nThunk函数与Generator函数结合,自动执行Generator函数,实例代码如下:")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" thunkify "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'thunkify'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" readFileThunk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thunkify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readFile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备Thunk函数  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于Thunk函数的Generator执行器  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" gen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("done"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("g")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileThunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fileA'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileThunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fileB'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... yield表达式中必须为Thunk函数  ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileThunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fileN'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始自动执行Generator函数  ")]),t._v("\n")])])]),s("ul",[s("li",[t._v("进一步的co模块将两种自动执行器(Thunk函数和Promise对象)进行包装,传入Generator函数yield表达式后面必须为Thunk或Promise")])]),t._v(" "),s("h3",{attrs:{id:"async-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-函数"}},[t._v("#")]),t._v(" async 函数")]),t._v(" "),s("p",[t._v("async函数是Generator函数的语法糖,表现形式为async代替函数的*号,await代替yield."),s("br"),t._v("\nasync的改进有:内置执行器,不再需要co等模块;await表达式可以跟原始类型值(但会被转换为立即resolved的Promise对象);返回值为Promise;")]),t._v(" "),s("p",[t._v("函数返回值会作为then()回调函数的参数."),s("br"),t._v("\n若async函数中某个await报错,后续的await都不会执行,整个函数将变为rejected状态,为避免此情况可主动捕获错误(try或.catch()均可)")]),t._v(" "),s("p",[t._v("顶层await可将,await关键字用于异步加载模块而无需写在async函数中(仅es6的import模块支持)")]),t._v(" "),s("h3",{attrs:{id:"class语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class语法"}},[t._v("#")]),t._v(" Class语法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("class语法关键字是语法糖,定义的类的所有方法都在Prototype上,类中定义的所有方法都是不可枚举的")])]),t._v(" "),s("li",[s("p",[t._v("类的内部可以使用get,set关键字修饰的函数拦截属性的读/写行为,这类函数都是设置在属性的Descriptor对象上的")])]),t._v(" "),s("li",[s("p",[t._v("使用class表达式时,类名只能在内部使用,外部使用表达式左边的变量.利用表达式可以写出立即执行的class")])]),t._v(" "),s("li",[s("p",[t._v("class中由static修饰的静态方法不会被实例所继承,方法内使用的this指向类而非普通方法中的实例对象,父类的静态方法可被子类继承")])]),t._v(" "),s("li",[s("p",[t._v("与方法同级的属性定义也属于实例属性,因此可以不必将属性都定义在constructor()中,这种定义方式不必书写this")])]),t._v(" "),s("li",[s("p",[t._v("截止目前类的静态属性不支持通过static关键字定义在类的内部,只能在类定义完成后再进行挂载"),s("br"),t._v("\n目前有个提案使用static在内中定义静态属性,仅部分环境实现,未来可能全面支持")])]),t._v(" "),s("li",[s("p",[t._v("es6暂不支持私有属性和方法,只能通过约定的命名,Symbol键值等方式模拟实现."),s("br"),t._v("\n私有属性和方法也有个提案,使用#作为命名前缀表示私有属性和方法")])])]),t._v(" "),s("p",[t._v("in运算符可用于判断私有属性是否在对象中存在")]),t._v(" "),s("ul",[s("li",[t._v("ES2022引入了静态块,允许在类的内部设置一个代码块，在类生成时运行一次，主要作用是对静态属性进行初始化。"),s("br"),t._v("\n类的内部只能有一个静态块,静态属性声明后运行,块内不能有return语句,块内可使用this或类名")])]),t._v(" "),s("p",[t._v("new.target属性一般用于构造函数中,返回new命令作用的那个构造函数,如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。可以利用这个属性可以实现只能继承,不能实例化的类(类似于其他语言中的接口)")]),t._v(" "),s("h3",{attrs:{id:"class的继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class的继承"}},[t._v("#")]),t._v(" Class的继承")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("class通过extends关键字实现继承")])]),t._v(" "),s("li",[s("p",[t._v("Object.getPrototypeOf方法可以用来从子类上获取父类,可用这个方法判断一个类是否继承另一个类")])]),t._v(" "),s("li",[s("p",[t._v("super关键字")])])]),t._v(" "),s("p",[t._v("作为super()方法时,只能在constructor()中调用,且必须调用一次super()否则子类得不到this对象.es6中先通过super()方法实例化父类实例对象的属性和方法,加到this上,然后再由子类构造函数修改this(此过程中this始终是指向子类的)")]),t._v(" "),s("p",[t._v("作为对象使用时在普通方法中指向父类的原型对象;在静态方法中,指向父类;通过super调用父类方法时,方法内部this指向子类实例,静态方法中调用时,则指向子类")]),t._v(" "),s("ul",[s("li",[t._v("类的Prototype和__proto__属性")])]),t._v(" "),s("p",[t._v("类同时有prototype属性和__proto__属性,同时存在两条继承链.")]),t._v(" "),s("ol",[s("li",[t._v("子类的__proto__属性，表示构造函数的继承，总是指向父类")]),t._v(" "),s("li",[t._v("子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性")])]),t._v(" "),s("p",[t._v("这两条继承链，可以这样理解：作为一个对象时，子类（B）的原型（__proto__属性）是父类（A）；作为一个构造函数时，子类（B）的原型对象（prototype属性）是父类的原型对象（prototype属性）的实例。")]),t._v(" "),s("h3",{attrs:{id:"module的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module的语法"}},[t._v("#")]),t._v(" Module的语法")]),t._v(" "),s("p",[t._v("ES6模块使用的是编译时加载(静态加载)，与ES6的模块语法import相比CommonJS模块是运行时加载的方式引入，无法做到按需引入")]),t._v(" "),s("p",[t._v("ES6模块自动采用严格模式;export命令必须与模块内部变量建立一一对应关系，输出的接口与对应的值是动态绑定关系，可通过接口获取模块内实时的值")]),t._v(" "),s("p",[t._v("CommonJS和import混用时，import会被首先执行而与位置无关")]),t._v(" "),s("p",[t._v("默认导出和导入都相当与导入导出default，export default命令的本质是将后面的值，赋给default变量")]),t._v(" "),s("p",[s("code",[t._v("export { foo, bar } from 'myModule'")]),t._v("相当于没有在当前模块引入，仅做了转发，通过这点可以实现模块之间的继承")]),t._v(" "),s("p",[t._v("import关键字在作为方法使用时是动态加载的，import(path)返回一个Promise对象，传入参数可以是js表达式，返回路径字符串")]),t._v(" "),s("h3",{attrs:{id:"module的加载实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module的加载实现"}},[t._v("#")]),t._v(" Module的加载实现")]),t._v(" "),s("ul",[s("li",[t._v("浏览器加载，"),s("code",[t._v("<script><\/script>")]),t._v('标签的defer或async属性用于指定脚本异步加载，defer是渲染完后执行，async是下载完后执行，这两个属性对内联脚本都无效，同时使用时defer属性将失效。加载ES6模块时还需加上type="module"属性，脚本会异步加载等渲染完后再按模块出现的顺序执行')]),t._v(" "),s("li",[t._v("ES6模块与CommonJS模块")])]),t._v(" "),s("p",[t._v("ES6模块输出的值是引用，编译时就输出接口，import命令是异步加载依赖解析；而CommonJS是输出值拷贝，运行时加载，require()是同步加载模块")]),t._v(" "),s("ul",[s("li",[t._v("Node.js的模块加载方法")])]),t._v(" "),s("p",[t._v("CommonJS是Node.js专用的模块，采用reqiure(),module.exports方式引入和暴露，Node.js v13.2版本开始对ES6模块提供支持，但要求ES6模块后缀文件后缀名改为.mjs或在项目文件package.json中设置属性"),s("code",[t._v('"type":"module"')])]),t._v(" "),s("p",[s("code",[t._v(".mjs")]),t._v("总是以ES6模块加载，"),s("code",[t._v(".cjs")]),t._v("总是以CommonJS模块加载，两种模式尽量不要混用")]),t._v(" "),s("p",[t._v("package.json文件中main和exports字段都可以执行模块的入口文件。exports字段的优先级较高，其字段别名为"),s("code",[t._v(".")]),t._v("时代表模块的主入口，exports字段还可实现条件加载")]),t._v(" "),s("p",[t._v("在CommonJS模块中加载ES6模块只能使用import()方法，而ES6中加载CommonJS模块之只能整体加载")]),t._v(" "),s("ul",[s("li",[t._v("循环加载")])]),t._v(" "),s("p",[t._v("两个模块相互依赖的情况为循环加载。"),s("br"),t._v("\nCommonJS循环加载时只返回当前已执行部分的值."),s("br"),t._v("\nES6循环加载时，先加载的模块a会保留引用，后加载的模块b在发现依赖a时，会认为a已经成功加载，因此此时引用a中的变量会引发not defiend错误，若引用的是a中的函数时，由于函数具有提升作用，因此会正常执行函数")]),t._v(" "),s("h2",{attrs:{id:"编程风格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程风格"}},[t._v("#")]),t._v(" 编程风格")]),t._v(" "),s("p",[t._v("字符串一律使用单引号；优先使用解构赋值；单行定义对象时不以逗号结尾，多行时以逗号结尾;少用 self/_this/that 绑定 this，简单的、单行的、不会复用的函数，建议采用箭头函数；所有配置项参数都应该集中在一个对象，放在最后一个参数；需要用到哈希映射时，尽量使用Map数据结构，而非Object，因为Map中有遍历机制；模块输出时export与export default尽量不要同时使用")]),t._v(" "),s("h2",{attrs:{id:"读懂规格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读懂规格"}},[t._v("#")]),t._v(" 读懂规格")]),t._v(" "),s("p",[t._v("规格文件是计算机语言的官方标准，详细描述语法规则和实现方法，"),s("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/6.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6规格"),s("OutboundLink")],1),t._v(",如果有语法实在无法理解，找不到答案时，可以去看看规格文件")]),t._v(" "),s("h3",{attrs:{id:"异步遍历器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步遍历器"}},[t._v("#")]),t._v(" 异步遍历器")]),t._v(" "),s("p",[t._v("类似于同步遍历器的对称"),s("br"),t._v("\n(暂简单了解，笔记待完善)")]),t._v(" "),s("h3",{attrs:{id:"arraybuffer二进制数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer二进制数组"}},[t._v("#")]),t._v(" ArrayBuffer二进制数组")]),t._v(" "),s("p",[t._v("ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口，可用于AJAX，Canvas，File API，多线程等场景"),s("br"),t._v("\n(暂简单了解，笔记待完善)")]),t._v(" "),s("h3",{attrs:{id:"最新提案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最新提案"}},[t._v("#")]),t._v(" 最新提案")]),t._v(" "),s("p",[t._v("do表达式使代码块也可有返回值；"),s("br"),t._v("\nthrow表达式;函数的部分执行；"),s("br"),t._v("\n管道运算符|>;"),s("br"),t._v(" "),s("code",[t._v("Math.signbit()")]),t._v("判断符号位是否被设置;"),s("br"),t._v("\n双冒号元算符"),s("code",[t._v("thisObj::Fun")]),t._v("将左边的this对象绑定到右边的函数中；"),s("br"),t._v("\nRealm API 提供沙箱功能，提供单独的new Realm().global全局对象；")]),t._v(" "),s("p",[s("code",[t._v("#!")]),t._v("命令，功能类似bash或python中的对应命令")]),t._v(" "),s("p",[t._v("import.meta提供当前模块的元信息；"),s("br"),t._v("\n允许import命令加载JSON模块；")]),t._v(" "),s("h3",{attrs:{id:"装饰器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),s("p",[t._v("装饰器仅可用于类或类的方法，具体作用与java的注解，python的装饰器类似"),s("br"),t._v("\n装饰器提案仍未定稿")])])}),[],!1,null,null,null);a.default=n.exports}}]);