(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{491:function(t,a,s){"use strict";s.r(a);var r=s(62),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),s("h2",{attrs:{id:"理解作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解作用域"}},[t._v("#")]),t._v(" 理解作用域")]),t._v(" "),s("p",[t._v("编译器：js会在代码进行运行前进行编译，主要有分词(词法分析)、解析(语法分析生成AST抽象语法树)、代码生成三个过程构成，在变量声明过程中，为变量开辟内存区域"),s("br"),t._v("\n引擎：负责整个程序的编译和执行过程"),s("br"),t._v("\n作用域：收集维护所有声明的变量并负责提供查询,作用域会在全局作用域基础上进行嵌套，栈数据结构类似")]),t._v(" "),s("p",[t._v("以"),s("code",[t._v("var a = 2")]),t._v("为例，编译器会先查询作用域中是否存在a，若不存在则为a变量开辟内存，否则就忽略此语句，(对应变量提升)"),s("br"),t._v("\n接下来由引擎执行"),s("code",[t._v("a = 2")]),t._v("赋值操作，引擎首先进行LHS查询作用域中是否存在a变量，并进行赋值，若不存在则抛出异常")]),t._v(" "),s("p",[t._v("LHS查询：变量出现在赋值操作左侧时进行LHS，LHS尝试找到变量容器本身，若未找到，则会在全局作用域中创建该变量(非严格模式下)，或抛出ReferenceError(严格模式下)"),s("br"),t._v("\nRHS查询：变量出现在赋值操作右侧时进行RHS或非LHS情况下都算RHS，RHS找到变量的值即可，若找不到变量引擎则会抛出ReferenceError")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例代码中LHS有3处，RHS有4处  ")]),t._v("\n")])])]),s("h2",{attrs:{id:"词法作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域"}},[t._v("#")]),t._v(" 词法作用域")]),t._v(" "),s("p",[t._v("词法作用域由书写代码时变量和块作用域的位置所决定"),s("br"),t._v("\neval()函数通过动态的插入代码来修改(欺骗)作用域，与之类似的setTimeout()、setInterval()、new Function()等函数都可以通过传入字符串的方式动态创建函数，因此也可以用来修改作用域(不推荐使用)  /ps：严格模式下eval有自己的词法作用域，无法修改其他作用域"),s("br"),t._v("\nwith语句通过包含对象让语句块中可以快捷的访问对象的属性，相当于修改了作用域，若在块中对属性进行赋值，而该对象中没有对应的属性，则会无意中创建了同名的全局变量，而对象的属性则赋值失败，其内部的var声明会将变量添加到with所处的函数作用域中；")]),t._v(" "),s("p",[t._v("eval和with都会被严格模式限制，引擎无法在编译时对作用域查找进行优化，因此使用这两种模式也会带来性能问题")]),t._v(" "),s("h2",{attrs:{id:"函数作用域和块作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域和块作用域"}},[t._v("#")]),t._v(" 函数作用域和块作用域")]),t._v(" "),s("h2",{attrs:{id:"todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[t._v("#")]),t._v(" TODO")]),t._v(" "),s("p",[t._v("学习中。。。")])])}),[],!1,null,null,null);a.default=n.exports}}]);