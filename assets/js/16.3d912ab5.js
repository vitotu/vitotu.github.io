(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{458:function(e,t,s){"use strict";s.r(t);var a=s(62),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"linux使用笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux使用笔记"}},[e._v("#")]),e._v(" Linux使用笔记")]),e._v(" "),s("p",[e._v("以Ubuntu为例")]),e._v(" "),s("h2",{attrs:{id:"ubuntu配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu配置"}},[e._v("#")]),e._v(" Ubuntu配置")]),e._v(" "),s("h3",{attrs:{id:"ubuntu环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu环境变量"}},[e._v("#")]),e._v(" ubuntu环境变量")]),e._v(" "),s("p",[e._v("设置环境变量有四个地方\n/etc/profile  : 所有用户login shell载入配置\n~/.profile    : 当前用户login shell载入配置\n/etc/bash.bashrc ： 所有用户non-login shell载入配置\n~/.bashrc     : 当前用户non-login shell载入配置")]),e._v(" "),s("h4",{attrs:{id:"shell模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell模式"}},[e._v("#")]),e._v(" shell模式")]),e._v(" "),s("ul",[s("li",[e._v("交互式login shell：需要登录的输入命令立即反馈输出的shell")]),e._v(" "),s("li",[e._v("非交互式login shell：需要登录但不与用户进行交互的shell(运行shell脚本)")]),e._v(" "),s("li",[e._v("交互式non-login shell：不需要登录的输入命令立即反馈输出的shell")]),e._v(" "),s("li",[e._v("非交互式non-login shell：不需要登录但不与用户进行交互的shell(运行shell脚本)")])]),e._v(" "),s("p",[e._v("通常用户打开shell为交互式shell，输入命令立即反馈输出，而非交互式则是shell脚本运行的环境")]),e._v(" "),s("p",[e._v("用户初次登录系统时会生成login shell扫描依次/etc/profile;~/.bash_profile;~/.bash_??;~/.profile;等文件载入初始的环境变量等配置")]),e._v(" "),s("p",[e._v("当用户使用gui打开新的shell时通常打开的时交互式non-login shell(不需要登录)，此时系统会在登录的环境变量基础上扫描/etc/bash.bashrc;~/.bashrc文件载入环境变量等配置")]),e._v(" "),s("p",[e._v("另外针对某个shell，若增加了环境变量，但没有删除，则该变量将会一直存在与此shell环境中，因此从bashrc文件中删除环境变量定义的代码，并运行source bashrc命令后该环境变量将不会消失，但重新打开新的shell时会重新载入bashrc文件，因此该变量将不存在于新的shell")]),e._v(" "),s("p",[e._v("判断当前shell是login shell 或non-login shell的方法：在当前shell运行指令"),s("code",[e._v("echo $0")]),e._v("若返回结果为-bash则为login shell，若是bash时则是non-login shell")]),e._v(" "),s("p",[e._v("另外/etc/profile还会直接运行/etc/profile.d目录下的所有非交互式.sh脚本文件，~/.profile文件也会载入~/.bashrc文件中的配置")]),e._v(" "),s("p",[e._v("其中/etc/profile需重启或注销生效，若使用"),s("code",[e._v("source /etc/profile")]),e._v("指令，仅对当前shell立即生效，~/.profile相同")]),e._v(" "),s("p",[e._v("而/etc/bash.bashrc使用source指令后立即生效，~/.bashrc相同")]),e._v(" "),s("p",[e._v("/etc/bash.bashrc的设置针对所有用户包括超级用户su;~/.bashrc仅针对当前用户有效")]),e._v(" "),s("p",[e._v("/etc/profile的设置实测仅针对登录用户有效")]),e._v(" "),s("p",[e._v("其中/etc/profile中指定运行/etc/profile.d/目录(若存在)下的所有非交互式sh脚本也可进行环境变量修改")]),e._v(" "),s("h4",{attrs:{id:"特殊的shell变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊的shell变量"}},[e._v("#")]),e._v(" 特殊的shell变量")]),e._v(" "),s("p",[e._v("结合语句案例解析："),s("code",[e._v('if [ "${-#*i}" != "$-"]')]),s("br"),e._v("\n此与语句用于判断当前shell是否不是交互式shell,"),s("code",[e._v("$-")]),e._v("是特殊变量，官方文档中定义为：")]),e._v(" "),s("blockquote",[s("p",[e._v("(Hyphen.) Expands to the current option flags (the single-letter option names concatenated into a string) as specified on invocation, by the set special built-in command, or implicitly by the shell.")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_05_02",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文献"),s("OutboundLink")],1),s("br"),e._v("\n如"),s("code",[e._v("echo $-")]),e._v("可能输出himBHs，表示当前shell的-h,-m,-B,-H选项启用,而-i表示可交互式shell,-s表示从标准输入读取数据"),s("br"),e._v("\n而"),s("code",[e._v('echo "${-#*i}"')]),e._v('是对参数"-"进行操作，官方文档定义的模式:')]),e._v(" "),s("blockquote",[s("p",[e._v("${parameter#[word]}")]),e._v(" "),s("blockquote",[s("p",[e._v("Remove Smallest Prefix Pattern. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the smallest portion of the prefix matched by the pattern deleted. If present, word shall not begin with an unquoted '#'.")])])]),e._v(" "),s("blockquote",[s("p",[e._v("${parameter##[word]}")]),e._v(" "),s("blockquote",[s("p",[e._v("Remove Largest Prefix Pattern. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the largest portion of the prefix matched by the pattern deleted.")])])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文献"),s("OutboundLink")],1),e._v("，该语句将删除-中的前缀直到遇到第一个i(删除部分包括i)")]),e._v(" "),s("h4",{attrs:{id:"代理配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理配置"}},[e._v("#")]),e._v(" 代理配置")]),e._v(" "),s("p",[e._v("编辑/etc/profile文件将对所有用户生效\nprofile中shell命令将引导运行profile.d目录中的所有sh脚本\n因此也可以将代理配置写到profile.d目录中的shell脚本中")]),e._v(" "),s("p",[e._v("通过设置all_proxy、ftp_proxy、http_proxy、https_proxy、no_proxy并export这些环境变量来设置系统上网代理服务器")]),e._v(" "),s("h3",{attrs:{id:"网络篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络篇"}},[e._v("#")]),e._v(" 网络篇")]),e._v(" "),s("p",[e._v("curl可用于模拟get、post请求等网络请求")]),e._v(" "),s("p",[e._v("查看网络端口占用情况"),s("code",[e._v("netstat -ntlp")])]),e._v(" "),s("h3",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),s("p",[e._v("挂起后台运行指定的脚本"),s("code",[e._v("nohup <脚本及运行参数> > <输出log文件> 2>&1 &")]),e._v("，示例："),s("br"),e._v("\n后台挂起test.py程序"),s("br"),e._v(" "),s("code",[e._v("nohup test.py --arg1 > runlog.out 2>&1 &")]),e._v("\n挂起test.py程，将运行log输出到runlog.out文件中，将标准错误(2)重定向(>)标准输出(&1)中也就是屏幕上，组合起来即为2>&1")]),e._v(" "),s("h3",{attrs:{id:"shell编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell编程"}},[e._v("#")]),e._v(" shell编程")]),e._v(" "),s("p",[e._v("获取shell表达式的输出并重定向到a变量中"),s("br"),e._v(" "),s("code",[e._v("a=$(<shell表达式>)")]),s("br"),e._v("\n判断路径下是否有该目录存在")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("某路径目录"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"目录存在"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"目录不存在"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n")])])]),s("h4",{attrs:{id:"xargs指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xargs指令"}},[e._v("#")]),e._v(" xargs指令")]),e._v(" "),s("p",[e._v("将标准输入转换为命令行参数，"),s("code",[e._v("|")]),e._v("管道连接符将左侧的标准输出连接到右边的标准输入，但部分命令行工具不支持标准输入作为参数，仅支持命令行参数，因此xargs通常与管道符一起使用"),s("br"),e._v("\n如："),s("code",[e._v('echo "output" | xargs echo')]),e._v("，xargs调用形式为"),s("code",[e._v("xargs [-options] [command]")]),s("br"),e._v("\n单独使用xargs命令等同于"),s("code",[e._v("xargs echo")]),e._v("并等待用户输入，按下ctrl+d结束输入，并输出用户输入的内容"),s("br"),e._v("\nxargs默认使用空格"),s("code",[e._v("\\s")]),e._v("和换行符"),s("code",[e._v("\\n")]),e._v("作为分隔符，拆分标准输入为多个命令行参数，通过"),s("code",[e._v("-d")]),e._v("参数可更改分隔符")]),e._v(" "),s("h2",{attrs:{id:"ubuntu下mysql8-0的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu下mysql8-0的使用"}},[e._v("#")]),e._v(" ubuntu下mysql8.0的使用")]),e._v(" "),s("h3",{attrs:{id:"忘记root密码解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忘记root密码解决方案"}},[e._v("#")]),e._v(" 忘记root密码解决方案")]),e._v(" "),s("p",[e._v("使用系统提供的临时账户登录去修改root账户密码：\n"),s("code",[e._v("sudo cat /etc/mysql/debian.cnf")]),e._v("\n复制其中的账户名和密码进行登录")]),e._v(" "),s("div",{staticClass:"language-code extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("alter user 'root'@'localhost' identified with mysql_native_password by '新密码';\nflush privileges; --立即刷新进内存 \n")])])]),s("h3",{attrs:{id:"其他账户管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他账户管理"}},[e._v("#")]),e._v(" 其他账户管理")]),e._v(" "),s("p",[e._v("创建账号和密码\n"),s("code",[e._v("create user '用户名'@'ip地址' identified by '密码';")]),e._v("\n开放账户全部权限\n"),s("code",[e._v("grant all on *.* to '用户名'@'ip地址' with grant option;")]),e._v("\n删除权限\n"),s("code",[e._v("revoke all privileges on 数据库名.表名 from '用户名'@'ip地址';")]),e._v("\n删除用户\n"),s("code",[e._v("drop user '用户名'@'ip地址'")])]),e._v(" "),s("h2",{attrs:{id:"docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" docker")]),e._v(" "),s("p",[e._v("常用命令：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("镜像名"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 拉取镜像")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -it \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("容器id"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /bin/bash "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以交互式shell的方式进入正在运行的容器")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("本地文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("容器id"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("容器路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 向docker容器中复制本机文件")]),e._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文档"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"ssh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh"}},[e._v("#")]),e._v(" ssh")]),e._v(" "),s("h3",{attrs:{id:"ssh配置代理访问github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh配置代理访问github"}},[e._v("#")]),e._v(" ssh配置代理访问github")]),e._v(" "),s("ul",[s("li",[e._v("win10环境: ~/.ssh/config 文件中添加以下内容(程序路径替换为自己的git安装路径)")])]),e._v(" "),s("div",{staticClass:"language-.ssh/config extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('Host github.com\n  ProxyCommand "C:\\Program Files\\Git\\mingw64\\bin\\connect.exe" -S 127.0.0.1:1080 %h %p\n')])])]),s("p",[e._v("其中：\n"),s("code",[e._v("Host github.com")]),e._v(" ： 仅github使用该代理\n"),s("code",[e._v("-S")]),e._v(" 选项指sock协议默认sock5，指向代理服务器ip及端口")]),e._v(" "),s("ul",[s("li",[e._v("Ubuntu环境: ~/.ssh/config 文件中添加以下内容")])]),e._v(" "),s("div",{staticClass:"language-.ssh/config extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Host github.com\n\tUser git\n\tProxyCommand nc -X 5 -x 192.168.9.100:10808 %h %p\n")])])]),s("p",[e._v("利用了nc进行代理，其中\n"),s("code",[e._v("-X 5")]),e._v(" 参数表示选定了sock5作为通信协议")]),e._v(" "),s("h2",{attrs:{id:"ubuntu搭建微信小程序开发环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu搭建微信小程序开发环境"}},[e._v("#")]),e._v(" ubuntu搭建微信小程序开发环境")])])}),[],!1,null,null,null);t.default=r.exports}}]);