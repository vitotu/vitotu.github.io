import{_ as n,c as s,o as a,d as p}from"./app-xTZnRY6u.js";const t={},o=p(`<h1 id="手写实现虚拟dom和diff算法" tabindex="-1"><a class="header-anchor" href="#手写实现虚拟dom和diff算法"><span>手写实现虚拟DOM和diff算法</span></a></h1><p>假设节点中文本节点和元素子节点不同时出现，即不存在<code>&lt;div&gt;abc&lt;p&gt;xyz&lt;/p&gt;&lt;/div&gt;</code>这种情况<br> 简单的html片段如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click to change dom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">VDom</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@description</span>: 简单的h函数，将token转换为VNode对象，将对入参进行严格检查</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">sel</span> 标签名</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">data</span> 标签属性</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token operator">|</span>Number<span class="token operator">|</span>Array<span class="token operator">|</span>h<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token parameter">c</span> 文本节点或子节点数组</span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>VNode<span class="token punctuation">}</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 对tokens的递归交由外部实现</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;h only accept 3 args&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> c <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 检测到文本节点</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 检测到子节点列表循环处理</span></span>
<span class="line">        <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;sel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;array c must be h item&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token comment">// 只有数组中的每项满足是对象类型且含有sel属性时才放入children收集器中</span></span>
<span class="line">          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token comment">// 假设仅存在子节点，不同时含文本节点等复杂情况</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> c <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;sel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 若为对象类型且有sel属性，则仅有一个子节点，对应c为非数组情况</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 若所有支持的情况都不满足则抛出错误</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;typeof c not support&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@description</span>: 在此函数中进行新旧虚拟DOM比较</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>VNode<span class="token punctuation">}</span></span> <span class="token parameter">oldVNode</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>VNode<span class="token punctuation">}</span></span> <span class="token parameter">newVNode</span></span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">undefined</span><span class="token punctuation">}</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 旧的节点不是VNode虚拟节点则基于旧节点创建一个虚拟节点</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        oldVNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 命中规则，判定新旧VNode相同，进行更细致的比较</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">patchVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 不是同一个虚拟节点，直接插入新的节点并删除旧节点</span></span>
<span class="line">        <span class="token keyword">let</span> newVNodeElm <span class="token operator">=</span> VDom<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode <span class="token operator">&amp;&amp;</span> newVNodeElm<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 插入到旧节点之前</span></span>
<span class="line">          oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newVNodeElm<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除旧的节点</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">patchVNode</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 在此函数中进行更细致的比较</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>oldVNode <span class="token operator">===</span> newVNode<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 新旧节点指向内存中相同的对象则不用更新</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 新VNode仅有文本节点时, 直接判断新旧节点的文本是否相同</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> oldVNode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 若不同直接进行更新，旧VNode的子节点已没有意义</span></span>
<span class="line">          oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>text<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 新VNode中不存在文本节点(假定文本节点不与子节点同时存在)</span></span>
<span class="line">        <span class="token comment">// 若旧VNode中存在子节点，则对子节点进行更新</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          VDom<span class="token punctuation">.</span><span class="token function">updateChildren</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 若旧VNode中不存在子节点则循环的新VNode中的所有子节点添加到DOM中</span></span>
<span class="line">          oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> dom <span class="token operator">=</span> VDom<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 基于VNode对象创建孤儿(未挂在的)真实DOM节点</span></span>
<span class="line">      <span class="token keyword">let</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        domNode<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vNode<span class="token punctuation">.</span>text<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> ch <span class="token operator">=</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">let</span> chDom <span class="token operator">=</span> VDom<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          domNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>chDom<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      vNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode<span class="token punctuation">;</span> <span class="token comment">// 将创建的孤儿节点挂在到VNode对象上</span></span>
<span class="line">      <span class="token keyword">return</span> vNode<span class="token punctuation">.</span>elm<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@description</span>: 使用左右双指针法对两个子节点序列进行递归比较，并操作对应真实DOM更新</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">parentElm</span> 旧VNode序列对应真实DOM的父节点</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">[</span>VNode<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">oldCh</span> 旧VNode序列</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">[</span>VNode<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">newCh</span> 新VNode序列</span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">undefined</span><span class="token punctuation">}</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 相同节点判断</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">isSameVNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>sel <span class="token operator">===</span> b<span class="token punctuation">.</span>sel <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key<span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 空节点判断</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">isVoidVNode</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> v <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 定义新旧子节点的左指针 oldLeftIndex, newLeftIndex</span></span>
<span class="line">      <span class="token keyword">let</span> oldLI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> newLI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 定义新旧节点的右指针 oldRightIndex, newRightIndex</span></span>
<span class="line">      <span class="token keyword">let</span> oldRI <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> newRI <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> keyMap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span><span class="token punctuation">(</span>oldLI <span class="token operator">&lt;=</span> oldRI <span class="token operator">&amp;&amp;</span> newLI <span class="token operator">&lt;=</span> newRI<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isVoidVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> oldLI<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 空节点检查</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isVoidVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> oldRI<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isVoidVNode</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> newLI<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isVoidVNode</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newRI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> newRI<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 新旧序列左指针对应的VNode判定相等，递归的进行更精细化的比较，并移动指针</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          VDom<span class="token punctuation">.</span><span class="token function">patchVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldLI<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">          newLI<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token comment">// 新旧序列右指针对应的VNode判定相等，递归进行更精细化的比较，并移动指针</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newRI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          VDom<span class="token punctuation">.</span><span class="token function">patchVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newRI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldRI<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">          newRI<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token comment">// 旧序列的左指针与新序列的右指针对应VNode判定相等，递归进行更精细化的比较，</span></span>
<span class="line">        <span class="token comment">// 同时在DOM中将旧VNode对应的节点移动到旧序列右指针VNode对应的节点后方，移动指针</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newRI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          VDom<span class="token punctuation">.</span><span class="token function">patchVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newRI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldLI<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">          newRI<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token comment">// 旧序列的右指针与新序列的左指针对应VNode判定相等，队规进行更精细化的比较，</span></span>
<span class="line">        <span class="token comment">// 同时在DOM中将旧VNode对应的节点移动到旧序列左指针VNode对应的节点前方，移动指针</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          VDom<span class="token punctuation">.</span><span class="token function">patchVNode</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>oldRI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldRI<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">          newLI<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> </span>
<span class="line">        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 若左右指针均未匹配上，在旧序列左右指针范围内通过key对新序列左指针对应节点进行查找</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 辅助查找对象为空则，先填充辅助查找对象</span></span>
<span class="line">            keyMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldLI<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldRI<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">const</span> key <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span></span>
<span class="line">              <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> keyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 简历旧序列中范围内key到指针位置索引的映射</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token keyword">const</span> curOld <span class="token operator">=</span> keyMap<span class="token punctuation">[</span>newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 通过新序列左指针的key取得旧序列中相应key的索引位置</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span>curOld <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 若该位置不存在则直接将新VNode插入到真实DOM对应旧序列VNode节点之前的位置上</span></span>
<span class="line">            parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>VDom<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 若该位置存在，则说明找到与新序列对应的VNode，精细化比较并移动节点，将旧序列中对应位置置位undefined以便后续跳过该位置</span></span>
<span class="line">            <span class="token keyword">const</span> elmToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>curOld<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            VDom<span class="token punctuation">.</span><span class="token function">patchVNode</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">,</span> newCh<span class="token punctuation">[</span>newLI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            oldCh<span class="token punctuation">[</span>curOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">            parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          newLI<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 新VNode序列左指针处理完毕，右移一位</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>newLI <span class="token operator">&lt;=</span> newRI<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 如果新序列中还有节点剩余，则说明旧序列先遍历完成，循环插入剩余的新节点</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newLI<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldRI<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>VDom<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">[</span>oldLI<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token comment">// 若是旧序列中还有节点剩余，则说明新序列先遍历完成，循环删除剩余的旧节点</span></span>
<span class="line">      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>oldLI <span class="token operator">&lt;=</span> oldRI<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldLI<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldRI<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 测试用例</span></span>
<span class="line">      <span class="token comment">// TODO:在测试用例中递归的调用VDom.h函数，此处可以继续优化</span></span>
<span class="line">      <span class="token comment">// VDom.h函数直接利用tokens生成VNode对象，假设文本节点和子节点不同时出现</span></span>
<span class="line">      <span class="token keyword">const</span> eVNode1 <span class="token operator">=</span> VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      VDom<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> eVNode1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// diff算法并渲染到真实DOM上</span></span>
<span class="line">      <span class="token keyword">const</span> eVNode2 <span class="token operator">=</span> VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;Q&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;Z&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        VDom<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>eVNode1<span class="token punctuation">,</span> eVNode2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发事件并渲染真实DOM</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>sel <span class="token operator">=</span> sel<span class="token punctuation">;</span> <span class="token comment">// 标签名</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// </span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span> <span class="token comment">// 子节点</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span> <span class="token comment">// 文本节点</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>elm <span class="token operator">=</span> elm<span class="token punctuation">;</span> <span class="token comment">// 虚拟节点对应的真实元素</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> data<span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token comment">// key值</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  VDom<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),e=[o];function c(l,i){return a(),s("div",null,e)}const k=n(t,[["render",c],["__file","vDom.html.vue"]]),r=JSON.parse('{"path":"/vue/vue2plus/vDom.html","title":"手写实现虚拟DOM和diff算法","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1652092780000,"contributors":[{"name":"vito","email":"vitotu@qq.com","commits":2}]},"filePathRelative":"vue/vue2plus/vDom.md"}');export{k as comp,r as data};
