import{_ as s,c as e,o as a,d as n}from"./app-CE5EAlOo.js";const t={},i=n(`<h1 id="vuex基础到原理" tabindex="-1"><a class="header-anchor" href="#vuex基础到原理"><span>vuex基础到原理</span></a></h1><h2 id="基本概念与性质" tabindex="-1"><a class="header-anchor" href="#基本概念与性质"><span>基本概念与性质</span></a></h2><p>Vuex是vue的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 Vuex实现了一个单项数据流，通过创建一个全局的 State 数据，组件通过commit操作触发mutation或通过dispatch触发action间接触发mutation来操作state中的数据<br> 通常Mutation用于同步的修改state中的数据，而action用于异步的使用mutation，保证不会有写入冲突，并且所有状态变更都能被调试工具跟踪到便于调试<br> state的响应式借用vue组件的data选项实现，getter方法及响应式则与vue组件的computed属性相似<br> 在开启严格模式的情况下，若state状态发生变更且不是由mutation引起的，则会抛出错误，此功能有一定的性能消耗，因此仅推荐在开发环境启用，strict默认值为false</p><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h2><p>vuex用于同一管理全局组件共享的数据,<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">官方文档</a><br><img src="https://vuex.vuejs.org/vuex.png" alt="vuex.png"></p><ul><li>绑定vuex插件</li></ul><p>vuex需要在vm实例化时,绑定实例对象到vm上,因此通常的做法时,创建一个js文件引入vue和vuex,在文件中使用Vue.use(Vuex)应用插件,随后创建并暴露<code>const store = new Vuex.Store({actions, mutations,state})</code>对象.<br> 在main.js文件中引入该对象,并配置到vue实例配置对象中<code>new Vue({...,store})</code></p><ul><li><p>vuex配置项 如上图vuex常用配置项有</p><ul><li>actions: 响应组件中对应的<code>this.$store.dispatch(&#39;key&#39;, params)</code>动作(通常与后端api进行交互，异步的提交mutation操作数据)</li><li>mutations: 响应组件或actions中的<code>this.$store.commit(&#39;KEY&#39;, params)</code>动作,用于同步操作数据</li><li>state: 用于存储数据</li><li>getters: 用于将state中的数据加工,类似于组件的计算属性，通过属性方式访问时会缓存结果，通过方法的方式访问时，每次都会进行调用</li><li>modules：用于配置其他子模块，子模块中可配置namespaced开启命名空间</li><li>plugins:<code>Array&lt;function&gt;</code>，所有的function都将被传入store实例用于插件功能扩展，插件中不允许直接修改state</li></ul></li><li><p>vuex库上的map方法</p></li></ul><p><code>mapState([&#39;state1&#39;, &#39;state2&#39;])</code>和<code>mapGetters([&#39;getter1&#39;])</code>均可用于生成计算属性从state或getters中获取对应的数据<br><code>mapMutations({fun1:&#39;MUTA1&#39;, fun2:&#39;MUTA2&#39;})</code>和<code>mapActions({fun1:&#39;act1&#39;, fun2:&#39;act2&#39;})</code>可用于生成mutations或actions中的方法</p><p>上述map*方法返回值均为对象,需要配合解构赋值使用,这些方法均支持数组或对象的方式传参</p><ul><li>vuex模块化</li></ul><p>将不同种类的数据拆分成文件a.js和b.js</p><div class="language-JavaScript line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre><code><span class="line">// store/a.js  </span>
<span class="line">export default {  </span>
<span class="line">  namespaced: true, // 用于与b文件的数据进行区分  </span>
<span class="line">  actions...,  </span>
<span class="line">  mutations...,  </span>
<span class="line">  state...,  </span>
<span class="line">  ...  // 更多配置项见官方文档  </span>
<span class="line">}  </span>
<span class="line">// store/index.js  </span>
<span class="line">import a from &#39;./a&#39;  </span>
<span class="line">export default new Vuex.Store({  </span>
<span class="line">  modules:{a:a, b:b}  </span>
<span class="line">})  </span>
<span class="line">// 调用方  </span>
<span class="line">this.$store.state.a.state1 // 获取state数据  </span>
<span class="line">this.$store.getters[&#39;a/get1&#39;] // 获取a命名空间中的get1  </span>
<span class="line">this.$store.dispatch(&#39;a/act1&#39;, params) // 触发a命名空间中act1,并传入params参数  </span>
<span class="line">this.$store.commit(&#39;a/MUTA1&#39;, params) // 与上类似  </span>
<span class="line">...mapState(&#39;a&#39;, {val1:&#39;state1&#39;, val2:&#39;state2&#39;}) // 使用解构赋值放在对应的方法中  </span>
<span class="line">...mapGetters(&#39;a&#39;, {val1:&#39;getter1&#39;})  </span>
<span class="line">...mapMutations(&#39;a&#39;, [&#39;MUTA1&#39;, &#39;MUTA2&#39;])  </span>
<span class="line">...mapActions(&#39;a&#39;, [&#39;act1&#39;, &#39;act2&#39;])  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下(namespaced为false)的情况，模块内部的mutations、actions、getters是注册到全局命名空间的，仅state是局部作用<br> vuex的根模块和子模块之间是通过树形结构组织起来的</p><h2 id="源码核心简读" tabindex="-1"><a class="header-anchor" href="#源码核心简读"><span>源码核心简读</span></a></h2><p>源码<a href="https://github.com/vuejs/vuex.git" target="_blank" rel="noopener noreferrer">项目地址</a><br> 查看版本3.6.2的src目录主要文件：<br> ├── module // vuex模块化处理 主要是对state的处理，最后构建成一棵 module tree<br> │ ├── module.js // 主要导出一个Module类 vuex中模块的功能<br> │ └── module-collection.js // 主要导出一个ModuleCollection类<br> ├── plugins // 两个插件<br> │ ├── devtool.js // 调试<br> │ ├── logger.js // 日志<br> ├── helpers.js // map系列辅助函数 api<br> ├── index.esm.js // 用于es module的打包<br> ├── index.js // 入口文件 抛出 Store和 mapActions 等api 用于commonjs的打包<br> ├── mixin.js // 提供install方法，用于注入$store<br> ├── store.js // vuex的核心代码 store 仓库<br> ├── util.js // 一些工具函数库，如deepClone、isPromise、assert</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// vuex的使用需要经历以下阶段(伪代码中省略了需要引入的库)</span></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插件机制</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>options<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 实例化store</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 挂载到vm实例上</span></span>
<span class="line">  store<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局安装</li></ul><p>index.js文件中暴露了源自store.js的Store和install方法，以及辅助函数和日志插件</p><p>install方法中判断是否重复安装否则利用Vue.mixin将vuexInit混入beforeCreate钩子中</p><p>vuexInit方法将vue的options.store挂载到<code>this.$store</code>上,若不存在则从父组件的<code>$store</code>上取，借助vue组件实例化过程能够保证所有组件中<code>$store</code>指向同一对象store</p><ul><li>实例化Store</li></ul><p>Store中实例化了一个vue对象，借助该vue对象的data和computed属性实现state和getters的响应式，内部维持了一个ModuleCollection对象，用于收集子模块依赖和处理namespaced命名空间，保存module树<br> Store实例提供了commit、dispatch、get/set state等方法，在构造函数中主要过程有：</p><ol><li>利用ModuleCollection递归的注册子模块形成模块树</li><li>installModule函数将options(state、actions、mutations等配置)依次注册到store对象上，其中state为树形结构，而mutation、action等方法均以namespace字符串为key进行wrap并挂载到store的对应属性上，对于childModule则进行递归调用注册安装</li><li>resetStoreVM函数中新建一个vm实例利用data和computed属性设置state和getters的响应式，并在oldVM存在时销毁oldVM</li></ol><p>ps：不要在生产环境将strict设置为true，strict通过<code>_withCommit</code>拦截非commit的方式修改state的行为，需要深度监听state树，严重影响性能<br> 不可在v-model中使用store属性，因为严格模式中仅支持使用commit方法修改store属性，需要进行双向绑定时需要通过<code>get/set</code>的computed属性或通过监听input或change事件去修改</p><ul><li>模块动态注册与卸载</li></ul><p>调用store实例的registerModule(path, module)方法可动态注册模块，逻辑与初始化store逻辑相同，先挂载到模块树上，然后调用installModule和resetStoreVM方法<br> unregisterModule(path)用于卸载动态注册的模块，不可卸载创建store时的注册的模块，方法中将通过Vue.delete删除state，重置并重载getters、mutations等方法，从模块树中删除该模块</p><h2 id="手写实现" tabindex="-1"><a class="header-anchor" href="#手写实现"><span>手写实现</span></a></h2><p>TODO</p>`,29),l=[i];function o(p,c){return a(),e("div",null,l)}const u=s(t,[["render",o],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/vue/vuex/","title":"vuex基础到原理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基本概念与性质","slug":"基本概念与性质","link":"#基本概念与性质","children":[]},{"level":2,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]},{"level":2,"title":"源码核心简读","slug":"源码核心简读","link":"#源码核心简读","children":[]},{"level":2,"title":"手写实现","slug":"手写实现","link":"#手写实现","children":[]}],"git":{"updatedTime":1659969744000,"contributors":[{"name":"vito","email":"vitotu@qq.com","commits":7}]},"filePathRelative":"vue/vuex/README.md"}');export{u as comp,d as data};
