import{_ as n,c as s,o as a,d as e}from"./app-DMpemI32.js";const t={},p=e(`<h1 id="koa基础" tabindex="-1"><a class="header-anchor" href="#koa基础"><span>koa基础</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>koa是在express基础上发展而来的node服务框架，具有轻量，易于开发的特点(通过async避免嵌套回调)</p><h2 id="koa基础使用" tabindex="-1"><a class="header-anchor" href="#koa基础使用"><span>koa基础使用</span></a></h2><p>koa依赖node 7.6.0以上版本，依赖async语法支持</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>安装koa<code>npm i koa</code>，<br> 创建service.js文件，写入如下内容</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;hello koa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动koa<code>node service.js</code>，访问3000端口即可获得响应字符串<br> 开发环境中推荐使用nodemon启动服务，可支持热重载</p><h2 id="中间件middleware" tabindex="-1"><a class="header-anchor" href="#中间件middleware"><span>中间件middleware</span></a></h2><p>因此处于http的request和response之间，因此称为中间件；<br> koa的大部分功能由中间件完成,上例中main就是一个中间件。<br> 中间件默认接收context和next函数两个参数，</p><h3 id="中间件栈" tabindex="-1"><a class="header-anchor" href="#中间件栈"><span>中间件栈</span></a></h3><p>中间件之间按照书写顺序级联，<br> 遇到next()调用时，入栈并暂时将执行权交给下一个中间件，<br> 最后出栈，逐步向上恢复next后方的代码执行，过程类似于DOM的事件捕获与事件冒泡</p><h3 id="中间件合成" tabindex="-1"><a class="header-anchor" href="#中间件合成"><span>中间件合成</span></a></h3><p>中间件过多时，可通过koa-compose模块将多个中间件合为一个</p><h2 id="app-listen" tabindex="-1"><a class="header-anchor" href="#app-listen"><span>app.listen</span></a></h2><p><code>app.listen(3000)</code>是<code>http.createServer(app.callback()).listen(3000)</code>的语法糖</p><h2 id="context上下文" tabindex="-1"><a class="header-anchor" href="#context上下文"><span>context上下文</span></a></h2><p>koa Context 将node的request和response封装到了单个context对象中，<br> 上例中间件的第一个参数ctx即为上下文,<code>ctx.request</code>和<code>ctx.response</code>分别为请求和响应对象。<br> 为了方便使用许多上下文及方法被委托给了ctx(类似vue中_data属性中的数据被委托到组件上)，如<code>ctx.type</code>, <code>ctx.length</code>,<code>ctx.body</code>委托了response对象,<code>ctx.path</code>, <code>ctx.method</code> 委托了request对象</p><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h2><p>通过<code>ctx.request.path</code>可实现简单的原生路由<br> 也可以使用koa-route模块：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-route&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">about</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;&lt;a href=&quot; &quot;&gt;Index Page&lt;/a &gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ctx.response.redirect(&#39;/&#39;) // 重定向到&#39;/&#39;路由</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> main<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> about<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态资源" tabindex="-1"><a class="header-anchor" href="#静态资源"><span>静态资源</span></a></h2><p>向外暴露静态资源可通过koa-static模块</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> serve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token function">serve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><p>响应错误信息可用ctx.throw(500)方法，<br> 在最外层的中间件中使用try...catch 用于捕获所有中间件的错误，并进行处理，<br> 运行过程中出错，koa也会触发一个error事件，通过以下代码监听并处理error事件：<code>app.on(&#39;error&#39;, (err,ctx) =&gt; {} )</code><br> 被try...catch捕获的error不会触发error事件，可通过ctx.app.emit()手动触发error事件</p><p><a href="http://koajs.cn/#" target="_blank" rel="noopener noreferrer">官方文档</a><br><a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener noreferrer">阮一峰的koa教程</a></p>`,28),o=[p];function c(l,i){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","koa基础.html.vue"]]),d=JSON.parse('{"path":"/nodejs/koa%E5%9F%BA%E7%A1%80.html","title":"koa基础","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"koa基础使用","slug":"koa基础使用","link":"#koa基础使用","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]}]},{"level":2,"title":"中间件middleware","slug":"中间件middleware","link":"#中间件middleware","children":[{"level":3,"title":"中间件栈","slug":"中间件栈","link":"#中间件栈","children":[]},{"level":3,"title":"中间件合成","slug":"中间件合成","link":"#中间件合成","children":[]}]},{"level":2,"title":"app.listen","slug":"app-listen","link":"#app-listen","children":[]},{"level":2,"title":"context上下文","slug":"context上下文","link":"#context上下文","children":[]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[]},{"level":2,"title":"静态资源","slug":"静态资源","link":"#静态资源","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]}],"git":{"updatedTime":1651985752000,"contributors":[{"name":"vito","email":"vitotu@qq.com","commits":2}]},"filePathRelative":"nodejs/koa基础.md"}');export{u as comp,d as data};
