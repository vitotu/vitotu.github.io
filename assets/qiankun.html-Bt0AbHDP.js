import{_ as s,c as a,a as p,o as t}from"./app-rL3tKifj.js";const e={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="微前端之qiankun框架" tabindex="-1"><a class="header-anchor" href="#微前端之qiankun框架"><span>微前端之qiankun框架</span></a></h1><p><a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noopener noreferrer">qiankun</a>是一个基于<a href="https://github.com/single-spa/single-spa" target="_blank" rel="noopener noreferrer">single-spa</a>的<a href="https://micro-frontends.org/" target="_blank" rel="noopener noreferrer">微前端</a>实现库</p><h2 id="微前端简介" tabindex="-1"><a class="header-anchor" href="#微前端简介"><span>微前端简介</span></a></h2><p>借鉴后端微服务的思想，微前端将复杂应用拆分，并采用主应用与子应用的组织方式构成复杂引用。<br> 微前端具备以下特点：</p><ul><li>技术栈无关：主应用不限制子应用的技术栈</li><li>独立开发，独立部署：子应用仓库独立，可独立开发，部署后主框架自动同步更新</li><li>增量升级：由于技术栈无关，因此适用于复杂系统的渐进式重构等重大调整</li><li>独立运行：每个子应用之间的状态隔离，运行时的状态不共享</li></ul><p>对于复杂应用和参与人员、团队较多的系统开发来说，微前端是个不错的解决方案</p><h2 id="qiankun" tabindex="-1"><a class="header-anchor" href="#qiankun"><span>qiankun</span></a></h2><p><a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noopener noreferrer">官方文档</a><br><a href="https://juejin.cn/post/6844904158085021704" target="_blank" rel="noopener noreferrer">qiankun解析博客</a><br> TODO：解析博客，源码阅读</p><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><p>基于single-spa封装，更加易用；<br> 技术栈无关，可以在任意技术栈开发的项目中引入qiankun；<br> html entry接入方式；<br> 样式隔离， 微应用之间的样式互不干扰；<br> js沙箱，微应用间的变量、事件互不冲突；<br> 资源预加载；<br> umi插件；</p><h3 id="主应用中的基本使用" tabindex="-1"><a class="header-anchor" href="#主应用中的基本使用"><span>主应用中的基本使用</span></a></h3><p>主应用中需要安装qiankun<br> TODO：主应用中也有生命周期函数，待完善</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 入口文件，通常是main.js中</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> registerMicroApps<span class="token punctuation">,</span> start<span class="token punctuation">,</span> loadMicroApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;qiankun&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getActiveRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">hash</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">registerMicroApps</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;react app&#39;</span><span class="token punctuation">,</span> <span class="token comment">// app name registered</span></span>
<span class="line">    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;//localhost:7100&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 微应用地址</span></span>
<span class="line">    <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">&#39;#yourContainer&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 微应用挂载节点</span></span>
<span class="line">    <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">&#39;/yourActiveRule&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 微应用激活条件</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 当主应用为history模式或部署在非根路径，且子应用为hash路由模式时，激活规则必须使用函数形式</span></span>
<span class="line">    <span class="token comment">// activeRule: getActiveRule(&#39;#/yourActiveRule2&#39;)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vue app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">scripts</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;//localhost:7100/main.js&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">&#39;#yourContainer2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">&#39;/yourActiveRule2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 当微应用中存在路由时，需调整主应用路由(包含前端路由和静态资源路由)将</span></span>
<span class="line">    <span class="token comment">// 激活条件下的所有路由重定向为微应用(挂载节点或地址)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// --也可在需要的地方手动加载微应用---</span></span>
<span class="line"><span class="token function">loadMicroApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;//localhost:7100&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">&#39;#yourContainer&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="微应用中的基础使用" tabindex="-1"><a class="header-anchor" href="#微应用中的基础使用"><span>微应用中的基础使用</span></a></h3><p>微应用中无需额外安装qiankun依赖，仅需在入口文件中导出生命周期钩子以便主应用在合适时机调用即可</p><ul><li>生命周期函数</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 使用vite打包时需要借助vite-plugin-qiankun插件，直接导出生命周期函数无效</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 仅在微应用初始化时调用一次</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;react app bootstraped&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 每次进入微应用都会调用</span></span>
<span class="line">  <span class="token comment">// 通常在此处触发应用的渲染方法</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从应用切出会调用此方法</span></span>
<span class="line">  <span class="token comment">// 此处卸载微应用实例</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 仅在loadMicroApp方式加载微应用时生效(可选)</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;update props&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span> <span class="token comment">// 从父应用中获取的容器，也可通过props传递其他参数</span></span>
<span class="line">  <span class="token comment">// 子应用实例化与挂载过程，以Vue为例，此处应运行new Vue().$mount()相关的代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 独立运行时调用</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的微应用生命周期<a href="https://single-spa.js.org/docs/building-applications/#registered-application-lifecycle" target="_blank" rel="noopener noreferrer">文档</a></p><ul><li>webpack调整</li></ul><p>除了暴露对应的生命周期函数钩子之外，微应用的打包配置需要做出相应的调整，以webpack为例:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> packageName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>packageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-[name]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">jsonpFunction</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">webpackJsonp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>packageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>public-path</li></ul><p>新增 public-path.js 文件并在入口文件中引入，用于修改运行时的 publicPath。(运行时的publicPath与构建时是不同的)</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// public-path.js</span></span>
<span class="line">  __webpack_public_path__ <span class="token operator">=</span> window<span class="token punctuation">.</span>__INJECTED_PUBLIC_PATH_BY_QIANKUN__<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>微应用路由调整</li></ul><p>微应用若有路由，其路由base需与activeRule保持一致</p><h3 id="路由调整" tabindex="-1"><a class="header-anchor" href="#路由调整"><span>路由调整</span></a></h3><p>如果主应用和微应用同时使用了路由，共用了url的状态，则需要调整对应的路由配置</p><p>以vue-router的使用为例，主要分为以下几种情况：</p><ul><li>主应用history路由，子应用hash路由</li></ul><p>此时主应用与子应用监听了不同的url变化情况，兼容性最好。 TODO：路由以及资源打包base路径调整方案待补充</p><ul><li>主应用history路由，子应用history路由</li></ul><p>主应用与子应用共用了url变化情况，若使用路由作为触发条件，则对应路由规则及其子路由配置都需重定向为对应容器：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 主应用路由注册配置</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/sub-app/&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 子应用路由激活条件</span></span>
<span class="line">  <span class="token literal-property property">component</span><span class="token operator">:</span> SubAppContainer<span class="token punctuation">,</span> <span class="token comment">// 子应用容器组件</span></span>
<span class="line">  <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 对应path子路径下所有情况均需导航到子应用容器组件或重定向为子应用容器</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token comment">// 以便子应用处理对应的路由</span></span>
<span class="line">      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/sub-app/:chapters*&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">component</span><span class="token operator">:</span>SubAppContainer<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 子应用在main.js入口文件中导入路由注册文件修改</span></span>
<span class="line"><span class="token keyword">import</span> routes form <span class="token string">&#39;routes&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入routes注册文件</span></span>
<span class="line"><span class="token function">addRouterPrefix</span><span class="token punctuation">(</span><span class="token string">&#39;/sub-app&#39;</span><span class="token punctuation">,</span> routes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动给每个配置路径添加对应前缀</span></span>
<span class="line"><span class="token comment">// 也可尝试通过base配置项添加前缀(更为推荐这种方式)</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 退出子应用时，通常会销毁对应的应用实例vm，如vm.$destroy()等</span>
<span class="line"> * 但main.js的作用域并未销毁，因此其导入的库及变量都存在</span>
<span class="line"> * 通过手动添加注册路公共前缀时，若判断是重新进入子应用则无需在此添加前缀</span>
<span class="line"> * 从而避免重复添加路由而导致子路由出错 </span>
<span class="line"> * PS: 此问题可能是使用vite打包，ESM导致</span>
<span class="line"> * </span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">let</span> reEnterFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">addRouterPrefix</span><span class="token punctuation">(</span><span class="token parameter">prefixPath<span class="token punctuation">,</span> routes</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reEnterFlag <span class="token operator">&amp;&amp;</span> prefixPath<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      i<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> i<span class="token punctuation">.</span>redirect <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token punctuation">.</span>redirect<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reEnterFlag<span class="token punctuation">)</span> reEnterFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>主应用hash路由，子应用history路由</li></ul><p>兼容性差，不推荐此方式<br> TODO：待完善方案</p><ul><li>主应用hash路由，子应用hash路由</li></ul><p>与主history，子history基本一致</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>子应用在打包部署时，对应的资源加载路径以及主应用配置的入口需要相互配合</p><p>子应用打包html中的资源引用一般为相对url，<br> 由于通过主应用访问，一般公共基础url与子应用部署地址不同，因此建议在打包配置中修改为完整的url，<br> 避免仅能加载到子应用的html而不能加载到资源</p><p>这部分也是public-path.js文件的最终目的</p></div><h3 id="应用间通信" tabindex="-1"><a class="header-anchor" href="#应用间通信"><span>应用间通信</span></a></h3><p>qiankun的微应用应按业务拆分，子应用应能独立运行，因此应用间通信应尽量少，减少耦合度</p><ul><li>Actions</li></ul><p>Actions是qiankun官方提供了应用间通信方式，基于发布订阅模式，通过setGlobalState更改全局状态，通知观察者<br> 通过onGlobalStateChange、offGlobalStateChange方法添加观察者或移除观察者<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/8/171f3c48e01117fa~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="ActionsFLow"></p><p>actions适合于通信业务较少的场景</p><p>在主应用中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 创建文件actions.ts(此处也可删掉类型声明使用js扩展名) 初始化MicroAppStateActions并导出</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> initGlobalState<span class="token punctuation">,</span> MicroAppStateActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;qiankun&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// initGlobalState 疑似会自动绑定actions到props中</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">actions</span><span class="token operator">:</span> MicroAppStateActions <span class="token operator">=</span> <span class="token function">initGlobalState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 业务组件中</span></span>
<span class="line"><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">&#39;./actions.ts&#39;</span><span class="token punctuation">;</span></span>
<span class="line">actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">curState<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在主应用中添加观察者函数</span></span>
<span class="line">actions<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在主应用中设置全局state</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在微应用中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 创建actions.js文件</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">emptyAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;current execute action is empty!&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Actions</span> <span class="token punctuation">{</span></span>
<span class="line">  actions <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">onGlobalStateChange</span><span class="token operator">:</span> emptyAction<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">setGlobalState</span><span class="token operator">:</span> emptyAction</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">setActions</span><span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actions <span class="token operator">=</span> actions<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acthins<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Actions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 在main.js入口文件中，通过props上接收主应用中传来的真实actions</span></span>
<span class="line"><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">&#39;./actions.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> actions<span class="token punctuation">.</span><span class="token function">setActions</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注入actions实例</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 业务组件中使用与主应用中类似</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>state共享</li></ul><p>常见业务场景使用actions即可基本满足要求，但也有不少限制：<br> 子应用需要额外配置独立运行时没有actions的逻辑、需要了解状态池的细节再进行通信、无法跟踪状态池变更，通信场景较多时容易出现状态混乱，维护困难等问题</p><p>state共享即通过vuex、pinia、redux等共享存储库维护状态池，并通过shared实例暴露一些方法给子应用<br> 与actions模式类似，通过props手动将shared实例传递给子应用</p><p>主应用中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> shared <span class="token keyword">from</span> <span class="token string">&#39;shared&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 自行实现shared类，通过shared类代理读写vuex等状态存储库</span></span>
<span class="line"><span class="token function">registerMicroApps</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;sub-app&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span> shared <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 注册微应用时通过props手动传递shared实例</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子应用中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 子应用中应该实现类似的shared用于独立运行时处理兼容</span></span>
<span class="line"><span class="token comment">// main.js 入口文件中尝试读取并初始化shared</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 若props中传入了shared则使用并重载，若无则使用子应用中的shared</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> shared <span class="token operator">=</span> SharedModule<span class="token punctuation">.</span><span class="token function">getShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">  SharedModule<span class="token punctuation">.</span><span class="token function">overloadShared</span><span class="token punctuation">(</span>shared<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样通过自由选择的状态存储库可实现跟踪变化，子应用仅需了解shared规范，无需了解状态池细节<br> 但对应的主应用需要耽误维护一套状态池，子应用需要单独维护shared</p><h3 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题"><span>其他问题</span></a></h3><h3 id="源码解读" tabindex="-1"><a class="header-anchor" href="#源码解读"><span>源码解读</span></a></h3>`,58)]))}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/micro-app/qiankun.html","title":"微前端之qiankun框架","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"微前端简介","slug":"微前端简介","link":"#微前端简介","children":[]},{"level":2,"title":"qiankun","slug":"qiankun","link":"#qiankun","children":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"主应用中的基本使用","slug":"主应用中的基本使用","link":"#主应用中的基本使用","children":[]},{"level":3,"title":"微应用中的基础使用","slug":"微应用中的基础使用","link":"#微应用中的基础使用","children":[]},{"level":3,"title":"路由调整","slug":"路由调整","link":"#路由调整","children":[]},{"level":3,"title":"应用间通信","slug":"应用间通信","link":"#应用间通信","children":[]},{"level":3,"title":"其他问题","slug":"其他问题","link":"#其他问题","children":[]},{"level":3,"title":"源码解读","slug":"源码解读","link":"#源码解读","children":[]}]}],"git":{"updatedTime":1676304852000,"contributors":[{"name":"vito","username":"vito","email":"vitotu@qq.com","commits":2,"url":"https://github.com/vito"}],"changelog":[{"hash":"dd70323d64b08d54a2405d5492d5f79f022b755c","time":1676304852000,"email":"vitotu@qq.com","author":"vito","message":"update config &amp;&amp; start vite"},{"hash":"5bfc54de82e665e4bb983fa18e209c0e747c9338","time":1676292843000,"email":"vitotu@qq.com","author":"vito","message":"add qiankun"}]},"filePathRelative":"micro-app/qiankun.md"}');export{i as comp,u as data};
