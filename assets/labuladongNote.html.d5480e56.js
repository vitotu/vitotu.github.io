import{_ as l,r as e,o as u,c as i,a as s,b as n,d as a,w as c,e as p}from"./app.ae13cb8e.js";const k="/assets/rotateMatrix01.87416c03.jpeg",r="/assets/rotateMatrix02.185b5db7.jpeg",d="/assets/rotateMatrix03.b87ea061.jpeg",m={},v=s("h1",{id:"labuladong\u7B97\u6CD5\u5B66\u4E60\u7B14\u8BB0",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#labuladong\u7B97\u6CD5\u5B66\u4E60\u7B14\u8BB0","aria-hidden":"true"},"#"),n(" labuladong\u7B97\u6CD5\u5B66\u4E60\u7B14\u8BB0")],-1),b={href:"https://labuladong.github.io/algo/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://labuladong.gitee.io/algo/",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u4E8C\u53C9\u6811</h2><p>\u4E8C\u53C9\u6811\u65E2\u53EF\u4EE5\u9012\u5F52(\u524D\u4E2D\u540E\u5E8F\u904D\u5386)\u4E5F\u53EF\u4EE5\u904D\u5386(\u5C42\u5E8F\u904D\u5386)\uFF0C\u5176\u4E2D\u9012\u5F52\u7684\u4E09\u79CD\u65B9\u5F0F\u5BF9\u5E94\u8FD9\u4E09\u4E2A\u5904\u7406\u95EE\u9898\u7684\u4E0D\u540C\u8282\u70B9\uFF1A\u524D\u5E8F\u4F4D\u7F6E\u4EC5\u80FD\u83B7\u53D6\u4ECE\u7236\u8282\u70B9\u4F20\u6765\u7684\u53C2\u6570\uFF0C\u540E\u5E8F\u4F4D\u7F6E\u8FD8\u80FD\u83B7\u53D6\u5B50\u6811\u51FD\u6570\u8FD4\u56DE\u503C</p><p>\u53E6\u5916\uFF0C\u4E8C\u53C9\u6811\u7684\u9012\u5F52\u8FD8\u53EF\u4ECE\u904D\u5386\u4E00\u904D\u4E8C\u53C9\u6811(\u56DE\u6EAF\u6CD5)\u548C\u5206\u89E3\u95EE\u9898(\u52A8\u6001\u89C4\u5212)\u4E24\u4E2A\u89D2\u5EA6\u6765\u770B\u5F85</p><p>\u8BBE\u8BA1\u4F8B\u9898\uFF1Aleetcode \u7684104\u9898\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u5206\u89E3\u95EE\u9898\u7684\u89E3\u6CD5</span>
<span class="token keyword">function</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> leftMax<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> rightMax<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u904D\u5386\u6216\u8005\u8BF4\u56DE\u6EAF\u7684\u89E3\u6CD5</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  deep<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 144\u9898\uFF1A\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u7531\u4E8E\u5206\u89E3\u95EE\u9898\u7684\u65B9\u5F0F\u4EE3\u7801\u770B\u8D77\u6765\u7B80\u6D01</span>
<span class="token keyword">function</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root<span class="token punctuation">.</span>val<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u904D\u5386\u7684\u505A\u6CD5</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 543\u9898\uFF1A\u4E8C\u53C9\u6811\u7684\u76F4\u5F84<br> \u76F4\u5F84\u5373\u8282\u70B9\u95F4\u7684\u8DDD\u79BB\uFF0C\u5373\u4E24\u4E2A\u8282\u70B9\u4E4B\u95F4\u76F8\u8DDD\u4E00\u4E2A\u5355\u4F4D\uFF0C\u7531\u6B64\u53EF\u5F97\uFF1A\u6BCF\u4E00\u6761\u4E8C\u53C9\u6811\u7684\u300C\u76F4\u5F84\u300D\u957F\u5EA6\uFF0C\u5C31\u662F\u4E00\u4E2A\u8282\u70B9\u7684\u5DE6\u53F3\u5B50\u6811\u7684\u6700\u5927\u6DF1\u5EA6\u4E4B\u548C</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> MaxPath <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>MaxPath<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">deepMax</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> leftMax <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rightMax <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>MaxPath <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>MaxPath<span class="token punctuation">,</span> leftMax <span class="token operator">+</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5728\u540E\u7EED\u4F4D\u7F6E\u8BA1\u7B97\u6700\u5927\u76F4\u5F84</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u51FD\u6570\u8FD4\u56DE\u4F5C\u4E3A\u5B50\u6811\u65F6\u7684\u6700\u5927\u6DF1\u5EA6</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u6811\u601D\u8DEF\u7BC7" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u601D\u8DEF\u7BC7" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u601D\u8DEF\u7BC7</h3><p>\u4E8C\u53C9\u6811\u89E3\u9898\u601D\u8DEF\u5206\u4E3A\u4E24\u7C7B\uFF1A</p><ol><li>\u80FD\u5426\u901A\u8FC7\u904D\u5386\u4E8C\u53C9\u6811\u83B7\u5F97\u7B54\u6848</li><li>\u80FD\u5426\u901A\u8FC7\u9012\u5F52(\u5B50\u95EE\u9898)\u63A8\u5BFC\u51FA\u7B54\u6848</li></ol><ul><li>leetcode 226 \u7FFB\u8F6C\u4E8C\u53C9\u6811</li></ul><p>\u601D\u8DEF\uFF1A \u904D\u5386\u7684\u89E3\u6CD5\uFF0C\u904D\u5386\u6BCF\u4E2A\u8282\u70B9\uFF0C\u4EA4\u6362\u5DE6\u53F3\u5B50\u8282\u70B9<br> \u9012\u5F52\u7684\u89E3\u6CD5\uFF0C\u5206\u522B\u7FFB\u8F6C\u8282\u70B9\u7684\u5DE6\u53F3\u5B50\u6811\uFF0C\u7136\u540E\u4EA4\u6362\u5DE6\u53F3\u5B50\u6811</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token function">reverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment">// \u904D\u5386\u7684\u65B9\u6CD5</span>
  <span class="token comment">// return recursion(root); // \u9012\u5F52\u65B9\u6CD5</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u4EA4\u6362\u5DE6\u53F3\u8282\u70B9\uFF0C\u968F\u540E\u904D\u5386\u5176\u4ED6\u8282\u70B9</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token function">reverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">reverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u7FFB\u8F6C\u5DE6\u53F3\u5B50\u6811</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span> <span class="token comment">// \u4EA4\u6362\u5DE6\u53F3\u5B50\u6811</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 116 \u586B\u5145\u6BCF\u4E2A\u4E8C\u53C9\u6811\u8282\u70B9\u7684\u53F3\u4FA7\u6307\u9488</li></ul><p>\u7ED9\u5B9A\u5B8C\u7F8E\u4E8C\u53C9\u6811\uFF0C\u6240\u6709\u53F6\u5B50\u7ED3\u70B9\u90FD\u5728\u540C\u4E00\u5C42\uFF0C\u586B\u5145next\u6307\u9488\u6307\u5411\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\uFF0C\u82E5\u65E0\u5219\u586B\u5145\u4E3Anull</p><p>\u601D\u8DEF\uFF1A\u53EF\u901A\u8FC7\u904D\u5386\u7684\u65B9\u6CD5\u6765\u89E3\u9898\uFF0C\u6211\u4EEC\u5B9E\u9645\u8981\u904D\u5386\u7684\u662F\u4E24\u4E2A\u8282\u70B9\u4E4B\u95F4\u7684\u7A7A\u9699\uFF0C\u53EF\u4EE5\u5C06\u6765\u76F8\u90BB\u7684\u4E24\u4E2A\u8282\u70B9\u770B\u505A\u4E00\u4E2A\uFF0C\u56E0\u6B64\u4E8C\u53C9\u6811\u88AB\u62BD\u8C61\u6210\u4E86\u4E09\u53C9\u6811\uFF0C\u904D\u5386\u8FD9\u9897\u201C\u4E09\u53C9\u6811\u201D<br> \u6B64\u9898\u6682\u65E0\u9012\u5F52\u7684\u89E3\u6CD5</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>root<span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u904D\u5386\u201C\u4E09\u53C9\u6811\u201D\uFF0C\u9700\u8981\u8F93\u5165\u4E24\u4E2A\u76F8\u90BB\u7684\u8282\u70B9</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span>node1<span class="token operator">:</span>Node<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> node2<span class="token operator">:</span>Node<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>node1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> node2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span> <span class="token comment">// \u8FDE\u63A5\u4E24\u4E2A\u76F8\u90BB\u8282\u70B9</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u904D\u5386\u4E0B\u4E00\u4E2A\u201C\u4E09\u53C9\u6811\u201D\u8282\u70B9</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 114 \u5C06\u4E8C\u53C9\u6811\u5C55\u5F00\u4E3A\u94FE\u8868</li></ul><p>\u7ED9\u5B9A\u6839\u8282\u70B9root\uFF0C\u5C55\u5F00\u4E3A\u5355\u94FE\u8868\uFF0C\u5C55\u5F00\u540Eright\u6307\u5411\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF0C\u5DE6\u5B50\u8282\u70B9\u4E3Anull\uFF0C\u5C55\u5F00\u540E\u5355\u94FE\u8868\u4E0E\u4E8C\u53C9\u6811\u5148\u6839\u5E8F\u904D\u5386\u987A\u5E8F\u76F8\u540C</p><p>\u601D\u8DEF\uFF1A\u56E0\u4E3A\u9700\u8981\u539F\u5730\u5C55\u5F00\uFF0C\u53EA\u80FD\u4F7F\u7528\u9012\u5F52\u7684\u65B9\u5F0F\uFF1A\u5148\u5C55\u5F00\u5DE6\u5B50\u6811\uFF0C\u7136\u540E\u5C55\u5F00\u53F3\u5B50\u6811\uFF0C\u5C06\u53F3\u5B50\u6811\u8FDE\u63A5\u5230\u5DE6\u5B50\u6811\u4E0B\u65B9\uFF0C\u7136\u540E\u5C06\u6574\u4E2A\u5DE6\u5B50\u6811\u4F5C\u4E3A\u53F3\u5B50\u6811</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C55\u5F00\u5DE6\u53F3\u5B50\u6811</span>
  <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// \u7F13\u5B58\u5DE6\u53F3\u5B50\u6811\u8282\u70B9</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u8FDE\u63A5root\u8282\u70B9</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// \u5FAA\u73AF\u904D\u5386\u5230\u62C9\u4F38\u540E\u5DE6\u5B50\u6811\u7684\u672B\u5C3E\u8282\u70B9</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  p<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span> <span class="token comment">// \u8FDE\u63A5\u53F3\u5B50\u6811</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u6811\u6784\u9020\u7BC7" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u6784\u9020\u7BC7" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u6784\u9020\u7BC7</h3><p>\u6784\u9020\u95EE\u9898\u4E00\u822C\u4F7F\u7528\u5206\u89E3\u95EE\u9898\u7684\u601D\u8DEF\uFF0C\u5373\u6839\u8282\u70B9+\u6784\u9020\u5DE6\u5B50\u6811+\u6784\u9020\u53F3\u5B50\u6811</p><ul><li>leetcode 654 \u6700\u5927\u4E8C\u53C9\u6811</li></ul><p>\u7ED9\u5B9A\u65E0\u91CD\u590D\u5143\u7D20\u7684\u6574\u6570\u6570\u7EC4\uFF0C\u6839\u8282\u70B9\u4E3A\u6700\u5927\u5143\u7D20\uFF0C\u5DE6\u5B50\u6811\u4E3A\u6700\u5927\u5143\u7D20\u5DE6\u8FB9\u7684\u90E8\u5206\u6784\u9020\u7684\u6700\u5927\u4E8C\u53C9\u6811\uFF0C\u53F3\u5B50\u6811\u4E3A\u6709\u90E8\u5206</p><p>\u601D\u8DEF\uFF1A\u904D\u5386\u6570\u7EC4\u627E\u5230\u6700\u5927\u503C\u53CA\u5176\u7D22\u5F15\uFF0C\u5206\u522B\u53D6\u5DE6\u53F3\u90E8\u5206\u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> maxVal <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u67E5\u627E\u6700\u5927\u503C</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>maxVal <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    maxVal <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    index <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 105 \u4ECE\u524D\u5E8F\u548C\u4E2D\u5E8F\u904D\u5386\u7ED3\u679C\u6784\u9020\u4E8C\u53C9\u6811(\u65E0\u91CD\u590D\u5143\u7D20)</li></ul><p>\u601D\u8DEF\uFF1A\u524D\u5E8F\u904D\u5386\u7B2C\u4E00\u4E2A\u5143\u7D20\u5373\u4E3A\u6839\u8282\u70B9\uFF0C\u5728\u4E2D\u5E8F\u4E2D\u627E\u5230\u5BF9\u5E94\u8282\u70B9\uFF0C\u5176\u5DE6\u8FB9\u5BF9\u5E94\u5373\u4E3A\u5DE6\u5B50\u6811\uFF0C\u53F3\u8FB9\u4E3A\u53F3\u5B50\u6811\uFF0C\u5728\u524D\u5E8F\u5E8F\u5217\u4E2D\u627E\u5230\u5BF9\u5E94\u7684\u5DE6\u53F3\u5B50\u6811\uFF0C\u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inorder<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inorder<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pStart<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> iEnd<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pStart <span class="token operator">&gt;</span> pEnd <span class="token operator">||</span> iStart <span class="token operator">&gt;</span> iEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6784\u9020\u6839\u8282\u70B9</span>
  <span class="token keyword">let</span> iRootIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u67E5\u627E\u6839\u8282\u70B9\u5728\u4E2D\u5E8F\u5E8F\u5217\u4E2D\u7684\u7D22\u5F15</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> iStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> iEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pStart<span class="token punctuation">]</span> <span class="token operator">===</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> iRootIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>iRootIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> leftLength <span class="token operator">=</span> iRootIndex <span class="token operator">-</span> iStart<span class="token punctuation">;</span> <span class="token comment">// \u8BA1\u7B97\u5DE6\u5B50\u5E8F\u5217\u957F\u5EA6\uFF0C PS\uFF1A\u5355\u95ED\u533A\u95F4\u957F\u5EA6</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token punctuation">[</span>pStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pStart<span class="token operator">+</span>leftLength<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> iStart <span class="token operator">+</span> leftLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token punctuation">[</span>pStart <span class="token operator">+</span> leftLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> iRootIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> iEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 106 \u901A\u8FC7\u4E2D\u5E8F\u548C\u540E\u5E8F\u904D\u5386\u7ED3\u679C\u6784\u9020\u4E8C\u53C9\u6811(\u65E0\u91CD\u590D\uFF0C\u4E0E\u4E0A\u9898\u7C7B\u4F3C)</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>inorder<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> postorder<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> postorder<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>iStart<span class="token punctuation">,</span> iEnd<span class="token punctuation">,</span> pStart<span class="token punctuation">,</span> pEnd<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode <span class="token operator">|</span><span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>iStart <span class="token operator">&gt;</span> iEnd <span class="token operator">||</span> pStart <span class="token operator">&gt;</span> pEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> iRootIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> iStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> iEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>pEnd<span class="token punctuation">]</span> <span class="token operator">===</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> iRootIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>iRootIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> leftLength <span class="token operator">=</span> iRootIndex <span class="token operator">-</span> iStart<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token punctuation">[</span>iStart<span class="token punctuation">,</span> iRootIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pStart<span class="token punctuation">,</span> pStart <span class="token operator">+</span> leftLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token punctuation">[</span>iRootIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> iEnd<span class="token punctuation">,</span> pStart <span class="token operator">+</span> leftLength<span class="token punctuation">,</span> pEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 889 \u901A\u8FC7\u540E\u5E8F\u548C\u524D\u5E8F\u904D\u5386\u7ED3\u679C\u6784\u9020\u4E8C\u53C9\u6811</li></ul><p>\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u4F46\u901A\u8FC7\u540E\u5E8F\u548C\u524D\u5E8F\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u4E00\u9897\u4E8C\u53C9\u6811\uFF0C\u56E0\u6B64\u8FD4\u56DE\u4EFB\u610F\u4E00\u79CD\u7ED3\u679C\u5373\u53EF</p><p>\u601D\u8DEF\uFF1A\u4E0E\u4E0A\u9898\u533A\u522B\u5728\u4E8E\u5DE6\u53F3\u5B50\u6811\u8303\u56F4\u7684\u786E\u5B9A\u65B9\u5F0F\uFF0C\u9996\u5148\u53D6\u524D\u5E8F\u5E8F\u5217\u7B2C\u4E00\u4E2A\u5143\u7D20\u4E3A\u6839\u8282\u70B9\uFF0C\u7B2C\u4E8C\u4E2A\u5143\u7D20\u4E3A\u5DE6\u5B50\u6811\u7684\u6839\u8282\u70B9\uFF0C\u904D\u5386\u540E\u5E8F\u5E8F\u5217\u627E\u5230\u5DE6\u5B50\u6811\u6839\u8282\u70B9\uFF0C\u786E\u5B9A\u5DE6\u53F3\u5B50\u6811\u8FB9\u754C\uFF0C\u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">constructFromPrePost</span><span class="token punctuation">(</span>preorder<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> postorder<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> postorder<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pStart<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> bStart<span class="token punctuation">,</span> bEnd<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pStart <span class="token operator">&gt;</span> pEnd <span class="token operator">||</span> bStart <span class="token operator">&gt;</span> bEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pStart <span class="token operator">===</span> pEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">let</span> boundIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> bStart<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> boundIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>boundIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> leftLength <span class="token operator">=</span> boundIndex <span class="token operator">-</span> bStart<span class="token punctuation">;</span> <span class="token comment">// \u534A\u95ED\u533A\u95F4\uFF0C\u4F46\u6B64\u65F6\u5E94\u5305\u542Broot\uFF0C\u6545\u5DE6\u533A\u95F4\u7EC8\u70B9+1</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token punctuation">[</span>pStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pStart<span class="token operator">+</span>leftLength<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bStart<span class="token punctuation">,</span> boundIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u53F3\u5B50\u6811\u8D77\u70B9\u5BF9\u5E94\u8C03\u6574</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token punctuation">[</span>pStart<span class="token operator">+</span>leftLength<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> boundIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u6811\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316</h3><ul><li>leetcode 297 \u4E8C\u53C9\u6811\u7684\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316</li></ul><p>\u7C7B\u4F3C\u4E0Ejson\u7684\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316\uFF0C\u53EA\u8981\u4E24\u4E2A\u51FD\u6570\u81EA\u6D3D\u5373\u53EF\uFF1B<br> \u901A\u5E38\u5C06\u4E8C\u53C9\u6811\u5E8F\u5217\u5316\u4E3A\u5B57\u7B26\u4E32\uFF0C\u53EF\u91C7\u7528\u524D\u5E8F\u904D\u5386\u3001\u4E2D\u5E8F\u904D\u5386\u3001\u540E\u5E8F\u904D\u5386\u3001\u5C42\u5E8F\u904D\u5386\u7684\u65B9\u5F0F\uFF0C\u7A7A\u8282\u70B9\u91C7\u7528\u7279\u6B8A\u5360\u4F4D\u7B26&#39;#&#39;\u5360\u4F4D\u4FBF\u4E8E\u53CD\u5E8F\u5217\u5316<br> \u5176\u4E2D\u7531\u4E8E\u4E2D\u5E8F\u904D\u5386\u65E0\u6CD5\u786E\u5B9A\u6839\u8282\u70B9\u4F4D\u7F6E\uFF0C\u6545\u65E0\u6CD5\u8FDB\u884C\u53CD\u5E8F\u5217\u5316</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Solution<span class="token punctuation">.</span><span class="token function">layerSerialize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> strArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u53BB\u6389\u5206\u9694\u7B26\uFF0C\u8F6C\u6362\u4E3A\u6570\u7EC4\u65B9\u4FBF\u5904\u7406</span>
  <span class="token keyword">return</span> Solution<span class="token punctuation">.</span><span class="token function">layerDeserialize</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u524D\u5E8F\u904D\u5386\u5B9E\u73B0</span>
  <span class="token keyword">static</span> <span class="token function">preSerialize</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u6536\u96C6\u5B57\u7B26\u4E32\uFF0C\u8FD4\u56DE\u65F6\u4F7F\u7528\u5206\u9694\u7B26\u62FC\u63A5</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Solution<span class="token punctuation">.</span><span class="token function">preSerialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Solution<span class="token punctuation">.</span><span class="token function">preSerialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">preDeserialize</span><span class="token punctuation">(</span>strArr<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> strArr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> Solution<span class="token punctuation">.</span><span class="token function">preDeserialize</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> Solution<span class="token punctuation">.</span><span class="token function">preDeserialize</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u540E\u5E8F\u904D\u5386\u5B9E\u73B0</span>
  <span class="token keyword">static</span> <span class="token function">postSerialize</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Solution<span class="token punctuation">.</span><span class="token function">postSerialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Solution<span class="token punctuation">.</span><span class="token function">postSerialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">postDeserialize</span><span class="token punctuation">(</span>strArr<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> strArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E3A\u4E86\u786E\u5B9A\u6839\u8282\u70B9\uFF0C\u9700\u8981\u4ECE\u53F3\u5B50\u6811\u5F00\u59CB\u53CD\u5E8F\u5217\u5316</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> Solution<span class="token punctuation">.</span><span class="token function">postDeserialize</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> Solution<span class="token punctuation">.</span><span class="token function">postDeserialize</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5C42\u5E8F\u904D\u5386\u5B9E\u73B0</span>
  <span class="token keyword">static</span> <span class="token function">layerSerialize</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> dp<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u961F\u5217\u5B58\u50A8\u8282\u70B9</span>
    <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u6536\u96C6\u7ED3\u679C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> curNode <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>curNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u9047\u5230\u7A7A\u8282\u70B9\u6536\u96C6\u7ED3\u679C\uFF0C\u4F46\u4E0D\u63A8\u5165\u961F\u5217</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">,</span> curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06\u5DE6\u53F3\u5B50\u8282\u70B9\u63A8\u5165\u961F\u5217</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">layerDeserialize</span><span class="token punctuation">(</span>strArr<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> strArr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u786E\u5B9A\u6839\u8282\u70B9</span>
    <span class="token keyword">let</span> dp<span class="token operator">:</span>TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u4F7F\u7528\u961F\u5217\u5B58\u50A8\u8282\u70B9</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> curNode <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> leftVal <span class="token operator">=</span> strArr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5206\u522B\u83B7\u53D6\u5DE6\u53F3\u5B50\u8282\u70B9\u7684\u503C\u8FDB\u884C\u5224\u65AD</span>
      <span class="token keyword">let</span> rightVal <span class="token operator">=</span> strArr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>leftVal <span class="token operator">!==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5DE6\u5B50\u8282\u70B9\u4E0D\u4E3A\u7A7A\u5219\u6062\u590D\u8282\u70B9\u5E76\u63A8\u5165\u961F\u5217\uFF0C\u82E5\u4E3A\u7A7A\u5219\u4E0D\u7528\u5904\u7406</span>
        curNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>leftVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>rightVal <span class="token operator">!==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        curNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>rightVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u6811\u5DE7\u7528\u540E\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u5DE7\u7528\u540E\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u5DE7\u7528\u540E\u5E8F\u904D\u5386</h3><ul><li>leetcode 652 \u5BFB\u627E\u91CD\u590D\u7684\u5B50\u6811</li></ul><p>\u5982\u679C\u4E24\u68F5\u6811\u5177\u6709 \u76F8\u540C\u7684\u7ED3\u6784\u548C\u76F8\u540C\u7684\u7ED3\u70B9\u503C \uFF0C\u5219\u8BA4\u4E3A\u4E8C\u8005\u662F\u91CD\u590D\u7684\u3002</p><p>\u601D\u8DEF\uFF1A\u5BF9\u4E8E\u5B50\u6811\u53EF\u4F7F\u7528\u5E8F\u5217\u5316\u7684\u65B9\u5F0F\u63CF\u8FF0\uFF0C\u904D\u5386\u4E8C\u53C9\u6811\uFF0C\u4F7F\u7528\u54C8\u5E0C\u8868\u5B58\u50A8\u5B50\u6811\u7684\u63CF\u8FF0\uFF0C\u53D1\u73B0\u91CD\u590D\u5219\u5C06\u5BF9\u5E94\u6839\u8282\u70B9\u63A8\u5165\u7ED3\u679C\u6536\u96C6\u5668\u4E2D<br> \u53EF\u9009\u7528\u524D\u5E8F\u3001\u540E\u5E8F\u3001\u5C42\u5E8F\u7684\u65B9\u5F0F\uFF0C\u4F46\u904D\u5386\u8FC7\u7A0B\u4E2D\u5C31\u662F\u5728\u904D\u5386\u5404\u5B50\u6811\uFF0C\u56E0\u6B64\u53EF\u4EE5\u540C\u65F6\u67E5\u91CD\uFF0C\u800C\u67E5\u91CD\u9700\u8981\u5B8C\u6574\u7684\u5B50\u6811\u5E8F\u5217(\u5373\u5305\u542B\u5F53\u524D\u6839\u8282\u70B9)\uFF0C\u6545\u540E\u5E8F\u904D\u5386\u6700\u4E3A\u5408\u9002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findDuplicateSubtrees</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> soluton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  soluton<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> soluton<span class="token punctuation">.</span>res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token operator">:</span>TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>subRoot<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>subRoot <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>subRoot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>subRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subRoot<span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> strTree <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u540E\u5E8F\u904D\u5386\u5E8F\u5217\u5316\u7684\u8FC7\u7A0B\u4F1A\u9012\u5F52\u5E8F\u5217\u5316\u5B50\u6811\uFF0C\u5728\u6B64\u8FC7\u7A0B\u53EF\u67E5\u91CD</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strTree<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u7B2C\u4E8C\u6B21\u51FA\u73B0\uFF0C\u52A0\u5165\u7ED3\u679C\u6570\u7EC4\uFF0C\u589E\u52A0\u6B21\u6570</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strTree<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u9996\u6B21\u51FA\u73B0\uFF0C\u8BB0\u5F55\u6B21\u6570\uFF0C\u51FA\u73B0\u6B21\u6570&gt;=2\u5219\u4E0D\u505A\u8BB0\u5F55\uFF0C\u653E\u7F6E\u591A\u6B21\u8BB0\u5F55\u91CD\u590D\u7684\u5B50\u6811</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strTree<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strTree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> strTree<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u6811\u4E4B\u5F52\u5E76\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u4E4B\u5F52\u5E76\u6392\u5E8F" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u4E4B\u5F52\u5E76\u6392\u5E8F</h3><ul><li>leetcode 912 \u6392\u5E8F\u6570\u7EC4 \u7ED9\u5B9A\u6574\u6570\u6570\u7EC4\u6309\u5347\u5E8F\u6392\u5217</li></ul><p>\u601D\u8DEF\uFF1A\u867D\u7136\u9898\u76EE\u6CA1\u6709\u89C4\u5B9A\u4F7F\u7528\u7684\u6392\u5E8F\u7B97\u6CD5\uFF0C\u4F46\u6B64\u5904\u5C1D\u8BD5\u7ED3\u5408\u4E8C\u53C9\u6811\u4F7F\u7528\u5F52\u5E76\u6392\u5E8F<br> \u5F52\u5E76\u6392\u5E8F\u672C\u8D28\u662F\u5C06\u6392\u5E8F\u95EE\u9898\u62C6\u5206\u4E3A\u5B50\u95EE\u9898\uFF0C\u7136\u540E\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u597D\u7684\u5E8F\u5217\uFF0C\u7C7B\u4F3C\u4E8E\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386\u6846\u67B6</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token comment">// \u9009\u53D6\u95ED\u533A\u95F4[start, end]</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// \u5355\u4E2A\u5143\u7D20\u5219\u76F4\u63A5\u8FD4\u56DE</span>
  <span class="token keyword">let</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u786E\u5B9A\u5206\u9694\u70B9</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u5DE6\u53F3\u5E8F\u5217</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5728\u540E\u5E8F\u904D\u5386\u4F4D\u7F6E\u5408\u5E76\u5E8F\u5217</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">,</span> right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u53CC\u6307\u9488\u5408\u5E76\u5DE6\u53F3\u5B50\u6570\u7EC4(\u7C7B\u4F3C\u53CC\u6307\u9488\u5408\u5E76\u94FE\u8868)</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">-</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
      right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 315 \u8BA1\u7B97\u53F3\u4FA7\u5C0F\u4E8E\u5F53\u524D\u5143\u7D20\u7684\u4E2A\u6570</li></ul><p>\u7ED9\u5B9A\u6574\u6570\u6570\u7EC4 nums \uFF0C\u8FD4\u56DE\u65B0\u6570\u7EC4 counts\uFF0C\u5176\u4E2D<code>counts[i]</code>\u7684\u503C\u662F<code>nums[i]</code>\u53F3\u4FA7\u5C0F\u4E8E<code>nums[i]</code>\u7684\u5143\u7D20\u7684\u6570\u91CF\u3002</p><p>\u601D\u8DEF\uFF1A\u904D\u5386nums\uFF0C\u5BF9\u4E0E\u6BCF\u4E2A\u503Ci\u60F3\u77E5\u9053\u5176\u540E\u6709\u591A\u5C11\u5C0F\u4E8Ei\u7684\u503C\uFF0C\u65E7\u5FC5\u987B\u904D\u5386\u5B8C\u6210\u6574\u4E2A\u6570\u7EC4\uFF0C\u8FD9\u5C31\u7C7B\u4F3C\u4E0E\u540E\u5E8F\u904D\u5386\u6846\u67B6\uFF0C\u5148\u5B8C\u6210\u5B50\u95EE\u9898\uFF0C\u7136\u540E\u89E3\u51B3\u5F53\u524D\u95EE\u9898<br> \u76F4\u63A5\u5E94\u7528\u540E\u5E8F\u904D\u5386\u6846\u67B6\u5219\u590D\u6742\u5EA6\u4E0E\u66B4\u529B\u904D\u5386\u89E3\u6CD5\u6CA1\u6709\u533A\u522B\uFF0C\u89C2\u5BDF\u5F52\u5E76\u6392\u5E8F\u8FC7\u7A0B\u53D1\u73B0\uFF0C\u5F53\u5C06\u67D0\u5143\u7D20i\u586B\u5145\u81F3res\u4E34\u65F6\u6570\u7EC4\u4E2D\u65F6,\u5DE6\u5B50\u6811\u4E2D\u6BD4i\u5C0F\u7684\u5143\u7D20\u6570\u91CF\u4E3A\u53F3\u5B50\u5E8F\u5217\u5DF2\u586B\u5145\u7684\u5143\u7D20\u6570(right - mid - 1)\uFF0C\u800C\u5BF9\u4E8E\u53F3\u5B50\u6811\u4E2D\u7684\u5143\u7D20\uFF0C\u56E0\u4E3A\u5DF2\u7ECF\u6392\u5E8F\uFF0C\u53F3\u4FA7\u4E0D\u5B58\u5728\u6BD4\u5F53\u524D\u5143\u7D20\u5C0F\u7684\u6570<br> \u56E0\u6B64\u53EF\u4EE5\u5BF9\u5F52\u5E76\u7B97\u6CD5\u4FEE\u6539\uFF0C\u9012\u5F52\u7D2F\u8BA1\u8BA1\u6570</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">countSmaller</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> tempArr <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>val<span class="token punctuation">,</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F85\u52A9\u6392\u5E8F\u6570\u7EC4\uFF0C\u8BB0\u5F55\u5230count\u7684\u7D22\u5F15\u6620\u5C04</span>
  <span class="token keyword">const</span> <span class="token function-variable function">mergeCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token punctuation">{</span>val<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> index<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// \u5BF9\u8F85\u52A9\u6570\u7EC4\u8FDB\u884C\u5F52\u5E76\u6392\u5E8F</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mergeCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mergeCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">,</span> right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u53F3\u4FA7\u5E8F\u5217\u5168\u90E8\u586B\u5145\uFF0C\u5DE6\u4FA7\u5269\u4F59\u7684\u5143\u7D20\u90FD\u5927\u4E8E\u53F3\u4FA7\u5E8F\u5217</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u6536\u96C6\u5269\u4F59\u7684\u5DE6\u4FA7\u5143\u7D20\uFF0C\u5BF9\u6BCF\u4E2A\u5DE6\u4FA7\u5143\u7D20\u7D2F\u8BA1\u8BA1\u6570</span>
        count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> end <span class="token operator">-</span> mid
        left<span class="token operator">++</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u6536\u96C6\u5DE6\u4FA7\u5143\u7D20\uFF0C\u7EDF\u8BA1\u6B64\u524D\u5DF2\u586B\u5145\u7684\u53F3\u4FA7\u5143\u7D20</span>
        count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> right <span class="token operator">-</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        left<span class="token operator">++</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">mergeCount</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tempArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 493 \u7FFB\u8F6C\u5BF9</li></ul><p>\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4 nums \uFF0C\u5982\u679C i &lt; j \u4E14 <code>nums[i] &gt; 2*nums[j]</code> \u6211\u4EEC\u5C31\u5C06 (i, j) \u79F0\u4F5C\u4E00\u4E2A\u91CD\u8981\u7FFB\u8F6C\u5BF9\u3002\u8FD4\u56DE\u7FFB\u8F6C\u5BF9\u7684\u6570\u91CF</p><p>\u601D\u8DEF\uFF1A\u4E0E315\u9898\u7C7B\u4F3C\u76F8\u5F53\u4E8E\u67E5\u627E\u6761\u4EF6\u53D8\u4E3A<code>nums[i] &gt; 2*nums[j]</code>,\u56E0\u6B64\u540C\u6837\u53EF\u4EE5\u4F7F\u7528\u5F52\u5E76\u6392\u5E8F\u6765\u89E3\u9898\uFF0C\u4F46\u4E0E315\u9898\u4E0D\u540C\uFF0C\u7EDF\u8BA1\u6570\u91CF\u7684\u65F6\u673A\u4E0D\u80FD\u4E0E\u6392\u5E8F\u5224\u65AD\u7684\u4EE3\u7801\u878D\u5408\uFF0C\u56E0\u6B64\u8003\u8651\u589E\u52A0\u4E00\u4E2A\u5FAA\u73AF\u6765\u72EC\u7ACB\u7EDF\u8BA1\u53CD\u8F6C\u5BF9\u7684\u6570\u91CF<br> \u4F7F\u7528\u5DE6\u53F3\u6307\u9488\u540C\u65F6\u904D\u5386\u5DE6\u53F3\u6392\u597D\u5E8F\u7684\u5B50\u5E8F\u5217\uFF0C\u56FA\u5B9A\u5DE6\u6307\u9488\uFF0C\u79FB\u52A8\u53F3\u6307\u9488\u5230\u521A\u597D\u4E0D\u6EE1\u8DB3<code>nums[i] &gt; 2*nums[j]</code>\u6761\u4EF6\uFF0C\u5373\u6B64\u65F6i\u5904\u5143\u7D20\u5747\u4E0E<code>[mid + 1, j)</code>\u6784\u6210\u7FFB\u8F6C\u5BF9</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  solution<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> solution<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5BF9\u5DE6\u5E8F\u5217\u7684\u6BCF\u4E2A\u5143\u7D20\u7EDF\u8BA1\u7FFB\u8F6C\u5BF9</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> right <span class="token operator">-</span> <span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6070\u597D\u4E0D\u6EE1\u8DB3\u6761\u4EF6\u65F6\uFF0C\u7EDF\u8BA1\u5DE6\u95ED\u53F3\u5F00\u533A\u95F4\u5143\u7D20\u6570\u91CF</span>
    <span class="token punctuation">}</span> <span class="token comment">// \u968F\u540E\u8FDB\u884C\u5C31\u5730\u4FEE\u6539\u7684\u5F52\u5E76\u6392\u5E8F</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">-</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 327 \u533A\u95F4\u548C\u7684\u4E2A\u6570</li></ul><p>\u7ED9\u5B9A\u6570\u7EC4nums\uFF0C\u53CA\u6574\u6570lower\u3001upper\uFF0C\u6C42\u6709\u591A\u5C11\u4E2A\u533A\u95F4\u6C42\u548C\u540E\u5728<code>[lower, upper]</code>\u8303\u56F4\u5185</p><p>\u601D\u8DEF\uFF1A\u5229\u7528\u4E4B\u524D\u7684\u524D\u7F00\u548C\u6570\u7EC4\uFF0C\u53EF\u4EE5\u6C42\u5F97\u4EFB\u610F\u533A\u95F4\u7684\u548C\uFF0C\u56E0\u6B64\u540C\u6837\u53EF\u4EE5\u5229\u7528\u7D22\u5F15i,j\u8BA1\u7B97\u533A\u95F4\uFF0C\u8868\u8FF0\u6210\u6570\u5B66\u8BED\u8A00\u5373\u4E3A:<code>count[i] = COUNT(j) where lower &lt;= preSum[j] - preSum[i] &lt;= upper</code>,<br> \u9898\u76EE\u4EC5\u8981\u6C42\u7EDF\u8BA1\u4E0D\u8981\u6C42\u7D22\u5F15\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5BF9\u524D\u7F00\u548C\u6570\u7EC4\u8FDB\u884C\u5F52\u5E76\u6392\u5E8F\uFF0C\u5E76\u5728\u5F52\u5E76\u8FC7\u7A0B\u4E2D\u6BD4\u8F83\u533A\u95F4\u548C\u662F\u5426\u5728\u76EE\u6807\u8303\u56F4<br> \u6BCF\u6B21\u548C\u5E76\u5DE6\u53F3\u5E8F\u5217\u65F6\uFF0C\u53EF\u5728\u5DE6\u5E8F\u5217\u4E2D\u904D\u5386\u56FA\u5B9A\u5DE6\u8FB9\u754Cleft\uFF0C\u5728\u53F3\u5E8F\u5217\u4E2D\u4F7F\u7528\u53CC\u6307\u9488\u627E\u5230\u521A\u597D\u6EE1\u8DB3\u8303\u56F4\u7684\u4E0B\u5C4AminRight\uFF0C\u548C\u521A\u597D\u4E0D\u6EE1\u8DB3\u8303\u56F4\u7684\u4E0A\u5C4AmaxRight,\u56E0\u6B64maxRight - minRight\u5C31\u662F\u56FA\u5B9A\u5DE6\u8FB9\u754Cleft\u540E\u6EE1\u8DB3\u76EE\u6807\u8303\u56F4\u7684\u533A\u95F4\u6570</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">countRangeSum</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lower<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> upper<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  preSum<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  lower<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
  upper<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lower<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> upper<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lower <span class="token operator">=</span> lower<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>upper <span class="token operator">=</span> upper
    <span class="token comment">// \u6784\u9020\u524D\u7F00\u548C\u6570\u7EC4</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

  <span class="token punctuation">}</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> minRight <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> maxRight <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u6700\u5C0F/\u6700\u5927\u53F3\u8FB9\u754C</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u5DE6\u5B50\u5E8F\u5217\u4F5C\u4E3A\u5DE6\u8FB9\u754C</span>
      <span class="token comment">// \u627E\u5230\u6070\u597D\u6EE1\u8DB3\u6761\u4EF6\u7684\u53F3\u8FB9\u754C(\u6700\u5C0F\u53F3\u8FB9\u754C)</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>minRight <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>minRight<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span> minRight<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token comment">// \u627E\u5230\u6070\u597D\u4E0D\u6EE1\u8DB3\u7684\u53F3\u8FB9\u754C(\u6700\u5927\u53F3\u8FB9\u754C)</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>maxRight <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>maxRight<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>upper<span class="token punctuation">)</span> maxRight<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> maxRight <span class="token operator">-</span> minRight<span class="token punctuation">;</span> <span class="token comment">//\u7EDF\u8BA1\u6EE1\u8DB3\u6761\u4EF6\u7684\u533A\u95F4\u6570\u91CF[minRight, maxRight\uFF09</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5F52\u5E76\u6392\u5E8F</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">,</span> right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">-</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u641C\u7D22\u6811\u7279\u6027\u7BC7" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u641C\u7D22\u6811\u7279\u6027\u7BC7" aria-hidden="true">#</a> \u4E8C\u53C9\u641C\u7D22\u6811\u7279\u6027\u7BC7</h3><ul><li>leetcode 230 \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2CK\u5C0F\u7684\u5143\u7D20</li></ul><p>\u7ED9\u5B9A\u4E8C\u53C9\u641C\u7D22\u6811\uFF0C\u627E\u51FA\u5176\u4E2D\u7B2Ck\u5C0F\u7684\u5143\u7D20</p><p>\u601D\u8DEF\uFF1A\u4E2D\u5E8F\u904D\u5386\u5C55\u5F00\uFF0C\u5B9A\u4E49\u53D8\u91CF\u5728\u4E2D\u5E8F\u904D\u5386\u65F6\u8BA1\u6570\uFF0C\u5E76\u6BD4\u5BF9\u8BA1\u6570\u662F\u5426\u4E3Ak\uFF0C\u82E5\u7B49\u4E8Ek\u5219\u8FD4\u56DE\u5BF9\u5E94\u5143\u7D20\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  solution<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> solution<span class="token punctuation">.</span>res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u4E2D\u5E8F\u4F4D\u7F6E\u8BA1\u6570\u5E76\u5224\u65AD\u662F\u5426\u4E3A\u7B2Ck\u4E2A</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 538 \u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811</li></ul><p>\u7ED9\u5B9A\u6839\u8282\u70B9\uFF0C\u8BE5\u6811\u8282\u70B9\u503C\u5404\u4E0D\u76F8\u540C\uFF0C\u5C06\u5176\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811\uFF0C\u6BCF\u4E2A\u8282\u70B9\u7684\u65B0\u503C\u4E3A\u6811\u4E2D\u6240\u6709\u5927\u4E8E\u7B49\u4E8E\u8BE5\u8282\u70B9\u539F\u6765\u503C\u7684\u8282\u70B9\u503C\u4E4B\u548C(\u5305\u62EC\u81EA\u5DF1),\u5982\uFF1A \u67D0\u8282\u70B9\u503C\u4E3A4, \u6811\u4E2D\u8282\u70B9\u503C\u5927\u4E8E4\u7684\u8282\u70B9\u6709 5, 6, 7, 8\uFF0C\u518D\u52A0\u4E0A\u8282\u70B9\u672C\u8EAB\uFF0C\u56E0\u6B64\u8BE5\u8282\u70B9\u65B0\u503C\u4E3A4+5+6+7+8=30</p><p>\u601D\u8DEF\uFF1A\u53EF\u5229\u7528\u4E2D\u5E8F\u904D\u5386\u6709\u5E8F\u7684\u5C5E\u6027\uFF0C\u7EF4\u62A4sum\u7D2F\u52A0\u503C\uFF0C\u5E76\u964D\u5E8F\u904D\u5386(\u53F3\u6839\u5DE6)\uFF0C\u7D2F\u52A0\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\uFF0C\u5E76\u8D4B\u7ED9\u5F53\u524D\u8282\u70B9\u5373\u53EF\u5B9E\u73B0\u7D2F\u52A0\u6811\u7684\u8F6C\u6362</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  solution<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  sum<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u904D\u5386\u53F3\u5B50\u6811\uFF0C\u5373\u6EE1\u8DB3\u5927\u4E8E\u8BE5\u8282\u70B9\u7684\u503C\u5148\u7D2F\u52A0</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token comment">// \u4E2D\u5E8F\u4F4D\u7F6E\u7D2F\u52A0\uFF0C\u5E76\u66F4\u65B0\u8282\u70B9\u503C</span>
    root<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1038 \u4ECE\u4E8C\u53C9\u641C\u7D22\u6811\u5230\u66F4\u5927\u548C\u6811</li></ul><p>\u4E0E\u4E0A\u9898\u76F8\u540C\uFF0C\u76F4\u63A5\u91C7\u7528\u4E0A\u9898\u89E3\u6CD5\u5373\u53EF</p><h3 id="\u4E8C\u53C9\u641C\u7D22\u6811\u57FA\u64CD\u7BC7" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u641C\u7D22\u6811\u57FA\u64CD\u7BC7" aria-hidden="true">#</a> \u4E8C\u53C9\u641C\u7D22\u6811\u57FA\u64CD\u7BC7</h3><ul><li><ol start="98"><li>\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811</li></ol></li></ul><p>\u7ED9\u5B9A\u6839\u8282\u70B9\uFF0C\u5224\u65AD\u662F\u5426\u4E3A\u4E00\u4E2A\u6709\u6548\u7684\u4E8C\u53C9\u641C\u7D22\u6811<br> \u6BCF\u4E2A\u8282\u70B9\u5E94\u8BE5\u5C0F\u4E8E\u53F3\u8FB9\u5B50\u6811\u7684\u6240\u6709\u8282\u70B9\uFF0C\u5927\u4E8E\u5DE6\u8FB9\u5B50\u6811\u7684\u5DE6\u53F3\u8282\u70B9</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Solution<span class="token punctuation">.</span><span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5224\u65AD\u5C06\u4EFB\u52A1\u4EA4\u7531\u8FB9\u754C\u91CD\u53E0\u7684\u5DE6\u53F3\u9012\u5F52</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token punctuation">,</span> min<span class="token operator">:</span>TreeNode<span class="token punctuation">,</span> max<span class="token operator">:</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5224\u65AD\u5927\u5C0F\u4E0E\u9012\u5F52\u6761\u4EF6\u5224\u65AD\u6709\u90E8\u5206\u91CD\u53E0\uFF0C\u8FD9\u6837\u624D\u80FD\u4FDD\u8BC1\u80FD\u8FDB\u884C\u8FDE\u7EED\u9012\u5F52</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5DE6\u5B50\u6811\u7684\u6700\u5927\u503C\u5373\u4E3Aroot.val\uFF0C \u53F3\u5B50\u6811\u7684\u6700\u5C0F\u503C\u4E3Aroot.val</span>
    <span class="token keyword">return</span> Solution<span class="token punctuation">.</span><span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Solution<span class="token punctuation">.</span><span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="700"><li>\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22</li></ol></li></ul><p>\u7ED9\u5B9A\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6839\u8282\u70B9root\u548C\u76EE\u6807\u6570\u503Cval\uFF0C\u627E\u5230val\u5728\u6811\u4E2D\u7684\u4F4D\u7F6E\u5E76\u8FD4\u56DE\u5BF9\u5E94\u7684\u5B50\u6811\u6839\u8282\u70B9</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="701"><li>\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C</li></ol></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u4E3A\u4E86\u94FE\u63A5\u521B\u5EFA\u7684node\uFF0C\u9700\u8981\u63A5\u6536\u9012\u5F52\u51FD\u6570\u7684\u8FD4\u56DE\u8282\u70B9</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 450. \u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9</li></ul><p>\u5220\u9664\u7ED9\u5B9A\u4E8C\u53C9\u641C\u7D22\u6811root\u4E2D\u7684\u503C\u4E3Akey\u7684\u8282\u70B9(\u9700\u8981\u540C\u65F6\u4FDD\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6027\u8D28)</p><p>\u601D\u8DEF\uFF1A\u5148\u627E\u5230\u5BF9\u5E94\u8282\u70B9\uFF0C\u5220\u9664\u8282\u70B9\u9700\u8981\u65AD\u5F00\u94FE\u63A5\uFF0C\u56E0\u6B64\u9700\u8981\u63A5\u6536\u9012\u5F52\u51FD\u6570\u7684\u8FD4\u56DE\u503C<br> \u627E\u5230\u8981\u5220\u9664\u7684\u8282\u70B9\u540E\uFF0C\u5BF9\u5E943\u79CD\u60C5\u51B5\uFF1A</p><ol><li>\u8282\u70B9\u4E3A\u53F6\u5B50\u8282\u70B9\uFF0C\u8FD4\u56DEnull\uFF0C\u82E5\u5C06root\u8D4B\u503C\u4E3Anull\uFF0C\u5747\u53EF\u5220\u9664</li><li>\u8282\u70B9\u53EA\u6709\u5DE6\u5B50\u6811\u6216\u53F3\u5B50\u6811\uFF0C\u5219\u5C06\u5DE6\u5B50\u6811\u6216\u53F3\u5B50\u6811\u8282\u70B9\u76F4\u63A5\u8FD4\u56DE\u6216\u8D4B\u503C\u7ED9root\u5373\u53EF\u5B89\u5168\u5220\u9664root</li><li>\u8282\u70B9\u6709\u5DE6\u53F3\u5B50\u6811\uFF0C\u5219\u9700\u8981\u5C06\u5DE6\u5B50\u6811\u4E2D\u7684\u6700\u5927\u503C\u6216\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5C0F\u503C\u4E0Eroot\u5BF9\u8C03\uFF0C\u5E76\u5728\u5BF9\u5E94\u7684\u5B50\u6811\u4E2D\u5220\u9664\u4E4B\u524D\u6700\u5C0F\u503C\u6216\u6700\u5927\u503C\u5BF9\u5E94\u7684\u8282\u70B9</li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5148\u627E\u5230\u8981\u522A\u9664\u8282\u70B9\u7684\u4F4D\u7F6E</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// \u82E5\u8BE5\u8282\u70B9\u4E3A\u53F6\u5B50\u7ED3\u70B9\uFF0C\u5219\u76F4\u63A5\u5220\u9664\uFF0C\u8FD4\u56DEnull\u5373\u53EF</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// \u82E5\u8BE5\u8282\u70B9\u4EC5\u6709\u4E00\u4E2A\u5B50\u8282\u70B9\uFF0C\u5219\u8FD4\u56DE\u5BF9\u5E94\u5B50\u8282\u70B9\u5373\u76F8\u5F53\u4E8E\u5220\u9664\u5F53\u524D\u8282\u70B9</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token comment">// \u82E5\u8BE5\u8282\u70B9\u6709\u5DE6\u53F3\u5B50\u8282\u70B9\uFF0C\u5219\u9700\u8981\u627E\u5230\u5DE6\u5B50\u6811\u4E2D\u6700\u5927\u503C\u6216\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5C0F\u503C\u6765\u66FF\u6362\u5F53\u524D\u8282\u70B9</span>
    <span class="token keyword">let</span> min<span class="token operator">:</span>TreeNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4EE5\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5C0F\u503C\u4E3A\u4F8B</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECE\u53F3\u5B50\u6811\u4E2D\u5220\u9664\u627E\u5230\u7684\u6700\u5C0F\u503C</span>
    <span class="token comment">// \u5C06\u6700\u5C0F\u503C\u66FF\u6362\u4E3A\u5F53\u524D\u8282\u70B9\uFF0C\u5373\u76F8\u5F53\u4E8E\u5220\u9664\u4E86\u5F53\u524D\u8282\u70B9</span>
    min<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    min<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    root <span class="token operator">=</span> min<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getMin</span><span class="token punctuation">(</span>node<span class="token operator">:</span>TreeNode<span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token punctuation">{</span> <span class="token comment">// \u5FAA\u73AF\u67E5\u627E\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5C0F\u503C</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
  <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u53C9\u641C\u7D22\u6811\u6784\u9020\u7BC7" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u641C\u7D22\u6811\u6784\u9020\u7BC7" aria-hidden="true">#</a> \u4E8C\u53C9\u641C\u7D22\u6811\u6784\u9020\u7BC7</h3>`,89),f={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247490696&idx=1&sn=798a350fcca16c89572caf65323dbec7&chksm=9bd7e280aca06b961613987e49b59cfc0faa67276b732c2ed664a8bb81daf8487a103ac0d0ce&mpshare=1&scene=1&srcid=0215YXvxGddJsWficBrwbPej&sharer_sharetime=1676472487897&sharer_shareid=7c8b9b306ef0d4ec2ab85fd7032f2a98&exportkey=n_ChQIAhIQNydoTKn3L3iXxpf7Y64kbhKJAgIE97dBBAEAAAAAACy6FDRrUVAAAAAOpnltbLcz9gKNyK89dVj0V%2FqG2kmLTI706Hp9c4mVtAEWw1%2FPpZ%2FTQX4e0oq56urQykvIY5huS7meXR2F8GRW1Q9Y7SUmq7f8V19Se9mK4x7ogFG09ahotOa%2FGDrojmDengoE0u6C%2FSoohA4Do4ITxU1%2BUeEqkj33V3e5I7Ai57VOyE5bekCc8%2BSntu6okoucv7gMceIukVIVyMFv9W4%2FIz2iz8jf7b0W51LBm8Xja2XW5jQKGWg1PzzqvIGYZlq2BDMgOXsobReQtWDRhGkmnPvAiq78zSy%2BkC0u4iYWzSwPRcX9Tbab5wo6UwjMcZhMos4%3D&acctmode=0&pass_ticket=XdTtQGuDnTawHkShWtgXBzSXfE3o%2FQ58rxJGUNhnI9KfJtyvvZmWdihREjXyue8%2Bs5l6My46FwmUguPjNziAVw%3D%3D&wx_header=0#rd",target:"_blank",rel:"noopener noreferrer"},h=p(`<ul><li>leetcode 96 \u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811</li></ul><p>\u7ED9\u5B9A\u6574\u6570n\uFF0C\u6C42\u503C\u4E3A1\u5230n\u7684\u8282\u70B9\u80FD\u7EC4\u6210\u591A\u5C11\u79CD\u4E92\u4E0D\u76F8\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811</p><p>\u601D\u8DEF\uFF1A\u5FAA\u73AF\u56FA\u5B9A\u5355\u4E00\u8282\u70B9\uFF0C\u5219\u80FD\u7EC4\u5408\u7684\u6570\u91CF\u4E3A\u5DE6\u53F3\u5B50\u6811\u7EC4\u5408\u6570\u76F8\u4E58\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5B9E\u73B0\u51FD\u6570count\uFF0C\u7528\u4E8E\u8BA1\u7B97\u95ED\u533A\u95F4<code>[left, right]</code>\u80FD\u7EC4\u6210\u7684\u4E92\u4E0D\u76F8\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6570\u91CF\uFF0C\u51FD\u6570\u4E2D\u5FAA\u73AF\u56FA\u5B9A\u6BCF\u4E2A\u8282\u70B9\uFF0C\u5E76\u9012\u5F52\u8BA1\u7B97\u6BCF\u4E2A\u8282\u70B9\u56FA\u5B9A\u540E\u5DE6\u53F3\u533A\u95F4(\u5373\u5DE6\u53F3\u5B50\u6811)\u80FD\u6784\u6210\u7684\u7EC4\u5408\u6570\uFF0C\u7D2F\u52A0\u6574\u4E2A\u5FAA\u73AF\u5373\u53EF\u5F97\u5F53\u524D\u533A\u95F4\u80FD\u7EC4\u6210\u7684\u7EC4\u5408\u6570\uFF1B<br> \u5BF9\u4E8E\u7A7A\u533A\u95F4\uFF0C\u5219\u5BF9\u5E94\u8FD9null\u8282\u70B9\uFF0C\u56E0\u6B64\u53EF\u8BB0\u4E3A\u7EC4\u5408\u65701\uFF0C\u5E76\u4F5C\u4E3Abase\u6761\u4EF6\u8FD4\u56DE<br> \u8BA1\u7B97\u533A\u95F4\u7684\u8FC7\u7A0B\u62C6\u5206\u6210\u4E86\u5B50\u95EE\u9898\uFF0C\u56E0\u6B64\u53EF\u4EE5\u901A\u8FC7\u201C\u6253\u8868\u201D\u7684\u65B9\u5F0F\uFF0C\u6DFB\u52A0cache\u907F\u514D\u91CD\u590D\u8BA1\u7B97</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">numTrees</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  cache<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u7F13\u5B58\u5DF2\u7ECF\u8BA1\u7B97\u8FC7\u7684\u7EC4\u5408\uFF0C\u52A0\u901F\u8BA1\u7B97\u8FC7\u7A0B</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">count</span><span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u7A7A\u533A\u95F4\u8282\u70B9\u4E3Anull \uFF0C\u7EC4\u5408\u6570\u4E3A1</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u672C\u533A\u95F4\u7EC4\u5408\u6570\uFF0C\u67E5\u8868\u6709\u503C\u5219\u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5FAA\u73AF\u56FA\u5B9A\u533A\u95F4\u4E2D\u7684i\u8282\u70B9</span>
      <span class="token keyword">let</span> nLeft <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6BCF\u8F6E\u5FAA\u73AF\u4E2D\u8BA1\u7B97\u5DE6\u53F3\u5B50\u6811\u7684\u7EC4\u5408\u6570</span>
      <span class="token keyword">let</span> nRight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res <span class="token operator">+=</span> nLeft <span class="token operator">*</span> nRight<span class="token punctuation">;</span> <span class="token comment">// \u5DE6\u53F3\u5B50\u6811\u76F8\u4E58\u5373\u4E3A\u672C\u8F6E\u5FAA\u73AF\u7684\u7EC4\u5408\u6570\uFF0C\u7D2F\u8BA1\u8BB0\u5F55</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span> <span class="token comment">// \u5C06\u5BF9\u5E94\u533A\u95F4\u7684\u7EC4\u5408\u6570\u5B58\u5165\u8868\u4E2D\uFF0C\u5E76\u8FD4\u56DE\u5BF9\u5E94\u7684\u503C</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 95 \u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811 \u4E8C</li></ul><p>\u7ED9\u5B9A\u6574\u6570n\uFF0C\u8FD4\u56DE\u503C\u4E3A1\u5230n\u7684\u8282\u70B9\u80FD\u7EC4\u6210\u7684\u6240\u6709\u4E92\u4E0D\u76F8\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u6839\u8282\u70B9\u7EC4\u6210\u7684\u5217\u8868</p><p>\u601D\u8DEF\uFF1A\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u8F6C\u6362\u4E3A\u533A\u95F4\u5B50\u95EE\u9898\uFF0C\u5728\u7EC4\u88C5\u7ED3\u679C\u65F6\u5219\u9700\u8981\u53CC\u91CD\u5FAA\u73AF\uFF0C\u5C06\u5DE6\u53F3\u5B50\u6811\u7684\u4E0D\u540C\u7EC4\u5408\u7EC4\u88C5\u5230\u6839\u8282\u70B9\u4E0A\uFF0C\u5E76\u7528\u7ED3\u679C\u6570\u7EC4\u8BB0\u5F55\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">generateTrees</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> NLeft <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> NRight <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> <span class="token constant">NL</span> <span class="token keyword">of</span> NLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token constant">NR</span> <span class="token keyword">of</span> NRight<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">NL</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">NR</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5FEB\u901F\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u901F\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528" aria-hidden="true">#</a> \u5FEB\u901F\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528</h3>`,9),g={href:"https://mp.weixin.qq.com/s/8ZTMhvHJK_He48PpSt_AmQ",target:"_blank",rel:"noopener noreferrer"},x=p(`<ul><li>leetcode 912 \u6392\u5E8F\u6570\u7EC4</li></ul><p>\u4E4B\u524D\u7684\u901A\u8FC7\u5F52\u5E76\u6392\u5E8F\u89E3\u8FC7\u6B64\u9898\uFF0C\u8FD9\u6B21\u901A\u8FC7\u5FEB\u901F\u6392\u5E8F\u6CD5\u89E3\u9898<br> \u601D\u8DEF\uFF1A\u5FEB\u901F\u6392\u5E8F\u6CD5\u901A\u8FC7\u9009\u5B9A\u57FA\u51C6\u6570\uFF0C\u5C06\u5C0F\u4E8E\u57FA\u51C6\u7684\u79FB\u52A8\u5230\u5DE6\u8FB9\uFF0C\u5927\u4E8E\u57FA\u51C6\u7684\u79FB\u52A8\u5230\u53F3\u8FB9\uFF0C\u518D\u5BF9\u5DE6\u53F3\u5B50\u533A\u95F4\u9012\u5F52\u5FEB\u901F\u6392\u5E8F<br> \u8FD9\u4E2A\u8FC7\u7A0B\u4E3A\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386\uFF0C\u5E76\u540C\u65F6\u4E5F\u5728\u6784\u9020\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u8FC7\u7A0B<br> \u6570\u7EC4\u957F\u5EA6\u4E3AN\uFF0C\u5219partition\u9700\u8981\u6267\u884CN\u6B21\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(N)\uFF0C\u8282\u70B9\u5206\u5E03\u5747\u5300\u7684\u7406\u60F3\u72B6\u6001\u4E0B\u6811\u7684\u5C42\u6570\u4E3AlogN\uFF0C\u6700\u574F\u7684\u60C5\u51B5\u4E3AN, \u6240\u4EE5\u7B97\u6CD5\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(NlogN)\uFF0C\u6700\u574F\u4E3AO(N^2)</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> mid <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token keyword">return</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 215 \u6570\u7EC4\u4E2D\u7684\u7B2Ck\u4E2A\u6700\u5927\u5143\u7D20</li></ul><p>\u5373\u5BFB\u627E\u6570\u7EC4\u4E2D\u7B2Ck\u5927\u7684\u5143\u7D20<br> \u601D\u8DEF\uFF1A\u4E24\u79CD\u89E3\u6CD5\uFF1A\u4E8C\u53C9\u5806(\u4F18\u5148\u961F\u5217)\u7684\u89E3\u6CD5\u548C\u5FEB\u901F\u6392\u5E8F\u7684\u53D8\u4F53\uFF0C\u5FEB\u901F\u9009\u62E9\u7B97\u6CD5<br> \u5FEB\u901F\u9009\u62E9\u7B97\u6CD5\uFF1A \u5728\u5FEB\u901F\u6392\u5E8F\u7B97\u6CD5\u4E2D\uFF0C\u901A\u8FC7\u9009\u5B9A\u57FA\u51C6mid\uFF0C\u83B7\u53D6\u4E86\u5DE6\u53F3\u5B50\u533A\u95F4\uFF0C\u800C\u5B50\u533A\u95F4\u957F\u5EA6\u5219\u8868\u793A\u4E86mid\u5728\u6570\u7EC4\u4E2D\u7684\u6B63\u786E\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u53EF\u4EE5\u8003\u8651\u964D\u5E8F\u6392\u5E8F\u6570\u7EC4\uFF0C\u5F53\u5DE6\u5B50\u533A\u95F4\u957F\u5EA6\u4E3A<code>k - 1</code>\u65F6\uFF0Cmid\u5219\u4E3A\u7B2Ck\u5927\u5143\u7D20<br> \u6216\u5347\u5E8F\u6392\u5E8F\u6570\u7EC4\u6C42\u53D6\u7B2CN - k\u5C0F\u7684\u5143\u7D20\uFF0C\u5373\u4E3A\u7B2Ck\u5927\u5143\u7D20</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  k <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> i <span class="token operator">=</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> j <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>
  <span class="token keyword">let</span> mid <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token keyword">return</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u8FD1\u516C\u5171\u7956\u5148\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u6700\u8FD1\u516C\u5171\u7956\u5148\u95EE\u9898" aria-hidden="true">#</a> \u6700\u8FD1\u516C\u5171\u7956\u5148\u95EE\u9898</h3>`,7),N={href:"https://mp.weixin.qq.com/s/njl6nuid0aalZdH5tuDpqQ",target:"_blank",rel:"noopener noreferrer"},S=p(`<ul><li>leetcode 236 \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</li></ul><p>\u7ED9\u5B9A\u4E00\u9897\u4E0D\u542B\u91CD\u590D\u5143\u7D20\u7684\u4E8C\u53C9\u6811\u4EE5\u53CA\u5176\u4E2D\u4E24\u4E2A\u8282\u70B9p\u548Cq\u8BA1\u7B97\u4E24\u8282\u70B9\u6700\u8FD1\u7684\u516C\u5171\u7956\u5148\u8282\u70B9</p><p>\u601D\u8DEF\uFF1A\u516C\u5171\u7956\u5148\u8282\u70B9\u5FC5\u5B9A\u5728\u5176\u5DE6\u53F3\u5B50\u6811\u4E2D\u5206\u522B\u53D1\u73B0p\u548Cq\uFF0C\u6216\u8BE5\u8282\u70B9\u4E3Ap\u6216q</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> p<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> q<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> p<span class="token punctuation">.</span>val <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment">// \u4E3A\u5F53\u524D\u8282\u70B9</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u904D\u5386\u5DE6\u5B50\u6811\u67E5\u627E</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment">// \u6536\u96C6\u5DE6\u53F3\u5B50\u6811\u8282\u70B9\u5E76\u5224\u65AD</span>
  <span class="token keyword">return</span> left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span> <span class="token comment">// \u8FD4\u56DE\u4E0D\u4E3A\u7A7A\u7684\u8282\u70B9\uFF0C\u82E5\u90FD\u4E3A\u7A7A\u5219\u8FD4\u56DE\u7A7A\u8282\u70B9</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1644 \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148 \u4E8C</li></ul><p>\u4E0E236\u9898\u7C7B\u4F3C\uFF0C\u4F46p\u548Cq\u4E0D\u4E00\u5B9A\u5B58\u5728\u4E8E\u4E8C\u53C9\u6811\u4E2D\uFF0C\u82E5p\u6216q\u4E0D\u5B58\u5728\u4E8E\u4E8C\u53C9\u6811\u4E2D\uFF0C\u5219\u8FD4\u56DEnull \u6B64\u9898\u88AB\u52A0\u9501\uFF0C\u56E0\u6B64\u4EE3\u7801\u672A\u88AB\u9A8C\u8BC1\uFF0C\u4F46\u89E3\u9898\u601D\u8DEF\u4E0E236\u7C7B\u4F3C<br> \u56E0\u4E3Ap\u548Cq\u4E0D\u4E00\u5B9A\u5B58\u5728\u4E8E\u6811\u4E2D\uFF0C\u56E0\u6B64\u9700\u8981\u5BF9\u6811\u8FDB\u884C\u5B8C\u6574\u904D\u5386\uFF0C\u9700\u8981\u5C06root\u8282\u70B9\u7684\u5224\u65AD\u653E\u5230\u540E\u5E8F\u4F4D\u7F6E\uFF0C\u540C\u65F6\u8BB0\u5F55\u662F\u5426\u53D1\u73B0p\u6216q\u8282\u70B9\uFF0C\u5728\u83B7\u53D6\u7ED3\u679C\u540E\uFF0C\u5224\u65AD\u8FC7p\u6216q\u4E0D\u518D\u6811\u4E2D\u5219\u8FD4\u56DEnull</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> foundP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> foundQ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> p<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> q<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>foundP <span class="token operator">||</span> <span class="token operator">!</span>foundQ<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> val1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> val2<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> val1 <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> val2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> val1<span class="token punctuation">)</span> foundP <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> val2<span class="token punctuation">)</span> foundQ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1650 \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148 \u4E09</li></ul><p>\u8FD9\u6B21\u4E8C\u53C9\u6811\u8282\u70B9\u4E2D\u5305\u542B\u6307\u5411\u7236\u8282\u70B9\u7684\u6307\u9488parent<br> \u7531\u4E8E\u5B58\u5728\u7236\u8282\u70B9\u6307\u9488\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4E0D\u8F93\u5165\u6839\u8282\u70B9\uFF0C\u95EE\u9898\u5C06\u88C5\u6362\u4E3A\u5355\u94FE\u8868\u7684\u4EA4\u70B9<br> \u6B64\u9898\u89E3\u6CD5\u601D\u8DEF\u4E0E<a href="#%E5%8F%8C%E6%8C%87%E9%92%88%E4%B9%8B%E9%93%BE%E8%A1%A8">\u53CC\u6307\u9488\u4E4B\u94FE\u8868</a>\u4E2Dleetcode 160\u9898\u76F8\u540C</p><ul><li>leetcode 1676 \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148 \u56DB</li></ul><p>\u4E0E236\u9898\u7C7B\u4F3C\uFF0C\u4F46\u7ED9\u5B9Anodes\u8282\u70B9\u5217\u8868\uFF0C\u67E5\u627E\u5217\u8868\u4E2D\u8282\u70B9\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148<br> \u6B64\u9898\u88AB\u52A0\u9501\uFF0C\u56E0\u6B64\u4EE3\u7801\u672A\u88AB\u9A8C\u8BC1\uFF0C\u4F46\u89E3\u9898\u601D\u8DEF\u4E0E236\u7C7B\u4F3C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> nodes<span class="token operator">:</span>TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> valueHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    valueHash<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> valueHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> values<span class="token operator">:</span>Set<span class="token operator">&lt;</span><span class="token keyword">typeof</span> root<span class="token punctuation">.</span>val<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">return</span> left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 235 \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</li></ul><p>\u4E0E236\u9898\u7C7B\u4F3C\uFF0C\u4F46\u4E8C\u53C9\u6811\u6362\u6210\u4E8C\u53C9\u641C\u7D22\u6811\uFF0C\u5047\u8BBEp.val &lt; q.val\uFF0C \u5219\u53EA\u6709\u6EE1\u8DB3 p.val &lt;= root &lt;= q.val\u7684\u8282\u70B9\u624D\u662F\u6700\u8FD1\u7684\u516C\u5171\u7956\u5148\uFF0C\u56E0\u6B64\u53EF\u4EE5\u6839\u636E\u6B64\u6761\u4EF6\u5BF9\u4E8C\u53C9\u641C\u7D22\u6811\u8FDB\u884C\u641C\u7D22</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> p<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> q<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> val1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> val2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> val1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> val2<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>TreeNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8282\u70B9\u8FC7\u5927\uFF0C\u5728\u5DE6\u5B50\u6811\u4E2D\u627E</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5176\u4ED6\u4E8C\u53C9\u6811\u76F8\u5173\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6\u4E8C\u53C9\u6811\u76F8\u5173\u95EE\u9898" aria-hidden="true">#</a> \u5176\u4ED6\u4E8C\u53C9\u6811\u76F8\u5173\u95EE\u9898</h3><ul><li>leetcode 341 \u6241\u5E73\u5316\u5D4C\u5957\u5217\u8868\u8FED\u4EE3\u5668</li></ul><p>\u7ED9\u4F60\u4E00\u4E2A\u5D4C\u5957\u7684\u6574\u6570\u5217\u8868 nestedList\uFF0C \u6BCF\u4E2A\u5143\u7D20\u8981\u4E48\u662F\u4E00\u4E2A\u6574\u6570\uFF0C\u8981\u4E48\u662F\u4E00\u4E2A\u5217\u8868\uFF0C \u5217\u8868\u4E2D\u53EF\u80FD\u662F\u6574\u6570\u4E5F\u53EF\u80FD\u662F\u5176\u4ED6\u5217\u8868\uFF0C\u5B9E\u73B0\u8FED\u4EE3\u5668\u7C7BNestedIterator,\u4F1A\u5148\u88AB\u8C03\u7528hasNext()\u65B9\u6CD5\uFF0C\u7136\u540E\u65F6next\u65B9\u6CD5\u8F93\u51FA\u6574\u6570</p><p>\u601D\u8DEF\uFF1A\u5206\u6790nestedList\u7ED3\u6784\u53EF\u77E5\uFF0C\u5176\u5BF9\u5E94\u7740\u591A\u53C9\u6811\uFF0C\u5F53\u5B58\u50A8\u5143\u7D20\u4E3A\u6574\u6570\u65F6\uFF0C\u8868\u793A\u53F6\u5B50\u8282\u70B9\uFF0C\u5BF9\u5E94\u5217\u8868\u65F6\u8868\u793A\u5176\u4ED6\u8282\u70B9\u96C6\u5408\uFF0C\u56E0\u6B64\u53EF\u4EE5\u901A\u8FC7\u904D\u5386\u591A\u53C9\u6811\uFF0C\u7F13\u5B58\u53F6\u5B50\u8282\u70B9\u7684\u65B9\u5F0F\u5BF9\u5217\u8868\u8FDB\u884C\u8FED\u4EE3\u5B9E\u73B0\u8FED\u4EE3\u5668\u3002</p><p>\u8FD9\u79CD\u65B9\u6CD5\u5728\u9762\u5BF9\u5927\u6570\u636E\u91CF\u65F6\u53EF\u80FD\u4F1A\u6709\u6027\u80FD\u95EE\u9898\uFF0C\u53EF\u4EE5\u8003\u8651\u5728hasNext\u65F6\u8FED\u4EE3\u591A\u53C9\u6811\uFF0C\u4F7F\u7F13\u5B58\u6570\u7EC4\u7684\u9996\u4E2A\u5143\u7D20\u4E3A\u53F6\u5B50\u8282\u70B9\uFF0C\u8C03\u7528next\u65F6\u76F4\u63A5\u8FD4\u56DE\u6574\u6570\u5373\u53EF</p>`,20),_={href:"https://mp.weixin.qq.com/s/uEmD5YVGG5LHQEmJQ2GSfw",target:"_blank",rel:"noopener noreferrer"},T=p(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span> <span class="token punctuation">{</span>
  list<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>NestedInteger<span class="token operator">&gt;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>nestedList<span class="token operator">:</span> NestedInteger<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> nestedList<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span> <span class="token comment">// \u5728hasNext\u4E2D\u8FED\u4EE3\u4FDD\u8BC1this.list\u7B2C\u4E00\u4E2A\u5143\u7D20\u4E3A\u6574\u6570</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> temp<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5012\u5E8F\u904D\u5386\uFF0C\u4FDD\u6301\u8282\u70B9\u62CD\u5E73\u987A\u5E8F</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 222 \u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570</li></ul><p>\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u5B9A\u4E49\u4E3A\u6BCF\u5C42\u90FD\u7D27\u51D1\u7684\u9760\u5DE6\u6392\u5217\uFF0C\u5BF9\u6BD4\u4E8E\u6EE1\u4E8C\u53C9\u6811(\u6BCF\u5C42\u90FD\u662F\u6EE1\u7684)\uFF0C\u5219\u662F\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u4E00\u79CD\u7279\u6B8A\u60C5\u51B5<br> \u5BF9\u4E8E\u4E00\u9897\u666E\u901A\u7684\u4E8C\u53C9\u6811\u8282\u70B9\u6570\u53EF\u901A\u8FC7\u904D\u5386\u6BCF\u4E2A\u8282\u70B9\u7EDF\u8BA1\u83B7\u5F97<br> \u82E5\u4E3A\u6EE1\u4E8C\u53C9\u6811\u5219\u8282\u70B9\u6570\u4E0E\u9AD8\u5EA6\u5448\u6307\u6570\u5173\u7CFB\uFF1A2^h - 1<br> \u5B8C\u5168\u4E8C\u53C9\u6811\u4E2D\u4E00\u5B9A\u6709\u4E00\u5927\u90E8\u5206\u5B50\u6811\u662F\u6EE1\u4E8C\u53C9\u6811\uFF0C\u56E0\u6B64\u53EF\u4EE5\u8003\u8651\u7ED3\u5408\u4E24\u79CD\u6811\u8282\u70B9\u7684\u8BA1\u7B97\u65B9\u6CD5\u6765\u8BA1\u7B97\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> root<span class="token punctuation">,</span> right <span class="token operator">=</span> root<span class="token punctuation">;</span>
  <span class="token keyword">let</span> hLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u6CBF\u7740\u5DE6\u4FA7\u548C\u53F3\u4FA7\u5206\u522B\u8BA1\u7B97\u9AD8\u5EA6</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    left <span class="token operator">=</span> left<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    hLeft<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    right <span class="token operator">=</span> right<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    hRight<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">// \u82E5\u9AD8\u5EA6\u76F8\u540C\u5219\u4F7F\u7528\u6EE1\u4E8C\u53C9\u6811\u7684\u8BA1\u7B97\u65B9\u6CD5\uFF0C\u5426\u5219\u4F7F\u7528\u666E\u901A\u4E8C\u53C9\u6811\u7684\u9012\u5F52\u7EDF\u8BA1\u65B9\u6CD5</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>hLeft <span class="token operator">===</span> hRight<span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hLeft<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u52A8\u6001\u89C4\u5212" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212</h2><p>\u52A8\u6001\u89C4\u5212\u4E09\u8981\u7D20\uFF1A\u91CD\u53E0\u5B50\u95EE\u9898\u3001\u6700\u4F18\u5B50\u7ED3\u6784\u3001\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B<br> \u52A8\u6001\u89C4\u5212\u79BB\u4E0D\u5F00\u9012\u5F52\u7B97\u6CD5(\u81EA\u9876\u5411\u4E0B\u5206\u89E3\u95EE\u9898)/\u9012\u63A8\u7B97\u6CD5(\u81EA\u5E95\u5411\u4E0A\u9012\u63A8\u7ED3\u679C)<br> ps:\u9012\u5F52\u7B97\u6CD5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u600E\u4E48\u8BA1\u7B97\uFF1F\u5C31\u662F\u7528\u5B50\u95EE\u9898\u4E2A\u6570\u4E58\u4EE5\u89E3\u51B3\u4E00\u4E2A\u5B50\u95EE\u9898\u9700\u8981\u7684\u65F6\u95F4\u3002</p><ul><li>\u91CD\u53E0\u5B50\u95EE\u9898:\u901A\u5E38\u4F7F\u7528\u5907\u5FD8\u5F55(\u5373\u6253\u8868)\u7684\u65B9\u5F0F\u907F\u514D\u91CD\u590D\u7684\u8BA1\u7B97</li><li>\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\uFF1A\u9012\u63A8\uFF0C\u786E\u5B9A\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\u7684\u57FA\u672C\u6A21\u5F0F\u662F\uFF1A<code>\u660E\u786E base case -&gt; \u660E\u786E\u300C\u72B6\u6001\u300D-&gt; \u660E\u786E\u300C\u9009\u62E9\u300D -&gt; \u5B9A\u4E49 dp \u6570\u7EC4/\u51FD\u6570\u7684\u542B\u4E49\u3002</code></li><li>\u6700\u4F18\u5B50\u7ED3\u6784\uFF1A\u5B50\u95EE\u9898\u95F4\u76F8\u4E92\u72EC\u7ACB\uFF0C\u4E0D\u76F8\u4E92\u5F71\u54CD</li></ul><p>\u5173\u8054\u9898\uFF1A</p><ul><li>leetcode 322 \u96F6\u94B1\u5151\u6362<br> \u5982\u5BF9\u4E8E\u76EE\u6807\u91D1\u989D amount=11 \uFF0Ccoins=[1, 2, 5], \u5206\u89E3\u95EE\u9898\u53EF\u7531 10+1, 9+2, 5+6\u7684\u65B9\u5F0F\u51D1\u6210\uFF0C\u56E0\u6B64\u8BB0<code>dp[i]</code>\u4E3A\u51D1\u6210\u91D1\u989Di\u7684\u6700\u5C11\u786C\u5E01\u6570\uFF0C\u4EC5\u6B64<code>dp[11] = min(dp[10], dp[9], dp[6]) + 1</code>, \u521D\u59CBbase <code>dp[0] = 0</code>, \u90E8\u5206\u4E0D\u80FD\u51D1\u6210\u7684\u6570\u989D\u5219\u8BB0\u4E3A-1\uFF0C\u56E0\u6B64\u4E0A\u8FF0\u4F8B\u5B50\u5373\u53EF\u62BD\u8C61\u51FA\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u521D\u59CB\u5316dp\u4E3Aamount+1\uFF0C\u5C31\u56E0\u4E3A\u51D1\u6210amount\u6700\u591A\u4F7F\u7528amount\u4E2A\u786C\u5E01</span>
  <span class="token keyword">let</span> dp<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u8BDD\u8D77\u59CB\u503C</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5FAA\u73AF\u8BA1\u7B97\u6BCF\u4E2A\u91D1\u989D\u6240\u9700\u8981\u7684\u6700\u5C11\u786C\u5E01\u6570</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u5C1D\u8BD5\u6BCF\u4E2A\u786C\u5E01\u7EC4\u5408</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> coin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// \u82E5\u9047\u5230\u65E0\u6CD5\u8FBE\u6210\u7684\u7EC4\u5408\u5219\u76F4\u63A5\u8DF3\u8FC7</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6BD4\u8F83\u4E0E\u66F4\u65B0\u786C\u5E01\u7EC4\u5408\u6570</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u82E5\u76EE\u6807\u91D1\u989D\u4ECD\u7B49\u4E8E\u521D\u59CB\u503C\uFF0C\u5219\u8FD4\u56DE\u65E0\u6CD5\u51D1\u6210\u7684\u7ED3\u679C</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">===</span> amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 509 \u6590\u6CE2\u90A3\u5951\u6570 \u53D6\u521D\u59CB\u503C<code>dp[1] = 1</code>, <code>dp[2] = 1</code>,\u5219\u4ECE\u7B2C3\u4E2A\u6570\u5F00\u59CB\u5FAA\u73AF,\u8BA1\u7B97<code>dp[n] = dp[n-1] + dp[n-2]</code>\uFF0C\u5E76\u66F4\u65B0\u54CD\u5E94\u7684\u4E24\u4E2A\u7F13\u5B58\u503C\uFF0C\u76F4\u5230<code>i=n</code>\u5219\uFF0C\u8FD4\u56DE\u6B64\u65F6\u7684\u6700\u65B0\u7F13\u5B58\u503C\u5373\u53EF</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dp<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tmp <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u56DE\u6EAF\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF\u6CD5" aria-hidden="true">#</a> \u56DE\u6EAF\u6CD5</h2><p>\u56DE\u6EAF\u6CD5\u9700\u8981\u8003\u8651\u4E09\u4E2A\u8981\u7D20\uFF1A\u8DEF\u5F84\u3001\u9009\u62E9\u5217\u8868\u3001\u7ED3\u675F\u6761\u4EF6;\u5176\u672C\u8D28\u662F\u591A\u53C9\u6811\u7684\u904D\u5386\uFF0C\u5728\u524D\u5E8F\u4F4D\u7F6E\u64CD\u4F5C\u8BB0\u5F55\uFF0C\u5728\u540E\u7EED\u4F4D\u7F6E\u64CD\u4F5C\u5220\u9664</p><ul><li>leetcode 46 \u5168\u6392\u5217</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Visited</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4E3B\u51FD\u6570\u4E2D\u521D\u59CB\u5316visited\u8BB0\u5F55\u8BBF\u95EE\u8FC7\u7684\u6570\u5B57\uFF0Ctrack\u8BB0\u5F55\u8BBF\u95EE\u8DEF\u5F84\uFF0C\u5373\u6392\u5217</span>
    <span class="token keyword">let</span> visited<span class="token operator">:</span>Visited <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> track<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> track<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> visited<span class="token operator">:</span>Visited<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u7EC8\u6B62\u6761\u4EF6\uFF0C\u5B58\u50A8\u4E00\u79CD\u6392\u5217\u5E76\u8FD4\u56DE</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>track<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// \u8DF3\u8FC7\u5DF2\u8BBF\u95EE\u7684\u6570\u5B57</span>
      visited<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u524D\u6807\u8BB0\u8BBF\u95EE\uFF0C\u5E76\u8BB0\u5F55\u8282\u70B9</span>
      track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>
      visited<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u8FD4\u56DE\u540E\uFF0C\u5220\u9664\u6807\u8BB0\uFF0C\u5E76\u5220\u9664\u8282\u70B9</span>
      track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 51 N\u7687\u540E\u95EE\u9898</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">solveNQueens</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">solveNQueens</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> solve<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    solve<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>solve<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">===</span> track<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u672C\u8F6E\u9012\u5F52\u8D85\u8FC7\u6700\u540E\u4E00\u884C\uFF0C\u56E0\u6B64\u6536\u96C6\u7ED3\u679C\u7ED3\u675F\u9012\u5F52</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> track<span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u5F53\u524D\u5217</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> row<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      track<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u524D\u6807\u8BB0</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u65B0\u7684\u884C</span>
      track<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u540E\u56DE\u6EAF</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
  <span class="token function">isValid</span><span class="token punctuation">(</span>col<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> row<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> track<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> track<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// \u5224\u65AD\u8BE5\u4F4D\u7F6E\u662F\u5426\u80FD\u653E\u7F6E\u4E00\u4E2A\u7687\u540E</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>track<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>track<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>track<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bfs\u7B97\u6CD5\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#bfs\u7B97\u6CD5\u6846\u67B6" aria-hidden="true">#</a> BFS\u7B97\u6CD5\u6846\u67B6</h2><p>\u5176\u6838\u5FC3\u601D\u60F3\u662F\uFF0C\u628A\u95EE\u9898\u62BD\u8C61\u6210\u56FE\uFF0C\u4ECE\u4E00\u4E2A\u70B9\u5411\u56DB\u5468\u6269\u6563\uFF0C\u4F7F\u7528\u961F\u5217\u6682\u5B58\u6269\u6563\u70B9\uFF0C\u65B9\u4FBF\u8FDB\u884C\u4E0B\u4E00\u8F6E\u8FED\u4EE3</p><ul><li>leetcode 111\u9898 \u4E8C\u53C9\u6811\u7684\u6700\u5C0F\u6DF1\u5EA6</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> queue<span class="token operator">:</span>TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> deep <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u5C42\u6570</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u4EC5\u5BF9\u957F\u5EA6\u8FDB\u884C\u5FAA\u73AF\uFF0C\u4E0D\u4F7F\u7528\u7D22\u5F15</span>
      <span class="token keyword">let</span> cur<span class="token operator">:</span>TreeNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6BCF\u6B21\u4ECE\u961F\u5934\u63A8\u51FA\u4E00\u4E2A\u8282\u70B9</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> deep<span class="token punctuation">;</span> <span class="token comment">// \u627E\u5230\u53F6\u5B50\u8282\u70B9\u5219\u76F4\u63A5\u8FD4\u56DE</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4F9D\u6B21\u63A8\u5165\u5DE6\u53F3\u8282\u70B9</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    deep<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u904D\u5386\u5B8C\u4E00\u5C42\u66F4\u65B0\u5C42\u6570</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> deep<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 752 \u6253\u5F00\u8F6C\u76D8\u9501<br> \u6BCF\u6B21\u53EA\u80FD\u8F6C\u52A8\u4E00\u4E2A\u8F6E\u76D8\u4E14\u8F6E\u76D8\u53EA\u80FD\u8F6C\u52A8\u4E00\u4E2A\u6570\u7EC4\uFF0C\u5373\u5F53\u524D\u72B6\u6001\u4E0B\u4E00\u6B65\u53EF\u80FD\u67098\u79CD\u8F6C\u6CD5(4\u4E2A\u6570\u5B57\uFF0C\u4E0A\u4E0B2\u4E2D\u8F6C\u6CD5)\uFF0C\u4F7F\u7528\u6700\u5C11\u7684\u6B65\u9AA4\u8F6C\u52A8\u8F6E\u76D8\u5230target\u7EC4\u5408\uFF0C\u4E14\u8FC7\u7A0B\u4E2D\u987B\u907F\u5F00deadends</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">openLock</span><span class="token punctuation">(</span>deadends<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> visited<span class="token operator">:</span>Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4F7F\u7528set\u8BB0\u5F55\u8BBF\u95EE\u8BB0\u5F55\uFF0C\u5728visited\u4E2D\u7684\u7EC4\u5408\u4E0D\u4F1A\u88AB\u5206\u6790</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> deadends<span class="token punctuation">)</span> visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06deadends\u52A0\u5165\u5230visited\u4E2D\u4FBF\u4E8E\u8DF3\u8FC7</span>
  <span class="token keyword">let</span> queue<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0000&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u961F\u5217</span>
  <span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u961F\u5217\u4E0D\u4E3A\u7A7A\u65F6\u8FDB\u884C\u904D\u5386</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u53D6\u5F53\u524D\u5C42\u5269\u4F59\u7684\u8282\u70B9\u6570\u4F5C\u4E3A\u904D\u5386\u6B21\u6570\uFF0C\u800C\u4E0D\u7528\u505A\u7D22\u5F15</span>
      <span class="token keyword">let</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECE\u961F\u5934\u4E2D\u63A8\u51FA\u5F53\u524D\u7EC4\u5408(\u8282\u70B9)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token comment">// \u5F53\u524D\u8282\u70B9\u5DF2\u8BBF\u95EE\u8FC7\u6216\u5728deadends\u4E2D\u5219\u8DF3\u8FC7\u8BE5\u7EC4\u5408\u5206\u6790</span>
      <span class="token keyword">else</span> visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06\u5F53\u524D\u8282\u70B9\u52A0\u5165\u5230visited\u4E2D\uFF0C\u907F\u514D\u540E\u7EED\u91CD\u590D\u5206\u6790</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> step<span class="token punctuation">;</span> <span class="token comment">// \u82E5\u5F53\u524D\u8282\u70B9\u521A\u597D\u7B49\u4E8E\u76EE\u6807\u5BC6\u7801\uFF0C\u5219\u76F4\u63A5\u8FD4\u56DE\u6B65\u6570</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u6536\u96C6\u8BE5\u7EC4\u5408(\u8282\u70B9)\u7684\u4E0B\u4E00\u6B65\u53EF\u80FD\u72B6\u6001\uFF0C8\u79CD</span>
        <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// j position add number</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// node  visited then add to queue</span>
          queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        tmp <span class="token operator">=</span> <span class="token function">minusOne</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// j position minus number</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    step<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// analyze one node then add step</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// not found solution then return -1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// circular add one</span>
<span class="token keyword">function</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> j<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span>
  <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> tmp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// circular minus one</span>
<span class="token keyword">function</span> <span class="token function">minusOne</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> j<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;9&#39;</span>
  <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> tmp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u56DE\u6EAF\u6CD5\u89E3\u6392\u5217-\u7EC4\u5408-\u5B50\u96C6\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF\u6CD5\u89E3\u6392\u5217-\u7EC4\u5408-\u5B50\u96C6\u95EE\u9898" aria-hidden="true">#</a> \u56DE\u6EAF\u6CD5\u89E3\u6392\u5217/\u7EC4\u5408/\u5B50\u96C6\u95EE\u9898</h2><p>\u6392\u5217/\u7EC4\u5408/\u5B50\u96C6\u95EE\u9898\u53EF\u4EE5\u5F52\u7ED3\u4E3A\u4ECEnums\u6570\u7EC4\u4E2D\u53D6\u51FA\u82E5\u5E72\u5143\u7D20\uFF0C\u5BF9\u5E94\u60C5\u5F62\u6709a\uFF1A\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009\uFF0Cb\uFF1A\u6709\u91CD\u590D\u4E0D\u53EF\u590D\u9009\uFF0Cc:\u65E0\u91CD\u590D\u53EF\u590D\u9009\uFF0C\u6309\u6392\u5217/\u7EC4\u5408/\u5B50\u96C6\u8FDB\u884C\u5212\u5206\uFF0C\u5219\u603B\u5171\u67099\u79CD\u60C5\u51B5</p><p>\u7B97\u6CD5\u6846\u67B6\u4F7F\u7528\u4E24\u79CD\u56DE\u6EAF\u9012\u5F52\u6811\u5373\u53EF\uFF0C\u5B50\u96C6/\u7EC4\u5408\u53EF\u5F52\u4E3A\u4E00\u7C7B\u9012\u5F52\u6811\uFF0C\u800C\u6392\u5217\u5219\u5355\u72EC\u4E00\u7C7B\uFF0C\u6240\u6709\u60C5\u51B5\u5747\u5728\u8FD9\u4E24\u79CD\u6811\u4E0A\u8FDB\u884C\u526A\u679D/\u6269\u589E</p><h3 id="\u5B50\u96C6-\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u5B50\u96C6-\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u5B50\u96C6(\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009)</h3><ul><li>leetcode 78 \u5B50\u96C6:\u8FD4\u56DEnums\u4E2D\u80FD\u7EC4\u5408\u51FA\u7684\u6240\u6709\u5B50\u96C6<br> \u5B50\u96C6\u4E0E\u987A\u5E8F\u65E0\u5173\uFF0C\u56E0\u6B64\u9075\u5FAA\u9012\u5F52\u68111</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">subsets</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">subsets</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">subsets</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtracks</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">backtracks</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// every iteration collect the trace(every node)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment">// use start control end of recursion</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pre-order push to trace</span>
      <span class="token comment">// next recursion start from i+1 to avoid duplicates subsets</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtracks</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token comment">// when i+1 equals nums.length,the recursion will stopped</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// backtracking</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EC4\u5408-\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408-\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u7EC4\u5408(\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009)</h3><ul><li>leetcode 77 \u7EC4\u5408:\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570 n \u548C k\uFF0C\u8FD4\u56DE\u8303\u56F4 [1, n] \u4E2D\u6240\u6709\u53EF\u80FD\u7684 k \u4E2A\u6570\u7684\u7EC4\u5408\u3002</li></ul><p>\u89E3\u9898\u601D\u8DEF\u63A5\u4E0A\u9898\uFF0C\u5927\u5C0F\u4E3Ak\u7684\u7EC4\u5408\u5C31\u662F\u5927\u5C0F\u4E3Ak\u7684\u5B50\u96C6\uFF0C\u56E0\u6B64\u4EC5\u9700\u5728\u4E0A\u9898\u7B97\u6CD5\u4E2D\u53D6\u5927\u5C0F\u4E3Ak\u7684\u7ED3\u679C\u8FDB\u884C\u8F93\u51FA\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">subCombine</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">subCombine</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">backtrack</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> k<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">===</span> trace<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6392\u5217-\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u6392\u5217-\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u6392\u5217(\u5143\u7D20\u65E0\u91CD\u590D\u4E0D\u53EF\u590D\u9009)</h3><ul><li>leetcode 46 \u5168\u6392\u5217 \u7ED9\u5B9A\u4E0D\u91CD\u590D\u7684\u6570\u7EC4nums\u8F93\u51FA\u5176\u5143\u7D20\u7684\u5168\u6392\u5217\uFF0C\u4E0D\u53EF\u590D\u9009</li></ul><p>\u7531\u4E8E\u662F\u5168\u6392\u5217\uFF0C\u5219\u4E0D\u53EF\u7C7B\u4F3C\u4E0A\u8FF0\u7B97\u6CD5\u4E00\u6837\u4F7F\u7528start\u9650\u5236\u540E\u7EED\u7684\u5143\u7D20\u9009\u62E9\uFF0C\u56E0\u6B64\u91C7\u7528used\u8F85\u52A9\u6570\u7EC4\u7528\u4E8E\u8BB0\u5F55\u5DF2\u8BBF\u95EE\u7684\u5143\u7D20\uFF0C\u7528\u4E8E\u907F\u514D\u91CD\u590D\u9009\u62E9\uFF0C \u7B97\u6CD5\u4E3B\u4F53\u4E0E\u4E0A\u8FF0\u7C7B\u4F3C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">permuteUnique</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">permuteUnique</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> used<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> used<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B50\u96C6-\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u5B50\u96C6-\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u5B50\u96C6(\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009)</h3><ul><li>leetcode 90 \u5B50\u96C6(\u4E8C) \u6574\u6570\u6570\u7EC4 nums \uFF0C\u5176\u4E2D\u53EF\u80FD\u5305\u542B\u91CD\u590D\u5143\u7D20\uFF0C\u8BF7\u4F60\u8FD4\u56DE\u8BE5\u6570\u7EC4\u6240\u6709\u53EF\u80FD\u7684\u5B50\u96C6\uFF08\u5E42\u96C6\uFF09\u3002<br> \u89E3\u96C6 \u4E0D\u80FD \u5305\u542B\u91CD\u590D\u7684\u5B50\u96C6\u3002\u8FD4\u56DE\u7684\u89E3\u96C6\u4E2D\uFF0C\u5B50\u96C6\u53EF\u4EE5\u6309 \u4EFB\u610F\u987A\u5E8F \u6392\u5217\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u6392\u5E8F\uFF0C\u4FDD\u8BC1\u76F8\u540C\u7684\u5143\u7D20\u5728\u76F8\u90BB\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// \u904D\u5386\u65F6\u8DF3\u8FC7\u76F8\u540C\u7684\u5143\u7D20\uFF0C\u907F\u514D\u4EA7\u751F\u91CD\u590D\u7684\u7EC4\u5408</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EC4\u5408-\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408-\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u7EC4\u5408(\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009)</h3><ul><li>leetcode 40 \u7EC4\u5408\u603B\u6570(\u4E8C) \u7ED9\u5B9A\u4E00\u4E2A\u5019\u9009\u4EBA\u7F16\u53F7\u7684\u96C6\u5408 candidates(\u6709\u91CD\u590D\u7F16\u53F7) \u548C\u4E00\u4E2A\u76EE\u6807\u6570 target \uFF0C\u627E\u51FA candidates \u4E2D\u6240\u6709\u53EF\u4EE5\u4F7F\u6570\u5B57\u548C\u4E3A target \u7684\u65E0\u91CD\u590D\u7EC4\u5408\u3002<br> candidates \u4E2D\u7684\u6BCF\u4E2A\u6570\u5B57\u5728\u6BCF\u4E2A\u7EC4\u5408\u4E2D\u53EA\u80FD\u4F7F\u7528 \u4E00\u6B21 \u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>candidates<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">combinationSum2</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  curSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  target<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token operator">|</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token function">combinationSum2</span><span class="token punctuation">(</span>cand<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    cand<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>cand<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traceback</span><span class="token punctuation">(</span>cand<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cand<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> cand<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">+=</span> cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>cand<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">-=</span> cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6392\u5217-\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u6392\u5217-\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u6392\u5217(\u5143\u7D20\u91CD\u590D\u4E0D\u53EF\u590D\u9009)</h3><ul><li>leetcode 47 \u5168\u6392\u5217 \u7ED9\u5B9A\u4E00\u4E2A\u53EF\u5305\u542B\u91CD\u590D\u6570\u5B57\u7684\u5E8F\u5217 nums \uFF0C\u6309\u4EFB\u610F\u987A\u5E8F \u8FD4\u56DE\u6240\u6709\u4E0D\u91CD\u590D\u7684\u5168\u6392\u5217\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">permuteUnique</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">permuteUnique</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u540C\u6837\u9700\u8981\u5148\u8FDB\u884C\u6392\u5E8F</span>
    <span class="token keyword">let</span> used<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> used<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token comment">// \u65B0\u589E\u53BB\u91CD\u6761\u4EF6\uFF0C\u8DF3\u8FC7\u91CD\u590D\u7684\u5143\u7D20\uFF0C!used[i-1]\u4FDD\u8BC1\u4E86\u76F8\u540C\u7684\u5143\u7D20\u4F4D\u7F6E\u76F8\u5BF9\u56FA\u5B9A</span>
      <span class="token comment">// \u5143\u7D20\u76F8\u540C\u65F6\uFF0C\u5F53\u524D\u4E00\u4E2A\u5143\u7D20\u672A\u88AB\u9009\u4E2D\uFF0C\u5219\u5F53\u524D\u5143\u7D20\u4E0D\u53EF\u8D8A\u8FC7\u524D\u4E00\u4E2A\u5143\u7D20\u8FDB\u884C\u6392\u5217</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B50\u96C6-\u7EC4\u5408-\u5143\u7D20\u65E0\u91CD\u590D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u5B50\u96C6-\u7EC4\u5408-\u5143\u7D20\u65E0\u91CD\u590D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u5B50\u96C6/\u7EC4\u5408(\u5143\u7D20\u65E0\u91CD\u590D\u53EF\u590D\u9009)</h3><ul><li>leetcode 39 \u7EC4\u5408\u603B\u6570 \u65E0\u91CD\u590D\u5143\u7D20 \u7684\u6574\u6570\u6570\u7EC4 candidates \u548C\u4E00\u4E2A\u76EE\u6807\u6574\u6570 target \uFF0C\u627E\u51FA candidates \u4E2D\u53EF\u4EE5\u4F7F\u6570\u5B57\u548C\u4E3A\u76EE\u6807\u6570 target \u7684 \u6240\u6709 \u4E0D\u540C\u7EC4\u5408 \uFF0C\u5E76\u4EE5\u5217\u8868\u5F62\u5F0F\u8FD4\u56DE<br> candidates \u4E2D\u7684 \u540C\u4E00\u4E2A \u6570\u5B57\u53EF\u4EE5 \u65E0\u9650\u5236\u91CD\u590D\u88AB\u9009\u53D6 \u3002\u5982\u679C\u81F3\u5C11\u4E00\u4E2A\u6570\u5B57\u7684\u88AB\u9009\u6570\u91CF\u4E0D\u540C\uFF0C\u5219\u4E24\u79CD\u7EC4\u5408\u662F\u4E0D\u540C\u7684\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>candidates<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">combinationSum</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  curSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  target<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token operator">|</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token function">combinationSum</span><span class="token punctuation">(</span>cand<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>cand<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traceback</span><span class="token punctuation">(</span>cand<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u589E\u52A0\u8DF3\u51FA\u6761\u4EF6\uFF0C\u5F53\u524D\u548C\u5927\u4E8E\u76EE\u6807\u65F6\u7ED3\u675F\u672C\u6B21\u9012\u5F52</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cand<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">+=</span> cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u9012\u5F52\u4F20\u5165\u8D77\u70B9i \u800C\u4E0D\u662Fi+1 \u53EF\u91CD\u590D\u4F7F\u7528i\u4F4D\u7F6E\u7684\u5143\u7D20</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>cand<span class="token punctuation">,</span> trace<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>curSum <span class="token operator">-=</span> cand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6392\u5217-\u5143\u7D20\u65E0\u91CD\u590D\u53EF\u590D\u9009" tabindex="-1"><a class="header-anchor" href="#\u6392\u5217-\u5143\u7D20\u65E0\u91CD\u590D\u53EF\u590D\u9009" aria-hidden="true">#</a> \u6392\u5217(\u5143\u7D20\u65E0\u91CD\u590D\u53EF\u590D\u9009)</h3><ul><li>leetcode\u4E0A\u6CA1\u6709\u5BF9\u5E94\u7684\u9898\u76EE\uFF0C\u957F\u5EA6\u4E3A3\u7684\u6570\u7EC4\u5168\u6392\u5217\u4E3A3^3=27\u79CD\uFF0C\u4E4B\u524D\u7684\u7B97\u6CD5\u4F7F\u7528\u4E86used\u6570\u7EC4\u8FDB\u884C\u526A\u679D\uFF0C\u73B0\u5728\u53EF\u91CD\u590D\u9009\u5728\u5143\u7D20\uFF0C\u53BB\u6389used\u6570\u7EC4\u5373\u53EF</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">permuteUnique</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>trace<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      trace<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
      trace<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B50\u96C6\u4E0E\u7EC4\u5408\u95EE\u9898\u672C\u8D28\u76F8\u540C\uFF0C\u4EC5\u9012\u5F52\u7EC8\u6B62\u6761\u4EF6\u4E0D\u540C</p><h2 id="\u4E8C\u5206\u641C\u7D22\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u641C\u7D22\u7B97\u6CD5" aria-hidden="true">#</a> \u4E8C\u5206\u641C\u7D22\u7B97\u6CD5</h2><p>\u4E8C\u5206\u641C\u7D22\u7B97\u6CD5\u9002\u7528\u4E8E\u6709\u5E8F\u7684\u6570\u7EC4\u67E5\u627E\uFF0C\u9009\u62E9\u4E2D\u95F4\u70B9\uFF0C\u786E\u5B9A\u76EE\u6807\u6240\u5728\u533A\u95F4\uFF0C\u518D\u6B21\u7F29\u5C0F\u8303\u56F4\uFF0C\u76F4\u5230\u627E\u5230\u76EE\u6807\u6216\u89E6\u53D1\u8FB9\u754C\u6761\u4EF6\u3002<br> \u901A\u5E38\u6709\u4E09\u79CD\u573A\u666F1\u3001\u627E\u5230\u76EE\u6807\uFF1B2\u3001\u786E\u5B9A\u76EE\u6807\u51FA\u73B0\u5DE6\u8FB9\u754C\uFF1B3\u3001\u786E\u5B9A\u76EE\u6807\u51FA\u73B0\u53F3\u8FB9\u754C\u3002<br> \u800C\u7B97\u6CD5\u7684\u5DE6\u53F3\u6307\u9488\u8FB9\u754C\u9009\u62E9\u53C8\u53EF\u5206\u4E3A\u5168\u95ED\u533A\u95F4\u3001\u5DE6\u95ED\u53F3\u5F00\u533A\u95F4\u4E24\u79CD\uFF0C\u4E0D\u540C\u7684\u5F00\u95ED\u65B9\u6CD5\uFF0C\u5BF9\u5E94\u4E86\u4E0D\u540C\u7684\u8FB9\u754C\u6761\u4EF6\uFF0C\u4F46\u672C\u8D28\u662F\u76F8\u540C\u7684\uFF0C\u4E3A\u4E86\u4FBF\u4E8E\u7406\u89E3\uFF0C\u63A8\u8350\u4F7F\u7528\u5168\u95ED\u533A\u95F4</p><ul><li>leetcode 34\u9898 \u7ED9\u4F60\u4E00\u4E2A\u6309\u7167\u975E\u9012\u51CF\u987A\u5E8F\u6392\u5217\u7684\u6574\u6570\u6570\u7EC4 nums\uFF0C\u548C\u4E00\u4E2A\u76EE\u6807\u503C target\u3002\u8BF7\u4F60\u627E\u51FA\u7ED9\u5B9A\u76EE\u6807\u503C\u5728\u6570\u7EC4\u4E2D\u7684\u5F00\u59CB\u4F4D\u7F6E\u548C\u7ED3\u675F\u4F4D\u7F6E\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>demo<span class="token punctuation">.</span><span class="token function">left_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">,</span> demo<span class="token punctuation">.</span><span class="token function">right_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u4E8C\u5206\u67E5\u627E\u5DE6\u8FB9\u754C</span>
  <span class="token function">left_bound</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u786E\u5B9A\u5DE6\u53F3\u95ED\u533A\u95F4</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5F53\u533A\u95F4\u957F\u5EA6\u4E3A0\u65F6\u9000\u51FA\u5FAA\u73AF\uFF0C\u5373\u6B64\u65F6left &gt; right</span>
      <span class="token keyword">let</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u786E\u5B9A\u4E2D\u95F4\u70B9</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u76EE\u6807\u5728\u53F3\u533A\u95F4\uFF0C\u6536\u7F29\u5DE6\u8FB9\u754C</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u76EE\u6807\u5728\u5DE6\u533A\u95F4\uFF0C\u6536\u7F29\u53F3\u8FB9\u754C</span>
      <span class="token comment">// \u53D1\u73B0\u76EE\u6807\u56FA\u5B9A\u5DE6\u8FB9\u754C\uFF0C\u6536\u7F29\u53F3\u8FB9\u754C\uFF0C\u7ED3\u5408\u5FAA\u73AF\u9000\u51FA\u6761\u4EF6\uFF1B\u5C06\u521A\u597D\u4F4D\u4E8E\u7B2C\u4E00\u4E2A\u4E0D\u4E3Atarget\u7684\u6570\u4E0A</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// left\u82E5\u6EA2\u51FA\u7D22\u5F15\u5219\u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// left\u4F4D\u7F6E\u5373\u9996\u6B21\u51FA\u73B0\u7684\u4F4D\u7F6E</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u4E8C\u5206\u67E5\u627E\u53F3\u8FB9\u754C\uFF0C\u539F\u7406\u4E0Eleft_bound\u7C7B\u4F3C</span>
  <span class="token function">right_bound</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 704\u9898 \u4E8C\u5206\u67E5\u627E \u7ED9\u5B9A\u4E00\u4E2A n \u4E2A\u5143\u7D20\u6709\u5E8F\u7684\uFF08\u5347\u5E8F\uFF09\u6574\u578B\u6570\u7EC4 nums \u548C\u4E00\u4E2A\u76EE\u6807\u503C target \uFF0C\u5199\u4E00\u4E2A\u51FD\u6570\u641C\u7D22 nums \u4E2D\u7684 target\uFF0C\u5982\u679C\u76EE\u6807\u503C\u5B58\u5728\u8FD4\u56DE\u4E0B\u6807\uFF0C\u5426\u5219\u8FD4\u56DE -1\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u4E8C\u5206\u641C\u7D22</span>
<span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1011 \u5728D\u5929\u5185\u9001\u8FBE\u5305\u88F9\u7684\u80FD\u529B(\u4ED8\u8D39\u9898)</li><li>leetcode 410 \u5206\u5272\u6570\u7EC4\u7684\u6700\u5927\u503C</li><li>leetcode 875 \u7231\u5403\u9999\u8549\u7684\u73C2\u73C2</li></ul><p>TODO:\u672C\u7BC7\u4E3A\u4ED8\u8D39\u6587\u7AE0\uFF0C\u6682\u65F6\u8DF3\u8FC7(https://labuladong.gitee.io/algo/2/20/31/)</p><h2 id="\u53CC\u6307\u9488\u4E4B\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u53CC\u6307\u9488\u4E4B\u94FE\u8868" aria-hidden="true">#</a> \u53CC\u6307\u9488\u4E4B\u94FE\u8868</h2><ul><li>leetcode 21 \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> list2<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token comment">// tempHead\u8BBE\u7F6EtempHead\u6765\u7B80\u5316\u903B\u8F91</span>
  <span class="token keyword">let</span> tempHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> tempHead<span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> list1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> list2<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5C06\u8F83\u5C0F\u7684\u8282\u70B9\u5408\u5E76\u5230\u7ED3\u679C\u4E2D</span>
      p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>
      p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
      p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>
  <span class="token keyword">return</span> tempHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 86 \u5206\u9694\u94FE\u8868 \u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9 head \u548C\u4E00\u4E2A\u7279\u5B9A\u503C x \uFF0C\u8BF7\u4F60\u5BF9\u94FE\u8868\u8FDB\u884C\u5206\u9694\uFF0C\u4F7F\u5F97\u6240\u6709 \u5C0F\u4E8E x \u7684\u8282\u70B9\u90FD\u51FA\u73B0\u5728 \u5927\u4E8E\u6216\u7B49\u4E8E x \u7684\u8282\u70B9\u4E4B\u524D\u3002</li></ul><p>\u4E0Eleetcode 21 \u76F8\u53CD\uFF0C\u76F8\u5F53\u4E8E\u5206\u94FE\u8868</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tempHead1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> tempHead2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> tempHead1<span class="token punctuation">;</span>
  <span class="token keyword">let</span> p2 <span class="token operator">=</span> tempHead2<span class="token punctuation">;</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      p2<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
      p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      p1<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
      p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  p1<span class="token punctuation">.</span>next <span class="token operator">=</span> tempHead2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token keyword">return</span> tempHead1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 23 \u5408\u5E76K\u4E2A\u5347\u5E8F\u94FE\u8868\uFF1A\u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\u6570\u7EC4\uFF0C\u6BCF\u4E2A\u94FE\u8868\u90FD\u5DF2\u7ECF\u6309\u5347\u5E8F\u6392\u5217\u3002 \u8BF7\u4F60\u5C06\u6240\u6709\u94FE\u8868\u5408\u5E76\u5230\u4E00\u4E2A\u5347\u5E8F\u94FE\u8868\u4E2D\uFF0C\u8FD4\u56DE\u5408\u5E76\u540E\u7684\u94FE\u8868\u3002</li></ul>`,69),A=s("br",null,null,-1),j=s("br",null,null,-1),M=p(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>lists<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> tmpNode<span class="token operator">:</span>ListNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u865A\u62DF\u5934\u8282\u70B9</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> tmpNode<span class="token punctuation">;</span> <span class="token comment">// \u64CD\u4F5C\u6307\u9488</span>
  <span class="token comment">// \u4F20\u5165\u6BD4\u8F83\u51FD\u6570\uFF0C\u5B9E\u4F8B\u5316\u6700\u5C0F\u5806\uFF0C\u6700\u5C0F\u5806\u53D6\u81EA\u516C\u5171\u65B9\u6CD5\u4E2D\u7684\u6700\u5C0F\u5806\u7C7B\uFF0C\u8BE6\u7EC6\u4EE3\u7801\u70B9\u51FB\u4E0A\u65B9\u94FE\u63A5  </span>
  <span class="token keyword">let</span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Heap<span class="token operator">&lt;</span>ListNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>val <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u521D\u59CB\u5316\u5934\u8282\u70B9</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u8FED\u4EE3\u7684\u6BD4\u8F83\uFF0C\u53D6\u51FA\u6700\u5C0F\u8282\u70B9</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span>size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> swapNode <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> swapNode<span class="token punctuation">;</span>
    <span class="token comment">// \u63A8\u5165\u5F39\u51FA\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u975E\u7A7A\u8282\u70B9</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>swapNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span> minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>swapNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// \u79FB\u52A8\u64CD\u4F5C\u6307\u9488</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> tmpNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 19 \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2CN\u4E2A\u8282\u70B9</li></ul><p>\u6B64\u9898\u4E0E\u627E\u5230\u5012\u6570\u7B2CN\u4E2A\u8282\u70B9\u7C7B\u4F3C\uFF0C\u4F7F\u7528\u5FEB\u6162\u53CC\u6307\u9488\uFF0C\u5148\u627E\u5230\u5012\u6570\u7B2CN+1\u4E2A\u8282\u70B9\uFF0C\u7136\u540E\u5220\u9664\u8282\u70B9\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmpNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4F7F\u7528\u865A\u62DF\u5934\u8282\u70B9\uFF0C\u5728n\u5927\u4E8E\u7B49\u4E8E\u94FE\u8868\u957F\u5EA6\u65F6\u9ED8\u8BA4\u5220\u9664head\u8282\u70B9</span>
  tmpNode<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> tmpNode<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// p1\u5148\u8D70n+1\u6B65</span>
    p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> p2 <span class="token operator">=</span> tmpNode<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  p2<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token keyword">return</span> tmpNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 876 \u94FE\u8868\u7684\u4E2D\u95F4\u8282\u70B9</li></ul><p>\u4F7F\u7528\u5FEB\u6162\u53CC\u6307\u9488\uFF0C\u5F53\u5FEB\u6307\u9488\u8D70\u5230\u672B\u5C3E\u65F6\uFF0C\u6162\u6307\u9488\u6B63\u597D\u6307\u5411\u4E2D\u95F4\u8282\u70B9\uFF0C\u82E5\u8282\u70B9\u6570\u4E3A\u5076\u6570\u65F6\uFF0C\u5219\u6307\u5411\u4E2D\u95F4\u8282\u70B9\u4E2D\u9760\u540E\u7684\u4E00\u4E2A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token comment">// fast\u5FEB\u6307\u9488\u4E0D\u53EF\u8D70\u51FA\u94FE\u8868\uFF0C\u5373fast\u672C\u8EAB\u4E0D\u53EF\u4E3Anull</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u73AF\u5F62\u94FE\u8868\u95EE\u9898</p><p>\u94FE\u8868\u4E2D\u662F\u5426\u5305\u542B\u73AF\u95EE\u9898\uFF1A \u540C\u6837\u53EF\u4EE5\u4F7F\u7528\u5FEB\u6162\u6307\u9488\uFF0C\u5F53\u4E24\u6307\u9488\u76F8\u9047\u65F6\u5373\u8BF4\u660E\u94FE\u8868\u4E2D\u5305\u542B\u73AF<br> \u884D\u751F\u95EE\u9898\uFF1A\u67E5\u627E\u73AF\u7684\u8D77\u70B9<br> \u9996\u5148\u9700\u8981\u5224\u65AD\u94FE\u8868\u4E2D\u662F\u5426\u5B58\u5728\u73AF\uFF0C\u5F53\u76F8\u9047\u65F6\uFF0C\u91CD\u7F6Eslow\u6307\u9488\u6307\u5411\u5934\u90E8\uFF0C\u540C\u6B65\u79FB\u52A8fast\u548Cslow\uFF0C\u5F53\u4E24\u6307\u9488\u76F8\u9047\u65F6\uFF0C\u5373\u4E3A\u73AF\u8D77\u70B9</p></div><ul><li>leetcode 141 \u73AF\u5F62\u94FE\u8868 \u5224\u65AD\u94FE\u8868\u4E2D\u662F\u5426\u5305\u542B\u73AF</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 142 \u73AF\u5F62\u94FE\u88682 \u67E5\u627E\u73AF\u5F62\u94FE\u8868\u7684\u8D77\u70B9</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span><span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 160 \u5224\u65AD\u4E24\u6761\u94FE\u8868\u662F\u5426\u76F8\u4EA4</li></ul><p>\u8BBE\u4E24\u94FE\u8868\u957F\u5EA6\u4E3Am, n\u5219\u8BA9\u4E24\u6307\u9488\u5728\u904D\u5386\u5B8C\u4E00\u4FA7\u94FE\u8868\u540E\u518D\u904D\u5386\u53E6\u4E00\u4FA7\u94FE\u8868\uFF0C\u5219\u4E24\u6307\u9488\u4E00\u5B9A\u80FD\u6307\u5411\u540C\u4E00\u8282\u70B9\uFF0C\u5373\u4E3A\u4E24\u6761\u94FE\u8868\u7684\u4EA4\u70B9\uFF1B\u82E5\u4E0D\u5B58\u5728\u4EA4\u70B9\uFF0C\u5373p1, p2\u6307\u5411null\u65F6\u9000\u51FA</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>headA<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> headB<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> headA<span class="token punctuation">,</span> p2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!==</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p1 <span class="token operator">=</span> headB<span class="token punctuation">;</span>
    <span class="token keyword">else</span> p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p2 <span class="token operator">=</span> headA<span class="token punctuation">;</span>
    <span class="token keyword">else</span> p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53CC\u6307\u9488\u4E4B\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u53CC\u6307\u9488\u4E4B\u6570\u7EC4" aria-hidden="true">#</a> \u53CC\u6307\u9488\u4E4B\u6570\u7EC4</h2><p>\u5C06\u6570\u7EC4\u7D22\u5F15\u89C6\u4E3A\u6307\u9488\uFF0C\u5219\u6570\u7EC4\u95EE\u9898\u4E0E\u94FE\u8868\u7C7B\u4F3C</p><ul><li>leetcode 26 \u5220\u9664\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u91CD\u590D\u9879\uFF0C\u539F\u5730\u5220\u9664\uFF0C\u5E76\u4FDD\u6301\u5143\u7D20\u987A\u5E8F\u4E0D\u53D8<br> \u601D\u8DEF\uFF1A\u4F7F\u7528\u5FEB\u6162\u6307\u9488fast\u548Cslow\uFF0Cslow\u59CB\u7EC8\u6307\u5411\u4E0D\u91CD\u590D\u7684\u6700\u540E\u4E00\u9879\uFF0C\u7528fast\u904D\u5386\u6570\u7EC4<br> \u5F53slow\u548Cfast\u4E0D\u540C\u65F6\uFF0C\u5219\u53D1\u73B0\u4E00\u4E2A\u65B0\u7684\u4E0D\u91CD\u590D\u9879\uFF0Cslow\u5411\u540E\u79FB\u4E00\u4F4D\uFF0Cfast\u7684\u4E0D\u91CD\u590D\u9879\u590D\u5236\u5230slow\u4F4D\u7F6E<br> \u4FDD\u6301slow\u59CB\u7EC8\u6307\u5411\u4E0D\u91CD\u590D\u7684\u6700\u540E\u4E00\u9879</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// fast \u904D\u5386\u6570\u7EC4</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u53D1\u73B0\u4E0D\u91CD\u590D\u9879</span>
      slow<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u79FB\u52A8slow\u6307\u9488\uFF0C\u590D\u5236\u5230slow\u79FB\u52A8\u540E\u7684\u4F4D\u7F6E</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    fast<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// slow\u4ECE0\u5F00\u59CB\uFF0C\u56E0\u6B64\u8FD4\u56DE\u957F\u5EA6\u9700\u8981+1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 83 \u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20<br> \u601D\u8DEF\uFF1A \u6B64\u9898\u4E0E\u4E0A\u9898\u601D\u8DEF\u76F8\u540C\uFF0C\u4F9D\u7136\u662F\u5FEB\u6162\u6307\u9488</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>val <span class="token operator">!==</span> slow<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      slow<span class="token punctuation">.</span>next <span class="token operator">=</span> fast<span class="token punctuation">;</span>
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  slow<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0E\u4E0A\u9898\u4E0D\u540C\uFF0C\u94FE\u8868\u904D\u5386\u5B8C\u6210\u540E\u9700\u8981\u65AD\u5F00slow\u540E\u7EED\u7684\u6240\u6709\u8282\u70B9</span>
  <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 27 \u539F\u5730\u79FB\u9664\u6570\u7EC4nums\u4E2D\u6307\u5B9A\u7684\u503Cval\uFF0C\u5E76\u8FD4\u56DE\u79FB\u9664\u540E\u6570\u7EC4\u7684\u65B0\u957F\u5EA6<br> \u601D\u8DEF\uFF1A\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u4F9D\u7136\u65F6\u5FEB\u6162\u6307\u9488\uFF0C\u4F46\u5728\u7EC6\u8282\u4E0Afast\u8981\u4E0Eval\u6BD4\u8F83\uFF0C\u5F53\u53D1\u73B0\u4E0D\u540C\u7684\u5143\u7D20\u65F6\u9700\u8981\u5148\u8D4B\u503C\uFF0C\u7136\u540E\u79FB\u52A8slow<br> \u4FDD\u8BC1\u6570\u7EC4\u7684val\u51FA\u73B0\u57280\u4F4D\u7F6E\u65F6\u4E5F\u80FD\u88AB\u5220\u9664\uFF0C\u6B64\u65F6slow\u4FDD\u6301\u6307\u5411\u65E0val\u5B50\u6570\u7EC4\u672B\u5C3E\u4E00\u4F4D\uFF0C\u904D\u5386\u5B8C\u6210\u540Eslow\u5373\u4E3A\u957F\u5EA6</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
      slow<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fast<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 283 \u79FB\u52A8\u96F6 \u539F\u5730\u79FB\u52A8\u6570\u7EC4nums\u4E2D\u76840\u5230nums\u672B\u5C3E\uFF0C\u540C\u65F6\u5176\u4ED6\u5143\u7D20\u76F8\u5BF9\u4F4D\u7F6E\u4FDD\u6301\u4E0D\u53D8<br> \u601D\u8DEF\uFF1A\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u53EF\u4EE5\u5148\u5220\u9664\uFF0C\u7136\u540E\u5C06\u5269\u4F59\u5143\u7D20\u8D4B\u503C\u4E3A0<br> \u53D1\u73B0\u975E0\u5143\u7D20\uFF0C\u4EA4\u6362fast\u548Cslow\u4E5F\u53EF\u5B9E\u73B0</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
      slow<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fast<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    slow<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 167 \u4E24\u6570\u4E4B\u548C2\uFF0C\u975E\u9012\u51CF\u6570\u7EC4numbers\u4E2D\u627E\u5230\u4E24\u4E2A\u6570\uFF0C\u5176\u548C\u4E3Atarget<br> \u601D\u8DEF\uFF1A\u4E24\u6570\u4E4B\u548C\u901A\u7528\u89E3\u6CD5\u53EF\u4EE5\u4F7F\u7528map\u6620\u5C04\u8F85\u52A9\u5B58\u50A8\u4E0Etarget\u7684\u5DEE\u503C\uFF0C\u6570\u5B57\u5339\u914D\u5BF9\u5E94\u5DEE\u503C\u4ECE\u800C\u627E\u5230\u6EE1\u8DB3\u6761\u4EF6\u7684\u4E24\u4E2A\u6570<br> \u7531\u4E8E\u6570\u7EC4\u6709\u5E8F\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528left\u548Cright\u6307\u9488\u5BF9\u649E\u7684\u65B9\u5F0F\u8FDB\u884C\u67E5\u627E\u7684\u7B97\u6CD5\u6548\u7387\u66F4\u9AD8</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>numbers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// TODO: \u6CE8\u610F\u7EC8\u6B62\u6761\u4EF6\u4E0E\u521D\u59CB\u5316\u533A\u95F4\u7684\u5173\u7CFB</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u9898\u76EE\u8FD4\u56DE\u8981\u6C42\u4ECE1\u5F00\u59CB\u7684\u7D22\u5F15</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 344 \u53CD\u8F6C\u5B57\u7B26\u4E32<br> \u601D\u8DEF\uFF1A\u540C\u6837\u5229\u7528left\u548Cright\u6307\u9488\u5BF9\u649E\uFF0C\u6BCF\u6B21\u4EA4\u6362left\u548Cright\u5BF9\u5E94\u4F4D\u7F6E\u5B57\u7B26\uFF0C\u968F\u540E\u53F3\u79FBleft\u5DE6\u79FBright\u5373\u53EF</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    left<span class="token operator">++</span><span class="token punctuation">;</span>
    right<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 5 \u6700\u957F\u56DE\u6587\u5B50\u4E32</li></ul><p>\u56DE\u6587\u4E32\u5DE6\u53F3\u5BF9\u79F0\uFF0C\u4E3A\u5076\u6570\u65F6\u4E2D\u5FC3\u5BF9\u5E94\u4E24\u4E2A\u76F8\u540C\u7684\u5143\u7D20\uFF0C\u4E3A\u5947\u6570\u65F6\u4E2D\u5FC3\u5BF9\u5E94\u4E00\u4E2A\u5143\u7D20<br> \u5148\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u4F7F\u7528\u53CC\u6307\u9488\u4ECE\u4E2D\u5FC3\u5411\u5916\u90E8\u6269\u6563\uFF0C\u8FD4\u56DE\u6307\u9488\u80FD\u591F\u904D\u5386\u5230\u7684\u6700\u957F\u56DE\u6587\u4E32<br> \u4F9D\u6B21\u904D\u5386\u6BCF\u4E2A\u5B57\u7B26\uFF0C\u5C1D\u8BD5\u4EE5\u8BE5\u5B57\u7B26\u4E3A\u4E2D\u5FC3\u8FDB\u884C\u6269\u6563\uFF0C\u5E76\u628A\u5F97\u5230\u7684\u56DE\u6587\u4E32\u4E0E\u524D\u5E8F\u7ED3\u679Cresult\u6BD4\u8F83\uFF0C\u4FDD\u6301result\u59CB\u7EC8\u4E3A\u6700\u957F\u7684\u56DE\u6587\u4E32</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8F93\u5165\u5DE6\u53F3\u6307\u9488\uFF0C\u6269\u6563\u83B7\u53D6\u6700\u957F\u56DE\u6587\u4E32</span>
  <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token comment">// \u4FDD\u8BC1\u4E0D\u8D8A\u754C\uFF0C\u540C\u65F6\u4F20\u5165left === right\u65F6\u8868\u793A\u4E3A\u5947\u6570\u7684\u60C5\u51B5</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      left<span class="token operator">--</span><span class="token punctuation">;</span>
      right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u904D\u5386\u9000\u51FA\u65F6\uFF0Cleft\u548Cright\u521A\u597D\u6307\u5411\u4E0D\u6EE1\u8DB3\u7684\u4E00\u5BF9\u5B57\u7B26\uFF0C\u56E0\u6B64\u8FD4\u56DE\u5B50\u4E32\u8303\u56F4\u4E3A[left+1, right)</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386s\u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\uFF0C\u83B7\u53D6\u8BE5\u5143\u7D20\u4E3A\u4E2D\u5FC3\u7684\u6700\u957F\u5B50\u4E32</span>
      <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C1D\u8BD5\u5947\u6570\u5B50\u4E32</span>
      <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C1D\u8BD5\u5076\u6570\u5B50\u4E32</span>
      result <span class="token operator">=</span> s1<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> result<span class="token punctuation">.</span>length <span class="token operator">?</span> s1 <span class="token operator">:</span> result<span class="token punctuation">;</span> <span class="token comment">// \u66F4\u65B0result\uFF0C\u4FDD\u6301\u5176\u6700\u957F</span>
      result <span class="token operator">=</span> s2<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> result<span class="token punctuation">.</span>length <span class="token operator">?</span> s2 <span class="token operator">:</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53CC\u6307\u9488\u4E4B\u6ED1\u52A8\u7A97\u53E3" tabindex="-1"><a class="header-anchor" href="#\u53CC\u6307\u9488\u4E4B\u6ED1\u52A8\u7A97\u53E3" aria-hidden="true">#</a> \u53CC\u6307\u9488\u4E4B\u6ED1\u52A8\u7A97\u53E3</h2><p>\u53CC\u6307\u9488\u8FD8\u5E38\u7528\u6765\u8868\u793A\u6ED1\u52A8\u7A97\u53E3\uFF0C\u901A\u5E38\u53D6left, right\u4E3A0\uFF0C\u8868\u793A\u533A\u95F4<code>[left, right)</code>, \u8FD9\u6837\u4F9D\u8D56\u521D\u59CB\u72B6\u6001\u4E0B\u533A\u95F4\u5185\u5143\u7D20\u4E2A\u6570\u4E3A0<br> \u5F53right\u5411\u53F3\u8FB9\u6ED1\u52A8\u65F6\u6269\u5927\u7A97\u53E3\uFF0C\u533A\u95F4\u957F\u5EA6\u4E3A<code>right - left = 1</code>\uFF0C\u968F\u540E\u505A\u76F8\u5E94\u7684\u6570\u636E\u66F4\u65B0\uFF0C<br> \u518D\u8FDB\u884C\u7A97\u53E3\u7F29\u5C0F\u6761\u4EF6\u5224\u65AD\uFF0C\u5BF9\u79F0\u7684\u53F3\u6ED1left\uFF0C\u66F4\u65B0\u6570\u636E\uFF1B\u6700\u540E\u6839\u636E\u4E0D\u540C\u7684\u9700\u8981\u5728\u4E0D\u540C\u7684\u9636\u6BB5\u8FD4\u56DE\u6216\u8BB0\u5F55\u7ED3\u679C</p><ul><li>leetcode 3 \u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u521D\u59CB\u5316\u6ED1\u52A8\u7A97\u53E3</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u7A97\u53E3map</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u7528\u4E8E\u8BB0\u5F55\u7B26\u5408\u6761\u4EF6\u7684\u957F\u5EA6</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u53D6\u51FA\u8FDB\u5165\u7A97\u53E3\u7684\u5143\u7D20</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u82E5\u6CA1\u6709c\u5143\u7D20\u5219\u8D4B\u503C\u4E3A1\uFF0C\u5426\u5219\u5BF9\u5E94\u8BA1\u6570+1</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u53D1\u73B0\u91CD\u590D\u5143\u7D20, \u53CD\u590D\u5224\u65AD\u5E76\u7F29\u5C0F\u7A97\u53E3,\u521A\u8FDB\u5165\u7A97\u53E3\u7684\u5143\u7D20\u4E0D\u91CD\u590D</span>
      <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5757\u5185\u53D8\u91CF\uFF0C\u4E0Ewhile\u6761\u4EF6\u5224\u65AD\u7684c\u503C\u4E0D\u540C</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06\u5BF9\u5E94\u79BB\u5F00\u7A97\u53E3\u7684\u5143\u7D20\u7684\u8BA1\u6570-1</span>
    <span class="token punctuation">}</span>
    len <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">&gt;</span> len <span class="token operator">?</span> right <span class="token operator">-</span> left <span class="token operator">:</span> len<span class="token punctuation">;</span> <span class="token comment">// \u4E00\u8F6E\u5FAA\u73AF\u5B8C\u6210\u4FDD\u8BC1\u4E86\u65E0\u91CD\u590D\u5B50\u4E32\uFF0C\u6BD4\u8F83\u8BB0\u5F55\u957F\u5EA6\u4E2D\u7684\u8F83\u5927\u8005</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 76 \u6700\u5C0F\u8986\u76D6\u5B50\u4E32 \u7ED9\u5B9A\u5B57\u7B26\u4E32s, t \u8FD4\u56DEs\u4E2D\u6DB5\u76D6t\u6240\u6709\u5B57\u7B26\u7684\u6700\u5C0F\u5B50\u4E32</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">minWindow</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u76EE\u6807\u5B57\u7B26\u4E32map\u53CA\u7A97\u53E3map</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> need<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// \u521D\u59CB\u5316\u8BB0\u5F55\u957F\u5EA6\u548C\u8D77\u70B9\u7684\u7D22\u5F15\uFF0C\u521D\u59CB\u5316\u7B26\u5408\u6761\u4EF6\u7684\u5B57\u7B26\u6570</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u6269\u5927\u7A97\u53E3</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u8FDB\u5165\u7A97\u53E3\u5143\u7D20\u547D\u4E2D\u76EE\u6807\u5143\u7D20</span>
      window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u7EDF\u8BA1\u7A97\u53E3\u4E2D\u547D\u4E2D\u7684\u5143\u7D20</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u82E5\u8BE5\u5B57\u7B26\u547D\u4E2D\u6570\u548C\u7A97\u53E3\u4E2D\u547D\u4E2D\u6570\u76F8\u540C\u5219\uFF0C\u7B26\u5408\u6761\u4EF6\u7684\u5B57\u7B26\u6570+1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u7B26\u5408\u6761\u4EF6\u7684\u5B57\u7B26\u6570\u4E0E\u76EE\u6807need\u5B57\u7B26\u6570\u76F8\u7B49\u5219\u7F29\u5C0F\u7A97\u53E3</span>
      <span class="token comment">// \u5728\u7F29\u5C0F\u7A97\u53E3\u524D\u66F4\u65B0\u7ED3\u679C</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
        len <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
        start <span class="token operator">=</span> left<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u6267\u884C\u7A97\u53E3\u7F29\u5C0F\u5806\u6210\u903B\u8F91</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">--</span><span class="token punctuation">;</span>
        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u4E0E\u521D\u59CB\u957F\u5EA6\u6BD4\u8F83\u5E76\u8FD4\u56DE\u5BF9\u5E94\u72B6\u6001\u7684\u5B50\u4E32</span>
  <span class="token keyword">return</span> len <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 567 \u5B57\u7B26\u4E32\u7684\u6392\u5217 \u5224\u65AD s2 \u662F\u5426\u5305\u542B s1 \u7684\u6392\u5217</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>s1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> s2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u7A97\u53E3\u548C\u76EE\u6807\u5B57\u7B26\u4E32map</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s1<span class="token punctuation">)</span> need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5F53\u524D\u5B57\u7B26\u5728\u76EE\u6807\u5185\uFF0C\u66F4\u65B0\u6570\u636E</span>
      window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u7EDF\u8BA1\u6709\u6548\u7684\u5B57\u7B26\u79CD\u7C7B</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u7A97\u53E3\u5927\u5C0F\u8FBE\u5230\u76EE\u6807\u957F\u5EA6\u5219\u5F00\u59CB\u7F29\u5C0F\u7A97\u53E3</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// \u6709\u6548\u79CD\u7C7B\u7B49\u4E8E\u76EE\u6807\u79CD\u7C7B\u5219\u53EF\u4EE5\u8FD4\u56DE</span>
      <span class="token keyword">let</span> c <span class="token operator">=</span> s2<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u7F29\u5C0F\u7A97\u53E3</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">--</span><span class="token punctuation">;</span>
        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 438 \u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD \u627E\u5230 s \u4E2D\u6240\u6709 p \u7684 \u5F02\u4F4D\u8BCD(\u5168\u6392\u5217) \u7684\u5B50\u4E32\uFF0C\u8FD4\u56DE\u6240\u6709\u7ED3\u679C\u7684\u8D77\u59CB\u7D22\u5F15</li></ul><p>\u4EE3\u7801\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u5C3D\u5728\u53D1\u73B0\u7ED3\u679C\u65F6\uFF0C\u6536\u96C6\u7ED3\u679C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> p<span class="token punctuation">)</span> need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> p<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">--</span><span class="token punctuation">;</span>
        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u52A8\u6001\u89C4\u5212\u4E4B\u80A1\u7968\u4E70\u5356\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212\u4E4B\u80A1\u7968\u4E70\u5356\u95EE\u9898" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212\u4E4B\u80A1\u7968\u4E70\u5356\u95EE\u9898</h2><p>\u4F7F\u7528<a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">\u52A8\u6001\u89C4\u5212\u4E09\u8981\u7D20</a>\u6765\u5224\u65AD\u5F53\u524D\u95EE\u9898\u662F\u5426\u9002\u5408\u4F7F\u7528\u52A8\u6001\u89C4\u5212\u6765\u89E3\u9898<br> \u80A1\u7968\u95EE\u9898\u4E2D\u6BCF\u5929\u90FD\u8981\u9700\u8981\u9009\u62E9\u4E70\u5165\u3001\u5356\u51FA\u3001\u6301\u6709\u64CD\u4F5C\uFF0C\u800C\u6BCF\u6B21\u64CD\u4F5C\u4E0E\u524D\u4E00\u5929\u7684\u6301\u6709\u548C\u7D2F\u8BA1\u5DF2\u6267\u884C\u64CD\u4F5C\u6B21\u6570\u6709\u5173\uFF0C\u5F53\u5929\u4E0D\u8003\u8651\u5373\u64CD\u4F5C\u4E70\u5165\u53C8\u64CD\u4F5C\u5356\u51FA\u7684\u60C5\u51B5(\u5373\u4E0D\u8003\u8651\u5F53\u65E5\u5185\u4EF7\u683C\u6CE2\u52A8\uFF0C\u4E5F\u65E0\u76F8\u5173\u6570\u636E)<br> \u56E0\u6B64\u6EE1\u8DB3\u91CD\u53E0\u5B50\u95EE\u9898\uFF0C\u5B58\u5728\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\uFF0C\u5B50\u95EE\u9898\u95F4\u76F8\u4E92\u72EC\u7ACB\u4E09\u8981\u7D20\uFF0C\u53EF\u4EE5\u4F7F\u7528\u52A8\u6001\u89C4\u5212\u8FDB\u884C\u89E3\u9898</p><p>\u52A8\u6001\u89C4\u5212\u672C\u8D28\u662F\u5728\u7A77\u4E3E\u72B6\u6001\uFF0C\u5BF9\u5E94\u72B6\u6001\u6709\u5F53\u5929\u5929\u6570\u3001\u5141\u8BB8\u4EA4\u6613\u7684\u6700\u5927\u6B21\u6570(\u4E00\u6B21\u4EA4\u6613\u5305\u542B\u4E70\u548C\u5356)\u3001\u5F53\u524D\u6301\u6709\u60C5\u51B5\uFF1B<br> \u56E0\u6B64\u4F7F\u7528\u4E09\u7EF4\u6570\u7EC4\u8868\u793A\u8FD9\u4E09\u79CD\u72B6\u6001\u7684\u7EC4\u4EF6<code>dp[i][k][s]</code>,\u5982<code>dp[2][3][0]</code>\u8868\u793A\u7B2C\u4E8C\u5929\uFF0C\u81F3\u4ECA\u6700\u591A\u8FDB\u884C3\u6B21\u4EA4\u6613\uFF0C\u5F53\u524D\u6CA1\u6709\u6301\u6709\u80A1\u7968<br> \u5176\u4E2Di\u53D6<code>[0, n)</code>, k\u53D6<code>[1, K]</code>, s\u53D60\u62161\uFF0C\u8868\u793A\u6CA1\u6709\u80A1\u7968\u6216\u6301\u6709\u80A1\u7968<br> \u8981\u8FD4\u56DE\u7684\u72B6\u6001\u662F<code>dp[n-1][K][0]</code>,\u5373\u6700\u540E\u4E00\u5929\uFF0C\u6700\u591A\u5141\u8BB8K\u6B21\u4EA4\u6613\uFF0C\u4E14\u5F53\u524D\u4E0D\u6301\u6709\u80A1\u7968(\u76F8\u540C\u72B6\u6001\u4E0B\u4E0D\u6301\u6709\u80A1\u7968\u5229\u6DA6\u8F83\u9AD8)</p><p>\u72B6\u6001\u8F6C\u4E49\u65B9\u7A0B\uFF1A<br><code>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1]+prices[i])</code><br> \u4ECA\u5929\u4E0D\u6301\u6709\u80A1\u7968\u7684\u72B6\u6001\u4E0B\u7684\u5229\u6DA6\u662F\uFF1A\u6628\u5929\u4E0D\u6301\u6709\uFF0C\u4ECA\u5929\u4E0D\u9009\u62E9\u4E70\u5165\u7684\u5229\u6DA6 \u4E0E \u6628\u5929\u6301\u6709\uFF0C\u4F46\u4ECA\u5929\u5356\u51FA\u7684\u5229\u6DA6\u4E2D\u7684\u8F83\u5927\u8005\uFF1B<br> ps\uFF1A\u6628\u5929\u4E0D\u6301\u6709\u5219\u4ECA\u5929\u65E0\u6CD5\u5356\u51FA\uFF0C\u82E5\u9009\u62E9\u4E70\u5165\u5219\u5229\u6DA6\u4E0D\u5982\u4E0D\u64CD\u4F5C\u7684\u60C5\u51B5\uFF0C\u6628\u5929\u6301\u6709\u7684\u60C5\u51B5\u540C\u7406<br><code>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</code><br> \u4ECA\u5929\u6301\u6709\u80A1\u7968\u72B6\u6001\u4E0B\u7684\u5229\u6DA6\u662F\uFF1A\u6628\u5929\u6301\u6709\uFF0C\u4ECA\u5929\u9009\u62E9\u7EE7\u7EED\u6301\u6709\u7684\u5229\u6DA6 \u4E0E \u6628\u5929\u4E0D\u6301\u6709\uFF0C\u4ECA\u5929\u9009\u62E9\u4E70\u5165\u7684\u5229\u6DA6\u4E2D\u7684\u8F83\u5927\u8005\uFF1B<br> \u4E0E\u4E0A\u7C7B\u4F3C\uFF1A\u6628\u5929\u6301\u6709\u9009\u62E9\u5356\u51FA\uFF0C\u5219\u4ECA\u5929\u5C31\u65E0\u6CD5\u6301\u6709\u80A1\u7968\uFF0C\u800C\u7EE7\u7EED\u4E70\u5165\u7684\u5229\u6DA6\u4E0D\u5982\u7EE7\u7EED\u6301\u6709\uFF0C\u6628\u5929\u82E5\u65E0\u6301\u6709\uFF0C\u5219\u4ECA\u5929\u5FC5\u987B\u4E70\u5165\uFF1B<br> k\u4E3A\u4EA4\u6613\u6B21\u6570\u4E0A\u9650\uFF0C\u4E3A\u4FDD\u8BC1\u4ECA\u5929\u7684\u6B21\u6570\u4E0A\u9650\u4E3Ak\uFF0C\u6628\u5929\u65E0\u6301\u6709\u72B6\u6001\u4E0B\u7684\u4EA4\u6613\u4E0A\u9650\u5E94\u4E3Ak-1(\u5373\u622A\u6B62\u6628\u5929\u6700\u591A\u6267\u884C\u4EA4\u6613\u6B21\u6570\u4E0D\u5F97\u8D85\u8FC7k-1)</p><p>\u521D\u59CB\u72B6\u6001<br><code>dp[-1][*][0] = 0</code> i\u4ECE0\u5F00\u59CB\uFF0C\u56E0\u6B64-1\u610F\u5473\u7740\u8FD8\u6CA1\u5F00\u59CB\uFF0C\u5229\u6DA6\u4E3A0\uFF1B<br><code>dp[-1][*][1] = -infinity</code> \u672A\u5F00\u59CB\u65F6\u4E0D\u53EF\u80FD\u53EA\u6709\u80A1\u7968\uFF0C\u7531\u4E8E\u6C42\u6700\u5927\u5229\u6DA6\uFF0C\u56E0\u6B64\u521D\u59CB\u503C\u8BBE\u7F6E\u4E3A\u6700\u5C0F\u503C\uFF0C\u8868\u793A\u4ECE\u8BE5\u72B6\u6001\u51FA\u53D1\u7684\u8F6C\u79FB\u65E0\u6548<br><code>dp[*][0][0] = 0</code> k=0 \u610F\u5473\u7740\u4E0D\u53EF\u64CD\u4F5C\uFF0C\u6240\u4EE5\u5229\u6DA6\u4E3A0<br><code>dp[*][0][1] = -infinity</code> k=0 \u610F\u5473\u7740\u4E0D\u53EF\u64CD\u4F5C\uFF0C\u4E5F\u4E0D\u53EF\u80FD\u6301\u6709\u80A1\u7968\uFF0C\u56E0\u6B64\u8BBE\u7F6E\u4E3A\u6700\u5C0F\u503C</p><ul><li>leetcode 121 \u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A<br> \u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4 prices \uFF0C\u5B83\u7684\u7B2C i \u4E2A\u5143\u7D20 prices[i] \u8868\u793A\u4E00\u652F\u7ED9\u5B9A\u80A1\u7968\u7B2C i \u5929\u7684\u4EF7\u683C\u3002<br> \u9009\u62E9 \u67D0\u4E00\u5929 \u4E70\u5165\u8FD9\u53EA\u80A1\u7968\uFF0C\u5E76\u9009\u62E9\u5728 \u672A\u6765\u7684\u67D0\u4E00\u4E2A\u4E0D\u540C\u7684\u65E5\u5B50 \u5356\u51FA\u8BE5\u80A1\u7968\uFF0C\u8FD4\u56DE\u80FD\u83B7\u53D6\u7684\u6700\u5927\u5229\u6DA6</li></ul><p>\u5BF9\u4E8E\u672C\u9898\u76F8\u5F53\u4E8Ek=1\uFF0C\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\uFF1A<br><code>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1]+prices[i])</code><br><code>dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) = max(dp[i-1][1][1], -prices[i])</code>, k=0\u65F6\u5229\u6DA6\u4E3A0<br> \u56E0\u6B64\u53EF\u4EE5\u7B80\u5316\u53D6\u5230k\u8FD9\u4E00\u9879\uFF0C\u5BF9\u4E8Ei = -1\u65F6\u9700\u8981\u8FDB\u884C\u989D\u5916\u5904\u7406</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5BF9\u7D22\u5F15\u4E3A-1\u7684\u8D77\u59CB\u72B6\u6001\u8FDB\u884C\u7279\u6B8A\u5904\u7406\uFF0C\u6B64\u65F6k\u53D61\uFF0C\u4EE5\u4E0B\u4E24\u503C\u5747\u9700\u6839\u636E\u8F6C\u79FB\u65B9\u7A0B\u8FDB\u884C\u63A8\u5BFC</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// dp[i][0] = max(dp[-1][0], dp[-1][1]+prices[i]) = max(0, -infinity + prices[i])</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// dp[i][1] = max(dp[-1][1], dp[-1][0] - prices[i]) = max(-infinity, 0 - prices[i])</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6839\u636E\u8F6C\u79FB\u65B9\u7A0B\u66F4\u65B0\u5F53\u5929\u7684\u5229\u6DA6</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u7531\u4E8E\u65B0\u72B6\u6001\u53EA\u548C\u76F8\u90BB\u7684\u4E00\u4E2A\u72B6\u6001\u6709\u5173\uFF0C\u56E0\u6B64\u53EF\u4EE5\u538B\u7F29dp\uFF0C\u4E0D\u9700\u8981\u7528\u5230\u6570\u636E</span>
<span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp_i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp_i_1 <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp_i_0 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_0<span class="token punctuation">,</span> dp_i_1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp_i_1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp_i_0<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 122 \u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A2</li></ul><p><code>prices[i]</code>\u8868\u793A\u67D0\u53EA\u80A1\u7968\u7684\u7B2Ci\u5929\u7684\u4EF7\u683C,\u6BCF\u5929\u53EF\u4EE5\u51B3\u5B9A\u5426\u8D2D\u4E70\u548C/\u6216\u51FA\u552E\u80A1\u7968\uFF0C\u6700\u591A\u53EA\u80FD\u6301\u6709\u4E00\u53EA\u80A1\u7968\uFF1B</p><p>\u6B64\u9898\u5957\u7528\u6846\u67B6\uFF0C\u76F8\u5F53\u4E8EK\u65E0\u9650\u5927\uFF0C\u5373\u6CA1\u6709\u8BB0\u5F55k\u7684\u5FC5\u8981\uFF0C\u8F6C\u79FB\u65B9\u7A0B\u53EF\u9000\u5316\u4E3A\u4E8C\u7EF4,\u5176\u4ED6\u60C5\u51B5\u4E0E121\u9898\u7C7B\u4F3C\uFF0C\u4EE5\u4E0B\u4EC5\u5C55\u793A\u4F18\u5316\u7A7A\u95F4\u540E\u7684\u89E3\u6CD5</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp_i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp_i_1 <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp_i_0 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_0<span class="token punctuation">,</span> dp_i_1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp_i_1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span> dp_i_0 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp_i_0<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 309 \u6700\u4F73\u4E70\u5356\u80A1\u7968\u65F6\u673A\u542B\u51B7\u51BB\u671F</li></ul><p>\u5BF9\u6BD4\u4E0A\u9762\u7684\u9898\u578B\uFF0C\u672C\u9898\u591A\u4E86\u9650\u5236\u6761\u4EF6\uFF1A\u5356\u51FA\u80A1\u7968\u540E\uFF0C\u65E0\u6CD5\u5728\u7B2C\u4E8C\u5929\u4E70\u5165\u80A1\u7968 (\u5373\u51B7\u51BB\u671F\u4E3A 1 \u5929)\u3002</p><p>\u5206\u6790\uFF1A\u540C\u7406\uFF0C\u7531\u4E8Ek\u65E0\u9650\u5236\u53EF\u4EE5\u7701\u7565\uFF0C\u540C\u65F6\u591A\u4E86\u51B7\u51BB\u671F\uFF0C\u5728\u4E70\u5165\u80A1\u7968\u7684\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\u9700\u8981\u505A\u51FA\u8C03\u6574<br> \u539F\u6709\u7684\uFF1A<code>dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i])</code><br> \u9700\u8981\u8C03\u6574\u4E3A\uFF1A<code>dp[i][1] = Math.max(dp[i-1][1], dp[i-2][0] - prices[i])</code><br> \u5373i-1\u5929\u4E0D\u6301\u6709\uFF0Ci\u5929\u4E70\u5165\u7684\u60C5\u51B5\u9700\u8981\u8C03\u6574\uFF0C\u4E70\u5165\u9700\u8981\u8003\u8651\u51B7\u51BB\u671F<br> i-1\u5929\u4E0D\u6301\u6709\u7684\u60C5\u51B5\u53EF\u4EE5\u7531i-2\u5929\u4E0D\u6301\u6709i-1\u5929\u65E0\u64CD\u4F5C\u548Ci-2\u5929\u6301\u6709i-1\u5929\u5356\u51FA\u72B6\u6001\u8F6C\u79FB\u8FC7\u6765<br> \u5982\u679Ci-1\u5929\u9009\u62E9\u4E86\u5356\u51FA\uFF0Ci\u5929\u5219\u65E0\u6CD5\u4E70\u5165\uFF0C\u56E0\u6B64\u8981i\u5929\u4E70\u5165\u53EA\u80FD\u7531i-2\u5929\u4E0D\u6301\u6709\u4E14i-1\u5929\u65E0\u64CD\u4F5C\u72B6\u6001\u8F6C\u79FB\u800C\u6765</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u4FDD\u8BC1i-2\u5728\u5B89\u5168\u7D22\u5F15\u8303\u56F4\u5185</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 714 \u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A\u542B\u624B\u7EED\u8D39</li></ul><p>\u4E0E122\u9898\u7C7B\u4F3C\uFF0C\u5FFD\u7565k\uFF0C\u6BCF\u6B21\u7684\u4EA4\u6613\u624B\u7EED\u8D39fee\uFF0C\u6839\u636E\u9898\u76EE\u63D0\u4F9B\u7684\u6848\u4F8B\u5F97\u77E5\uFF0C\u4E00\u4E70\u4E00\u5356\u4E3A\u4E00\u6B21\u4EA4\u6613\uFF0C\u4EC5\u6536\u53D6\u4E00\u6B21\u624B\u7EED\u8D39<br> \u7531\u4E8E\u6700\u7EC8\u72B6\u6001\u5904\u4E8E\u5356\u51FA\uFF0C\u56E0\u6B64\u53EF\u5728\u4E70\u5165\u6216\u5356\u51FA\u65F6\u51CF\u53BB\u624B\u7EED\u8D39\uFF0C\u9009\u7528\u4E70\u5165\u65F6\u6263\u9664\u624B\u7EED\u975E\u6539\u5199\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\u5982\u4E0B<br><code>dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fee<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp_i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp_i_1 <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      dp_i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      dp_i_1 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp_i_0 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_0<span class="token punctuation">,</span> dp_i_1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp_i_1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span> dp_i_0 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp_i_0<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 123 \u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A III</li></ul><p>\u4E0E122\u9898\u7C7B\u4F3C\uFF0C\u4F46\u4EA4\u6613\u9650\u5236K\u4E3A2\u6B21\uFF0C\u56E0\u6B64\u4E0D\u53EF\u5FFD\u7565K\uFF0C\u6839\u636E\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\uFF0C\u53D8\u91CF\u6709i\u548Ck\u9700\u8981\u53CC\u91CD\u5FAA\u73AF<br> k\u53EF\u4EE5\u4ECE\u6700\u5927\u503C\u5F00\u59CB\u5FAA\u73AF\uFF0C\u4E5F\u53EF\u4ECE\u6700\u5C0F\u503C\u5F00\u59CB\u5FAA\u73AF\uFF1B\u4ECE\u6700\u5927\u503C\u5F00\u59CB\u5FAA\u73AF\u66F4\u7B26\u5408\u65E5\u5E38\u903B\u8F91<br> \u7531\u4E8Ek\u4EC5\u67092\u4E2D\u53D6\u503C\uFF0C\u4E5F\u53EF\u5168\u90E8\u5217\u4E3E\u51FA\u6765\u5BF9\u7A7A\u95F4\u590D\u6742\u5EA6\u8FDB\u884C\u4F18\u5316</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token constant">K</span><span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 188 \u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A IV</li></ul><p>\u76F8\u6BD4\u4E8E\u4E0A\u9898\uFF0C\u6B64\u9898\u7684K\u4E3A\u5916\u90E8\u4F20\u5165\uFF0C\u56E0\u6B64\u9700\u8981\u8003\u8651K\u7684\u53D6\u503C\u8303\u56F4\uFF0C\u7531\u4E8E\u4E00\u4E70\u4E00\u5356\u7B97\u505A\u4E00\u6B21\u4EA4\u6613\uFF0C\u4E14\u4E0D\u80FD\u540C\u65F6\u6301\u6709\u591A\u53EA\u80A1\u7968\uFF0C\u6240\u4EE5\u5F53K\u5927\u4E8Eprices\u957F\u5EA6\u7684\u4E00\u534A\u540E\u5931\u53BB\u4E86\u610F\u4E49\uFF0C\u53EF\u4E0D\u8003\u8651\u6216\u8FDB\u884C\u7279\u6B8A\u5904\u7406</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> limitK <span class="token operator">=</span> k <span class="token operator">&gt;</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span> k<span class="token punctuation">;</span> <span class="token comment">// \u5F53\u8D85\u8FC7\u4E00\u534A\u65F6\u53D6\u4E00\u534A\u5411\u4E0B\u53D6\u6574\u4F5C\u4E3A\u9650\u5236\u540E\u7684k</span>
  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>limitK<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> limitK<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u4E3A\u65B9\u4FBF\u7D22\u5F15\uFF0Cdp\u521D\u59CB\u5316\u65F6\u4F7F\u7528\u4E86limitK + 1\uFF0C\u56E0\u6B64\u5F53k-1===0\u65F6\u9700\u8981\u5BF9k-1\u7D22\u5F15\u503C\u6839\u636E\u521D\u59CB\u72B6\u6001\u7279\u6B8A\u5904\u7406</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>limitK<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u7531\u4E8EK&gt;len/2\u5931\u53BB\u610F\u4E49\uFF0C\u5219\u53EF\u5728\u6B64\u5904\u8C03\u7528122\u9898\u4E2D\u7684\u7B97\u6CD5\uFF0C\u4EE5\u6B64\u7B80\u5316\u590D\u6742\u5EA6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u52A8\u6001\u89C4\u5212\u4E4B\u6253\u5BB6\u52AB\u820D" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212\u4E4B\u6253\u5BB6\u52AB\u820D" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212\u4E4B\u6253\u5BB6\u52AB\u820D</h2><ul><li>leetcode 198 \u6253\u5BB6\u52AB\u820D \u7ED9\u5B9A\u4E00\u4E2A\u4EE3\u8868\u6BCF\u4E2A\u623F\u5C4B\u5B58\u653E\u91D1\u989D\u7684\u975E\u8D1F\u6574\u6570\u6570\u7EC4\uFF0C\u5728\u4E0D\u53EF\u8FDE\u7EED\u5077\u7684\u60C5\u51B5\u4E0B \uFF0C\u80FD\u591F\u5077\u7A83\u5230\u7684\u6700\u9AD8\u91D1\u989D</li></ul><p>\u7B2Ci\u5929\u72B6\u6001<code>dp[i]</code>\uFF1A\u53EF\u4EE5\u9009\u62E9\u4E0D\u5077\uFF0C\u603B\u91D1\u989D\u4E3A<code>dp[i+1]</code>\uFF0C\u5373i+1\u5929\u80FD\u5077\u7684\u6700\u9AD8\u91D1\u989D<br> \u6216\u9009\u62E9\u5077\uFF0C\u603B\u91D1\u989D\u4E3A<code>nums[i] + dp[i+2]</code>\uFF0C\u5373\u5077\u7684\u91D1\u989D\u52A0\u4E0Ai+2\u5929\u80FD\u5077\u5230\u7684\u6700\u9AD8\u91D1\u989D<br> \u56E0\u6B64i\u5929\u80FD\u5077\u5F97\u7684\u6700\u9AD8\u91D1\u989D\u4E3A<code>dp[i] = max(dp[i+1], nums[i] + dp[i+2])</code>\uFF0C\u5373\u4E3A\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B</p><p>\u5077\u4E0E\u4E0D\u5077\u7684\u9009\u62E9\u9700\u8981\u6839\u636E\u5176\u540E\u7684\u5929\u6570\u4E2D\u80FD\u5077\u5F97\u7684\u6700\u9AD8\u91D1\u989D\u6765\u51B3\u5B9A\uFF0C\u56E0\u6B64\u60F3\u8981\u9012\u63A8\u53EA\u80FD\u4ECE\u6570\u7EC4\u672B\u5C3E\u5F00\u59CB\u5FAA\u73AF<br> \u5BF9\u4E8E\u8D85\u51FA\u8303\u56F4\u7684n+1\u548Cn+2\u5929\u4E0D\u5B58\u5728\uFF0C\u5BF9\u5E94\u521D\u59CB\u72B6\u6001\uFF0C\u80FD\u5077\u5F97\u7684\u91D1\u989D\u4E3A0\uFF0C\u56E0\u6B64\u53EF\u4EE5\u6839\u636E\u521D\u59CB\u72B6\u6001\u548C\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\u5199\u51FA\u5982\u4E0B\u4EE3\u7801\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">rob</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp_i_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp_i_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    dp_i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp_i_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp_i_2 <span class="token operator">=</span> dp_i_1<span class="token punctuation">;</span>
    dp_i_1 <span class="token operator">=</span> dp_i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp_i<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 213 \u6253\u5BB6\u52AB\u820DII \u4E0E\u4E0A\u9898\u57FA\u672C\u4E00\u81F4\uFF0C\u4F46\u623F\u5C4B\u56F4\u6210\u4E00\u4E2A\u5708\uFF0C\u5373\u9996\u5C3E\u4E0D\u80FD\u540C\u65F6\u88AB\u5077</li></ul><p>\u9996\u5C3E\u4E0D\u80FD\u540C\u65F6\u88AB\u5077\uFF0C\u5BF9\u5E94\u60C5\u51B5\u4E3Aa\u3001\u9996\u5C3E\u90FD\u6CA1\u6709\u88AB\u5077\uFF1Bb\u3001\u4E0D\u5077\u5C3E\uFF1Bc\u3001\u4E0D\u5077\u9996\uFF1B<br> \u800C\u540E\u5E94\u7528\u4E0A\u9898\u7B97\u6CD5\u53D6\u6700\u5927\u503C\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">rob</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span><span class="token function">rob</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> dp_i_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp_i_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> start<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      dp_i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp_i_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dp_i_2 <span class="token operator">=</span> dp_i_1<span class="token punctuation">;</span>
      dp_i_1 <span class="token operator">=</span> dp_i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp_i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">rob</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u53D6\u4E0D\u5077\u9996\u548C\u4E0D\u5077\u5C3E\u4E2D\u7684\u8F83\u5927\u503C\uFF0C\u56E0\u4E3A\u9996\u5C3E\u8FD9\u4E24\u79CD\u60C5\u51B5\u53EF\u4EE5\u5305\u542B\u9996\u5C3E\u90FD\u4E0D\u5077</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 337 \u6253\u5BB6\u52AB\u820DIII \u4E0E198\u9898\u57FA\u672C\u4E00\u81F4\u4F46\u623F\u5B50\u5728\u4E8C\u53C9\u6811\u4E0A\uFF0C\u8F93\u5165\u4E3A\u6811\u7684\u6839\u8282\u70B9</li></ul><p>\u8FD9\u6B21\u8BE5\u7528\u81EA\u9876\u5411\u4E0B\u7684\u601D\u8DEF\uFF0C\u6BCF\u4E2A\u8282\u70B9\u4E0A\u53EF\u9009\u62E9\u5077\u6216\u4E0D\u5077\uFF0C\u5BF9\u5E94\u7684\u7740\u4E0D\u540C\u7684\u6536\u76CA<br> \u540C\u65F6\u9012\u5F52\u8BA1\u7B97\u5176\u5B50\u8282\u70B9\u5BF9\u5E94\u7684\u4E24\u79CD\u60C5\u51B5\u7684\u6536\u76CA\uFF0C\u82E5\u9009\u62E9\u5077\uFF0C\u5219\u5DE6\u53F3\u8282\u70B9\u5747\u4E0D\u53EF\u5077\uFF0C\u9009\u62E9\u5DE6\u53F3\u8282\u70B9\u4E0D\u53EF\u5077\u7684\u6536\u76CA\u60C5\u51B5\u4E0E\u5F53\u524D\u8282\u70B9\u76F8\u52A0\u5373\u53EF<br> \u82E5\u9009\u62E9\u4E0D\u5077\uFF0C\u5219\u5DE6\u53F3\u8282\u70B9\u53EF\u9009\u5077\u6216\u4E0D\u5077\uFF0C\u9009\u53D6\u6536\u76CA\u7684\u8F83\u5927\u7EC4\u5408\u5373\u53EF\uFF0C\u8FD4\u56DE\u5F53\u524D\u8282\u70B9\u5077\u4E0E\u4E0D\u5077\u7684\u4E24\u79CD\u60C5\u51B5\u7684\u6536\u76CA<br> \u9012\u5F52\u7EC8\u6B62\u6761\u4EF6\u4E3A\u5F53\u524D\u8282\u70B9\u4E3Anull\uFF0C\u8FD4\u56DE\u6536\u76CA\u4E3A0\u7684\u6570\u7EC4\u5373\u53EF<br> \u6C42\u53D6\u6839\u8282\u70B9\u7684\u6536\u76CA\uFF0C\u8FD4\u56DE\u6536\u76CA\u8F83\u5927\u7684\u60C5\u51B5\u5373\u53EF\u5F97\u6700\u7EC8\u7ED3\u679C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">robCore</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">robCore</span><span class="token punctuation">(</span>root<span class="token operator">:</span>TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">robCore</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">robCore</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> doIt <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5077root\uFF0C\u5219\u5DE6\u53F3\u5747\u4E0D\u53EF\u5077</span>
  <span class="token keyword">let</span> notDo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>notDo<span class="token punctuation">,</span> doIt<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6307\u9488\u5BF9\u649E\u4E4Bn\u6570\u4E4B\u548C" tabindex="-1"><a class="header-anchor" href="#\u6307\u9488\u5BF9\u649E\u4E4Bn\u6570\u4E4B\u548C" aria-hidden="true">#</a> \u6307\u9488\u5BF9\u649E\u4E4BN\u6570\u4E4B\u548C</h2><p>\u4ECE\u4E24\u6570\u4E4B\u548C\u5230\u4E09\u6570\u4E4B\u548C\u518D\u5230N\u6570\u4E4B\u548C\u53EF\u5957\u7528\u76F8\u540C\u7684\u6307\u9488\u5BF9\u649E\u6846\u67B6<br> \u4EE5\u4E24\u6570\u4E4B\u548C\u4E3A\u4F8B\uFF1A \u9996\u5148\u9700\u8981\u5BF9\u8F93\u5165\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\uFF0C\u968F\u540E\u4F7F\u7528start\u548Cend\u4E24\u6307\u9488\u5BF9\u649E\u6BD4\u5BF9\u4E0Etarget\u7684\u5927\u5C0F<br> \u540C\u65F6\u53EF\u8DF3\u8FC7\u76F8\u540C\u7684\u5143\u7D20\uFF0C\u4E24\u6307\u9488\u76F8\u9047\u65F6\uFF0C\u5373\u641C\u7D22\u5B8C\u6240\u6709\u53EF\u80FD\u7684\u7EC4\u5408\u8FD4\u56DE\u7ED3\u679C\u5373\u53EF</p><p>\u4E09\u6570\u4E4B\u548C\u540C\u7406\uFF0C\u5148\u56FA\u5B9A\u4E00\u4E2A\u5143\u7D20\uFF0C\u518D\u8C03\u7528\u4E24\u6570\u4E4B\u548C<br> n\u6570\u4E4B\u548C\u5219\uFF0C\u9012\u5F52\u7684\u56FA\u5B9A\u4E00\u4E2A\u5143\u7D20\uFF0C\u5C06\u95EE\u9898\u8F6C\u6362\u4E3A\u4E24\u6570\u4E4B\u548C\u8FDB\u884C\u6C42\u89E3(ps\uFF1A\u6392\u5E8F\u4E0D\u53EF\u653E\u5165\u9012\u5F52\u51FD\u6570)</p><p>\u5BF9\u5E94leetcode \u9898\u76EE</p><ul><li>leetcode 1(\u4E24\u6570\u4E4B\u548C), 15(\u4E09\u6570\u4E4B\u548C), 18(\u56DB\u6570\u4E4B\u548C)</li></ul><p>\u6B64\u5904\u4EC5\u7ED9\u51FAN\u6570\u4E4B\u548C\u7684\u89E3\u9898\u4EE3\u7801\uFF0C\u5373\u53EF\u5957\u7528\u5230\u4E0A\u8FF0leetcode\u9898\u4E2D</p>`,86),L=p(`<h2 id="\u7B97\u6CD5\u590D\u6742\u5EA6\u5206\u6790\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#\u7B97\u6CD5\u590D\u6742\u5EA6\u5206\u6790\u6846\u67B6" aria-hidden="true">#</a> \u7B97\u6CD5\u590D\u6742\u5EA6\u5206\u6790\u6846\u67B6</h2><p>\u7B97\u6CD5\u65F6\u7A7A\u590D\u6742\u5EA6\u901A\u5E38\u4F7F\u7528\u5927O\u8868\u793A\u6CD5\uFF0C\u7528\u4E8E\u8868\u793A\u65F6\u7A7A\u590D\u6742\u5EA6\u7684\u4E0A\u9650\uFF0C\u8868\u793A\u7B97\u6CD5\u65F6\u95F4\u548C\u7A7A\u95F4\u6D88\u8017\u968F\u8F93\u5165\u53D8\u5316\u7684\u8D8B\u52BF<br> O\u8868\u793A\u4E00\u7EC4\u51FD\u6570\u96C6\u5408<code>O(g(n))</code>\uFF0C<code>g(n)</code>\u8868\u793A\u4E0A\u9650\uFF0C\u5373\u53EA\u4FDD\u7559\u589E\u957F\u901F\u7387\u6700\u5FEB\u7684\u9879\uFF0C\u5176\u4ED6\u9879\u53EF\u4EE5\u7701\u7565</p><ul><li>\u975E\u9012\u5F52\u7B97\u6CD5</li></ul><p>\u975E\u9012\u5F52\u7C7B\u7B97\u6CD5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E00\u822C\u4E0E\u5176\u5D4C\u5957\u5FAA\u73AF\u5C42\u6570\u6709\u5173\uFF0C\u5927\u90E8\u5206\u573A\u666F\u5C06\u5176\u5D4C\u5957\u5C42\u6570\u7684\u590D\u6742\u5EA6\u76F8\u4E58\u5373\u53EF\u3002<br> \u4F46\u50CF\u6307\u9488\u5BF9\u649E\u53BB\u91CD\u7B49\u573A\u666F\u7684\u5FAA\u73AF\u5D4C\u5957\uFF0C\u5219\u5176\u603B\u904D\u5386\u6570\u4E0D\u53D8\uFF0C\u5D4C\u5957\u5FAA\u73AF\u5C42\u6570\u4E0D\u589E\u52A0\u590D\u6742\u5EA6<br> \u5BF9\u4E8E\u7A7A\u95F4\u590D\u6742\u5EA6\u9700\u8981\u770B\u5B58\u50A8\u7A7A\u95F4\u7533\u8BF7</p><ul><li>\u6570\u636E\u7ED3\u6784\u5206\u6790</li></ul><p>\u5728\u5185\u5B58\u4E2D\u987A\u5E8F\u5B58\u50A8\u7684\u6570\u7EC4\u5728\u5C3E\u90E8\u6DFB\u52A0\u5143\u7D20\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\uFF0C\u4F46\u8FDE\u7EED\u5B58\u50A8\u7A7A\u95F4\u4E0D\u8DB3\uFF0C\u9700\u8981\u6269\u5BB9\u65F6\u6570\u636E\u8FC1\u79FB\u7684\u590D\u6742\u5EA6\u53C8\u662FO(N)\u3002<br> \u7C7B\u4F3C\u60C5\u51B5\u9700\u8981\u770B\u6570\u636E\u7ED3\u6784\u7684\u5E73\u5747\u65F6\u95F4\u590D\u6742\u5EA6\uFF0C\u5982\u4E00\u6B21\u63D2\u5165\u6570\u636E\u5230\u957F\u5EA6\u4E3AN\u7684\u6570\u7EC4\uFF0C\u524DN-1\u4E2A\u5143\u7D20\u64CD\u4F5C\u65F6\u95F4\u590D\u6742\u5EA6\u603B\u548C\u4E3AN-1*O(1)\uFF0C\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u9700\u8981\u6269\u5BB9\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(N)<br> \u5219\u6BCF\u4E2A\u5143\u7D20\u63D2\u5165\u5E73\u5747\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A<code>(N-1*O(1)+O(N))/N=O(1)</code></p><ul><li>\u9012\u5F52\u7B97\u6CD5</li></ul><p>\u65F6\u95F4\u590D\u6742\u5EA6=\u9012\u5F52\u6B21\u6570\xD7\u51FD\u6570\u672C\u8EAB\u65F6\u95F4\u590D\u6742\u5EA6=\u9012\u5F52\u6811\u8282\u70B9\u4E2A\u6570\xD7\u6BCF\u4E2A\u8282\u70B9\u65F6\u95F4\u590D\u6742\u5EA6<br> \u7A7A\u95F4\u590D\u6742\u5EA6=\u9012\u5F52\u6808\u6DF1\u5EA6\xD7\u51FD\u6570\u7533\u8BF7\u7684\u5B58\u50A8\u7A7A\u95F4=\u9012\u5F52\u6811\u9AD8\u5EA6\xD7\u7B97\u6CD5\u7533\u8BF7\u7684\u5B58\u50A8\u7A7A\u95F4</p><p>\u9012\u5F52\u7B97\u6CD5\u590D\u6742\u5EA6\u5206\u6790\u5728\u4E8E\uFF0C\u90E8\u5206\u7B97\u6CD5\u4E2D\u6709\u8FDB\u884C\u526A\u679D(\u6253dp\u8868\u5907\u5FD8\u5F55\u6216\u56FA\u5B9A\u6761\u4EF6\u5224\u65AD)\uFF0C\u56E0\u6B64\u9012\u5F52\u6811\u7684\u8282\u70B9\u901A\u5E38\u4E0D\u662F\u6EE1N\u53C9\u6811\uFF0C\u9700\u8981\u6CE8\u610F\u7504\u522B</p><h2 id="\u673A\u8BD5\u4E0A\u5206\u5957\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u673A\u8BD5\u4E0A\u5206\u5957\u8DEF" aria-hidden="true">#</a> \u673A\u8BD5\u4E0A\u5206\u5957\u8DEF</h2><ul><li>\u907F\u5B9E\u5C31\u865A\uFF1A\u673A\u8BD5\u9700\u8981\u81EA\u5DF1\u5904\u7406\u6570\u636E\u7136\u540E\u653E\u7A0B\u5E8F\u6253\u5370\u8F93\u51FA\u65F6,\u4EE5\u89E3\u51FA\u9898\u76EE\u4E3A\u51C6\uFF0C\u76F4\u63A5\u8868\u8FBE\u51FA\u7B97\u6CD5\u601D\u60F3\uFF0C\u800C\u65E0\u9700\u6309\u7167\u9898\u76EE\u89C4\u5B9A\u4F7F\u7528\u590D\u6742\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u5982\uFF0C\u76F4\u63A5\u4F7F\u7528\u5185\u7F6E\u7684\u6392\u5E8F\u7B97\u6CD5\u7B49</li><li>\u5DE7\u7528\u968F\u673A\u6570\uFF1A\u5728\u9047\u5230\u9898\u76EE\u4E0D\u4F1A\u505A\uFF0C\u800C\u8F93\u51FA\u4E3A\u56FA\u5B9A\u7684\u51E0\u79CD\u503C\u65F6\uFF0C\u53EF\u901A\u8FC7\u8F93\u51FA\u56FA\u5B9A\u503C\u770B\u901A\u8FC7\u7387\uFF0C\u7136\u540E\u6839\u636E\u901A\u8FC7\u7387\u8BBE\u7F6E\u968F\u673A\u6982\u7387\u8F93\u51FA\u5BF9\u5E94\u7684\u7ED3\u679C</li><li>\u4EE3\u7801\u5206\u5C42\uFF1A\u5373\u4E0D\u8981\u628A\u4EE3\u7801\u653E\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D\uFF0C\u9002\u5F53\u5206\u5C42\u5206\u89E3\u4E3A\u591A\u4E2A\u51FD\u6570\uFF0C\u6709\u5229\u4E8E\u7406\u6E05\u601D\u8DEF</li><li>debug\uFF1A\u7B97\u6CD5\u51FA\u9519\u65F6\u53EF\u4EE5\u5148\u68C0\u67E5\u4E0B\u4EE3\u7801\uFF0C\u7136\u540Eprint\u51FA\u4E00\u4E9B\u5173\u952E\u53D8\u91CF\uFF0C\u5BF9\u4E8E\u9012\u5F52\u7B97\u6CD5\uFF0C\u5728\u5173\u952E\u53D8\u91CF\u524D\u6253\u5370\u7F29\u8FDB\u65B9\u4FBF\u89C2\u5BDF\u6BCF\u8F6E\u9012\u5F52\u5BF9\u5E94\u7684\u53D8\u91CF</li></ul><p>\u673A\u8BD5\u524D\u6700\u597D\u628A\u5404\u9898\u578B\u90FD\u8FC7\u4E00\u904D\uFF0C\u907F\u514D\u6B7B\u78D5\u67D0\u9053\u9898</p><h2 id="\u9012\u5F52\u4E4B\u53CD\u8F6C\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u4E4B\u53CD\u8F6C\u94FE\u8868" aria-hidden="true">#</a> \u9012\u5F52\u4E4B\u53CD\u8F6C\u94FE\u8868</h2><p>\u5BF9\u4E8E\u4EC5\u53CD\u8F6C\u94FE\u8868\u4E2D\u6307\u5B9A\u90E8\u5206\u95EE\u9898\uFF0C\u53EF\u4F7F\u7528\u9012\u5F52\u6765\u89E3\u51B3</p><ul><li>leetcode 206 \u53CD\u8F6C\u6574\u4E2A\u94FE\u8868</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
  <span class="token keyword">const</span> last<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u8FD4\u56DE\u65B0\u7684\u94FE\u8868\u5934</span>
  head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// \u6B64\u65F6head.next\u6307\u5411\u53CD\u8F6C\u540E\u94FE\u8868\u672B\u5C3E,\u5C06head\u6DFB\u52A0\u4E3A\u65B0\u672B\u5C3E</span>
  head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u65B0\u94FE\u8868\u5C3E\u90E8\u6E05\u7A7A</span>
  <span class="token keyword">return</span> last<span class="token punctuation">;</span> <span class="token comment">// \u8FD4\u56DE\u65B0\u94FE\u8868\u5934\u90E8</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728\u6B64\u57FA\u7840\u4E0A\uFF0C\u53CD\u8F6C\u94FE\u8868\u7684\u524DN\u4E2A\u8282\u70B9</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>successor<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u9012\u5F52\u7EC8\u70B9\uFF0C\u6682\u5B58\u8303\u56F4\u5916\u7684\u5934\u7ED3\u70B9\uFF0C\u4FBF\u4E8E\u6062\u590D\u5269\u4F59\u7684\u8282\u70B9</span>
    successor <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> last<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u8FD4\u56DE\u65B0\u7684\u94FE\u8868\u5934\uFF0C\u5E76\u5C06\u9012\u5F52\u8BA1\u6570\u51CF1</span>
  head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// \u6B64\u65F6head.next\u6307\u5411\u53CD\u8F6C\u540E\u94FE\u8868\u672B\u5C3E,\u5C06head\u6DFB\u52A0\u4E3A\u65B0\u672B\u5C3E</span>
  head<span class="token punctuation">.</span>next <span class="token operator">=</span> successor<span class="token punctuation">;</span> <span class="token comment">// \u65B0\u7684\u94FE\u8868\u5C3E\u90E8\u8FDE\u63A5successor\uFF0C\u53CD\u8F6C\u8FC7\u7A0B\u4E2D\u4E3A\u6E05\u7A7A\uFF0C\u9012\u5F52\u7ED3\u675F\u65F6\u4FEE\u590D\u5269\u4F59\u8282\u70B9\u4E86\u8FDE\u63A5</span>
  <span class="token keyword">return</span> last<span class="token punctuation">;</span> <span class="token comment">// \u8FD4\u56DE\u65B0\u94FE\u8868\u5934\u90E8</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 92 \u53CD\u8F6C\u94FE\u88682 \u53CD\u8F6C\u94FE\u8868\u6307\u5B9A\u8303\u56F4\u7684\u8282\u70B9</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u5728\u4E0A\u9762\u53CD\u8F6C\u524DN\u4E2A\u8282\u70B9\u7684\u57FA\u7840\u4E0A</span>
<span class="token keyword">function</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5F53\u8D77\u70B9\u4E3A1\u65F6\uFF0C\u5219\u76F8\u5F53\u4E8E\u53CD\u8F6C\u524Dright\u4E2A\u8282\u70B9</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8D77\u70B9\u4E0D\u4E3A1\u65F6\uFF0C\u9012\u5F52\u8F6C\u6362\u4E3A\u8D77\u70B9\u4E3A1\u7684\u60C5\u51B5\uFF0C\u5373\u5BF9\u4EE5head.next\u4E3A\u65B0\u8D77\u70B9</span>
  head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 25 k\u4E2A\u4E00\u7EC4\u53CD\u8F6C\u94FE\u8868</li></ul><p>\u4EE5k\u4E2A\u8282\u70B9\u4E3A\u4E00\u7EC4\uFF0C\u53CD\u8F6C\u94FE\u8868\uFF0C\u82E5\u5269\u4F59\u8282\u70B9\u4E0D\u8DB3k\u5219\u4E0D\u8FDB\u884C\u53CD\u8F6C</p><p>\u601D\u8DEF\uFF1A\u8FDB\u884C\u95EE\u9898\u62C6\u5206\uFF0C\u9996\u5148\u5B9E\u73B0\u53CD\u8F6C\u94FE\u8868\u51FD\u6570\uFF0C\u5E76\u901A\u8FC7\u4F20\u5165\u7EC8\u70B9\u8282\u70B9\uFF0C\u5B8C\u6210\u6307\u5B9A\u8303\u56F4\u7684\u8282\u70B9\u53CD\u8F6CreverseRange<br> \u5FAA\u73AF\u79FB\u52A8\u7EC8\u70B9\u6307\u9488b\uFF0C\u8C03\u7528reverseRange\u5BF9\u6307\u5B9A\u8303\u56F4\u7684\u94FE\u8868\u8FDB\u884C\u53CD\u8F6C\uFF0C\u83B7\u53D6\u53CD\u8F6C\u540E\u7684\u5934\u7ED3\u70B9last\uFF0C\u6B64\u65F6\u8D77\u70B9a\u5373\u4E3A\u53CD\u8F6C\u94FE\u8868\u7684\u672B\u5C3E\u8282\u70B9,\u5C06a\u4E0E\u5269\u4F59\u8282\u70B9(\u8D77\u70B9\u4E3Ab)\u9012\u5F52\u53CD\u8F6C\u540E\u7684\u7ED3\u679C\u76F8\u8FDE<br> \u8FD4\u56DE\u65B0\u7684\u5934\u8282\u70B9last\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseRange</span><span class="token punctuation">(</span>a<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">,</span> b<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> pre<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> cur<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> next<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// \u79FB\u52A8next</span>
    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token comment">// \u65AD\u5F00\u5E76\u53CD\u8F6Ccur</span>
    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">// \u79FB\u52A8pre\u548Ccur\uFF0C\u51C6\u5907\u4E0B\u6B21\u8FED\u4EE3</span>
    cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> pre<span class="token punctuation">;</span> <span class="token comment">// \u8FD4\u56DE\u7684pre\u5934\u8282\u70B9\u5E76\u672A\u4E0Eb\u4E3B\u94FE\u76F8\u8FDE</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> head<span class="token punctuation">,</span> b<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u6EE1k\u65E0\u9700\u53CD\u8F6C\uFF0C\u5219\u8FD4\u56DEhead</span>
    b <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token function">reverseRange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u53CD\u8F6C[a, b)\uFF0C\u83B7\u53D6\u53CD\u8F6C\u540E\u7684\u5934\u6307\u9488</span>
  a<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECEb\u5F00\u59CB\u9012\u5F52\uFF0C\u4E0A\u4E00\u4E2A\u5DF2\u53CD\u8F6C\u5B50\u94FE\u672B\u5C3Ea</span>
  <span class="token keyword">return</span> last<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 234 \u56DE\u6587\u94FE\u8868 \u5224\u65AD\u4E00\u4E2A\u94FE\u8868\u662F\u5426\u662F\u56DE\u6587\u94FE\u8868</li></ul><p>\u5206\u6790\uFF1A\u901A\u5E38\u67E5\u627E\u56DE\u6587\u4E32\u662F\u6307\u9488\u7531\u4E2D\u5FC3\u5411\u4E24\u8FB9\u6269\u6563\uFF0C\u5224\u65AD\u662F\u5426\u662F\u56DE\u6587\u4E32\u65F6\u7531\u6307\u9488\u4ECE\u4E24\u8FB9\u5411\u4E2D\u95F4\u5BF9\u649E<br> \u5BF9\u4E8E\u94FE\u8868\uFF0C\u56E0\u4E3A\u53EA\u80FD\u5355\u5411\u904D\u5386\u7684\u7279\u6027\u65E0\u6CD5\u76F4\u63A5\u5E94\u7528\u53CC\u6307\u9488\uFF0C\u4F46\u53EF\u4EE5\u6709\u4EE5\u4E0B\u601D\u8DEF\u8FDB\u884C\u89E3\u9898</p><p>\u601D\u8DEF1\uFF1A\u521B\u5EFA\u4E00\u4E2A\u53CD\u8F6C\u7684\u94FE\u8868\u518D\u6BD4\u8F83\u662F\u5426\u76F8\u540C<br> \u601D\u8DEF2\uFF1A\u501F\u52A9\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386\u601D\u8DEF\uFF0C\u5728\u9012\u5F52\u7684\u904D\u5386\u94FE\u8868\u7B97\u6CD5\u4E2D\u53EF\u7C7B\u6BD4\u4E8C\u53C9\u6811\u7684\u904D\u5386:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// \u524D\u5E8F\u904D\u5386\u4EE3\u7801\uFF0C \u6B64\u5904\u53EF\u6253\u5370val</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u540E\u5E8F\u904D\u5386\u4EE3\u7801\uFF0C \u6B64\u5904\u53EF\u5012\u5E8F\u904D\u5386\u94FE\u8868</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u672C\u8D28\u662F\u5728\u5229\u7528\u9012\u5F52\u6808\u5B58\u50A8\u4E4B\u524D\u7684\u90E8\u5206\u201Cright\u53F3\u5B50\u6811\u201D, \u9012\u5F52\u7248\u53CC\u6307\u9488\u9898\u89E3\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>right<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E\u4EE3\u7801</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// res\u8BB0\u5F55\u9012\u5F52\u7684\u53CC\u7AEF\u6307\u9488\u6BD4\u8F83\u7ED3\u679C\uFF0C\u521D\u59CB\u503C\u4E3Atrue</span>
    <span class="token comment">// \u540E\u5E8F\u904D\u5386\u4F4D\u7F6E\u6267\u884C\u6BD4\u8F83\u903B\u8F91</span>
    res <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>val <span class="token operator">===</span> left<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token comment">// \u4E0A\u4E00\u6B65\u6BD4\u8F83\u7ED3\u679Cres\u4E3Atrue\u5219\u8FDB\u884C\u672C\u6B21\u6BD4\u8F83</span>
    left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// \u5411\u53F3\u79FB\u52A8\u5DE6\u6307\u9488\uFF0C\u53F3\u6307\u9488\u7531\u9012\u5F52\u6808\u81EA\u52A8\u79FB\u52A8</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u7684\u8FD4\u56DE\u6BD4\u8F83\u7ED3\u679C</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u601D\u8DEF3\uFF1A\u5148\u901A\u8FC7\u5FEB\u6162\u6307\u9488\u627E\u5230\u94FE\u8868\u4E2D\u70B9\uFF0C\u518D\u53CD\u8F6C\u540E\u534A\u90E8\u5206\u5E76\u4E0E\u524D\u534A\u90E8\u5206\u8FDB\u884C\u6BD4\u8F83</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reserve</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> pre<span class="token operator">:</span>ListNode<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span> slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// fast\u4E0D\u4E3Anull\u8BF4\u660E\u94FE\u8868\u957F\u5EA6\u4E3A\u5947\u6570\uFF0Cslow\u9700\u8981\u5411\u540E\u79FB\u4E00\u6B65</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> head<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token function">reserve</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u53CD\u8F6C\u540E\u534A\u90E8\u5206</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u524D\u7F00\u548C\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u524D\u7F00\u548C\u6570\u7EC4" aria-hidden="true">#</a> \u524D\u7F00\u548C\u6570\u7EC4</h2><p>\u201C\u524D\u7F00\u548C\u201D\u6570\u7EC4\u53EF\u4EE5\u7528\u4E8E\u5FEB\u901F\u9891\u7E41\u7684\u8BA1\u7B97\u6570\u7EC4\u7684\u6307\u5B9A\u533A\u95F4\u5185\u7684\u5143\u7D20\u548C</p><ul><li>leetcode 303 \u533A\u57DF\u548C\u68C0\u7D22-\u6570\u7EC4\u4E0D\u53EF\u53D8\uFF0C\u8BA1\u7B97\u6570\u7EC4\u6307\u5B9A\u533A\u95F4\u5185\u7684\u5143\u7D20\u548C</li></ul><p>\u901A\u5E38\u8BA1\u7B97\u6570\u7EC4\u6307\u5B9A\u533A\u95F4\u5185\u7684\u5143\u7D20\u548C\u53EF\u4EE5\u901A\u8FC7\u5FAA\u73AF\u904D\u5386\u6307\u5B9A\u533A\u95F4\u7D2F\u52A0\u6C42\u548C\u5F97\u51FA\uFF0C\u4F46\u9762\u5BF9\u9891\u7E41\u67E5\u8BE2\u6307\u5B9A\u533A\u95F4\u5143\u7D20\u548C\u7684\u9700\u6C42\uFF0C\u6BCF\u6B21\u91CD\u65B0\u8BA1\u7B97\u5219\u6027\u80FD\u6D88\u8017\u8FC7\u5927<br> \u201C\u524D\u7F00\u548C\u201D\u6570\u7EC4\u6B63\u662F\u7528\u6765\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF0C\u6570\u7EC4preSum\u7684\u7B2Ci\u4E2A\u4F4D\u7F6E\u8BB0\u5F55\u4E86\u524Di\u4E2A\u5143\u7D20\u7684\u548C\uFF0C\u56E0\u6B64\u67E5\u8BE2\u533A\u95F4left\u5230right\u7684\u5143\u7D20\u548C\u53EF\u76F4\u63A5\u8FD4\u56DE<code>preSum[right+1] - preSum[left]</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span>
  preSum<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> preSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// nums[i-1]\u4E0EpreSum[i]\u5BF9\u9F50</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>preSum <span class="token operator">=</span> preSum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sumRange</span><span class="token punctuation">(</span>left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token comment">// preSum \u4ECE1\u5F00\u59CB\u5BF9\u9F50nums \u76840</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 304 \u4E8C\u7EF4\u533A\u57DF\u548C\u68C0\u7D22-\u77E9\u9635\u4E0D\u53EF\u53D8\uFF0C\u8BA1\u7B97\u6307\u5B9A\u5B50\u77E9\u9635\u533A\u95F4\u5185\u5143\u7D20\u4E4B\u548C</li></ul><p>\u601D\u8DEF\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u7EF4\u62A4\u4EE5\u539F\u70B9\u4E3A\u5B9A\u70B9\uFF0C\u4EFB\u610F\u5750\u6807\u4E3A\u7EC8\u70B9\u7684\u201C\u524D\u7F00\u548C\u201D\u77E9\u9635\uFF0C\u8FD4\u56DE<br><code>preSum[x2+1][y2+1] - preSum[x1][y2+1] - preSum[x2+1][y1] + preSum[x1][y1]</code>\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>
  preSum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>matrix<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> preSum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
      <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6784\u9020m+1*n+1\u7684\u4E8C\u7EF4\u524D\u7F00\u548C\u77E9\u9635</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> preSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>preSum <span class="token operator">=</span> preSum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sumRegion</span><span class="token punctuation">(</span>row1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> col1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> row2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> col2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5DEE\u5206\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5DEE\u5206\u6570\u7EC4" aria-hidden="true">#</a> \u5DEE\u5206\u6570\u7EC4</h2><p>\u4E0E\u4E0A\u8282\u524D\u7F00\u548C\u6570\u7EC4\u7C7B\u4F3C\uFF0C\u5DEE\u5206\u6570\u7EC4\u4E5F\u662F\u901A\u8FC7\u6784\u9020\u8F85\u52A9\u6570\u7EC4\u6765\u89E3\u51B3\u9891\u7E41\u5BF9\u539F\u59CB\u6570\u7EC4\u67D0\u4E2A\u533A\u95F4\u7684\u5143\u7D20\u8FDB\u884C\u589E\u51CF\u95EE\u9898\u7684<br> \u5982\uFF1A\u5BF9<code>num[2,6]</code>\u533A\u95F4\u7684\u5143\u7D20\u5168\u90E8\u52A01\uFF0C\u5DEE\u5206\u6570\u7EC4<code>diff[i]</code>\u8BB0\u5F55\u4E86<code>nums[i]</code>\u548C<code>nums[i-1]</code>\u4E4B\u5DEE<br> \u5BF9\u533A\u95F4\u8FDB\u884C\u589E\u51CF\u64CD\u4F5C\u5373\uFF0C\u5BF9\u5DEE\u5206\u6570\u7EC4<code>diff[i] += n</code>\uFF0C \u7136\u540E\u518D\u8BA9<code>diff[j+1] -= n</code>\u5373\u53EF<br> \u53D6\u51FA\u6570\u7EC4\u65F6\uFF0C\u901A\u8FC7diff\u53CD\u63A8nums\u6570\u7EC4</p><ul><li>leetcode 370 \u533A\u95F4\u52A0\u6CD5(\u4F1A\u5458\u9898\uFF0C\u56E0\u6B64\u7B97\u6CD5\u672A\u8FDB\u884C\u9A8C\u8BC1)</li></ul><p>\u957F\u5EA6\u4E3An\u7684\u6570\u7EC4\uFF0C\u521D\u59CB\u6570\u5B57\u90FD\u4E3A0\uFF0C\u7ED9\u51FAk\u4E2A\u66F4\u65B0\u64CD\u4F5C\uFF0C\u6BCF\u6B21\u64CD\u4F5C\u4F1A\u9009\u5B9A\u533A\u95F4<code>[startIndex, endIndex]</code>\u7684\u6570\u5B57\u589E\u52A0inc\uFF0C\u8FD4\u56DEk\u6B21\u64CD\u4F5C\u540E\u7684\u6570\u7EC4</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>
  diff<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">increment</span><span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> j<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> val<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5165\u53E3\u7B97\u6CD5</span>
<span class="token keyword">function</span> <span class="token function">getModifiedArray</span><span class="token punctuation">(</span>length<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> updates<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u751F\u6210\u76EE\u6807\u6570\u7EC4</span>
  <span class="token keyword">let</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> updates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> updates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    df<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1109 \u822A\u73ED\u9884\u5B9A\u7EDF\u8BA1</li></ul><p>n\u4E2A\u822A\u73ED\uFF0C\u4ECE1\u5230n\u7F16\u53F7\uFF1B \u822A\u73ED\u9884\u5B9A\u8868\u7B2Ci\u6761<code>bookings[i] = [i,j,k]</code>\u8868\u793A\u4ECEi\u5230j\u7684\u6BCF\u4E2A\u822A\u73ED\u9884\u5B9A\u4E86k\u4E2A\u5EA7\u4F4D<br> \u8FD4\u56DE\u957F\u5EA6\u4E3An\u7684\u6570\u7EC4answer\uFF0C\u6309\u822A\u73ED\u7F16\u53F7\u987A\u5E8F\u8FD4\u56DE\u6BCF\u4E2A\u822A\u73ED\u9884\u5B9A\u7684\u5EA7\u4F4D\u6570</p><p>\u601D\u8DEF\uFF1A\u95EE\u9898\u672C\u8D28\u4E5F\u53EF\u901A\u8FC7\u5DEE\u5206\u6570\u7EC4\u6765\u89E3\u51B3</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u9700\u8981\u7528\u5230\u4E0A\u9762\u7684Difference\u7C7B</span>
<span class="token keyword">function</span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span>bookings<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u822A\u73ED\u5EA7\u4F4D\u9884\u5B9A\u6570\u4E3A0\uFF0C\u7D22\u5F15\u4ECE0\u5F00\u59CB</span>
  <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6784\u9020\u5DEE\u5206\u7C7B</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bookings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5FAA\u73AF\u5E94\u7528\u9884\u5B9A\u5EA7\u4F4D</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u822A\u73ED\u53F7\u8F6C\u6362\u4E3A\u7D22\u5F15\u56E0\u6B64\u51CF1</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u95ED\u533A\u95F4\uFF0C\u7ED3\u675F\u822A\u73ED\u53F7\u8F6C\u6362\u4E3A\u7D22\u5F15\u5219\u4E0D\u5FC5\u51CF1</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u9884\u5B9A\u6570\u91CF</span>
    diff<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> diff<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1094 \u62FC\u8F66</li></ul><p>\u516C\u4EA4\u8F66\u6700\u5927\u8F7D\u5BA2\u91CFcapacity\u6CBF\u9014\u9700\u8981\u7ECF\u8FC7\u82E5\u5E72\u8F66\u7AD9\uFF0C\u4E58\u5BA2\u884C\u7A0B\u8868trips\uFF0C <code>trips[i] = [num, start, end]</code>\u8868\u793A\u6709num\u4E2A\u4E58\u5BA2\u4ECEstart\u7AD9\u4E0A\u8F66\uFF0Cend\u7AD9\u4E0B\u8F66\uFF0C\u8BA1\u80FD\u5426\u4E00\u6B21\u628A\u6240\u6709\u4E58\u5BA2\u8FD0\u5B8C(\u5373\u4E0D\u80FD\u8D85\u8FC7\u6700\u5927\u8F7D\u5BA2\u91CFcapacity)</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u9700\u8981\u7528\u5230\u4E0A\u9762\u7684Difference\u7C7B</span>
<span class="token keyword">function</span> <span class="token function">carPooling</span><span class="token punctuation">(</span>trips<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> capacity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> actualCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>actualCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> trips<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u6B64\u7AD9\u4E0A\u8F66</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// </span>
    diff<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> diff<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E8C\u7EF4\u6570\u7EC4\u7684\u904D\u5386\u6280\u5DE7" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u7EF4\u6570\u7EC4\u7684\u904D\u5386\u6280\u5DE7" aria-hidden="true">#</a> \u4E8C\u7EF4\u6570\u7EC4\u7684\u904D\u5386\u6280\u5DE7</h2><ul><li>leetcode 48 \u65CB\u8F6C\u56FE\u50CF</li></ul><p>\u7ED9\u5B9An*n\u77E9\u9635matrix\u8868\u793A\u4E00\u4E2A\u56FE\u50CF\uFF0C\u5C06\u56FE\u50CF\u987A\u65F6\u9488\u65CB\u8F6C90\u5EA6(\u5FC5\u987B\u539F\u5730\u4FEE\u6539)<br> \u601D\u8DEF\uFF1A\u76F4\u89C2\u53BB\u65CB\u8F6C\u4E8C\u7EF4\u77E9\u9635\uFF0C\u64CD\u4F5C\u5341\u5206\u9EBB\u70E6\uFF1B\u5C06\u5176\u62C6\u5206\u4E3A\u884C\u53D8\u5217\uFF0C\u5217\u8FB9\u884C\uFF0C\u7136\u540E\u53CD\u8F6C\u64CD\u4F5C\u5219\u8F83\u4E3A\u7B80\u5355<br> \u9488\u5BF9\u672C\u9898\u5373\uFF0C\u5C06\u77E9\u9635\u6CBF(0,0)\u548C(n,n)\u5BF9\u89D2\u7EBF\u955C\u50CF\u7FFB\u8F6C\u3002\u7136\u540E\u5BF9\u6BCF\u4E00\u884C\u8FDB\u884C\u53CD\u8F6C\u5373\u53EF</p><p>\u5982\u56FE\uFF1A \u6CBF\u5BF9\u89D2\u7EBF\u8FDB\u884C\u65CB\u8F6C<br><img src="`+k+'" alt="rotateMatrix01"><br> \u518D\u5BF9\u77E9\u9635\u7684\u6BCF\u4E00\u884C\u8FDB\u884C\u53CD\u8F6C<br><img src="'+r+'" alt="rotateMatrix02"><br> \u6240\u5F97\u7ED3\u679C\u5373\u4E3A\u987A\u65F6\u9488\u65CB\u8F6C90\u5EA6<br><img src="'+d+`" alt="rotateMatrix03"></p><p>\u82E5\u8981\u9006\u65F6\u9488\u65CB\u8F6C\uFF0C\u5219\u955C\u50CF\u53E6\u4E00\u6761\u5BF9\u89D2\u7EBF\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">rotate</span><span class="token punctuation">(</span>matrix<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u955C\u50CF\u77E9\u9635</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span> <span class="token comment">// \u53CC\u6307\u9488\u5C31\u5730\u53CD\u8F6C\u6570\u7EC4</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    start<span class="token operator">++</span><span class="token punctuation">;</span>
    end<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 151 \u98A0\u5012\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD</li></ul><p>\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD\uFF0C\u5E76\u4E14\u5355\u8BCD\u95F4\u7A7A\u683C\u4EC5\u4FDD\u7559\u4E00\u4E2A\uFF0C\u5982&quot;the sky is blue &quot; --&gt; &quot;blue i sky the&quot;</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> strs <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u751F\u6210\u6570\u7EC4\uFF0C\u4FBF\u4E8E\u5C31\u5730\u4FEE\u6539\u5B57\u7B26\u4E32</span>
  <span class="token function">reverse</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> strs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u5BF9\u6574\u4F53\u8FDB\u884C\u7FFB\u8F6C</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u533A\u95F4\u53CC\u6307\u9488</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>end <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    end<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u4FDD\u8BC1start\u6307\u9488\u59CB\u7EC8\u6307\u5411\u975E\u7A7A\u683C\u5B57\u7B26</span>
      <span class="token comment">// \u82E5\u540C\u65F6\u6307\u5411\u7A7A\u683C\uFF0C\u5219\u4F7F\u7528\u7A7A\u5B57\u7B26\u66FF\u4EE3\uFF0C\u8868\u793A\u5220\u9664,\u4FDD\u8BC1\u5220\u9664\u540E\u5B57\u7B26\u6570\u7EC4\u7D22\u5F15\u6B63\u5E38</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> strs<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      start <span class="token operator">=</span> end<span class="token punctuation">;</span> <span class="token comment">// \u66F4\u65B0start\u6307\u9488\u4F4D\u7F6E\uFF0C\u5E76\u76F4\u63A5\u8FDB\u5165\u4E0B\u4E00\u8F6E\u5FAA\u73AF</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5728\u4FDD\u8BC1\u4E86start\u6307\u5411\u5B57\u7B26\u7684\u524D\u63D0\u4E0B\uFF0C\u53D1\u73B0end\u6307\u5411\u7A7A\u683C\uFF0C\u6307\u5B9A\u53CD\u8F6C</span>
      <span class="token function">reverse</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5BF9\u5355\u4E2A\u5355\u8BCD\uFF0C\u5373\u533A\u95F4[start, end)\u8FDB\u884C\u53CD\u8F6C</span>
      start <span class="token operator">=</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u82E5\u4E0D\u4EE5\u7A7A\u683C\u7ED3\u5C3E\uFF0C\u5219\u5BF9\u6700\u540E\u4E00\u4E2A\u5355\u8BCD\u8FDB\u884C\u53CD\u8F6C</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">!==</span> end<span class="token punctuation">)</span> <span class="token function">reverse</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> strs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    start<span class="token operator">++</span><span class="token punctuation">;</span>
    end<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 54 \u87BA\u65CB\u77E9\u9635</li></ul><p>\u7ED9\u5B9Am*n\u7684\u77E9\u9635matrix\uFF0C\u6309\u987A\u65F6\u9488\u87BA\u65CB\u904D\u5386\u77E9\u9635</p><p>\u601D\u8DEF\uFF1A\u8BBE\u5B9A\u4E0A\u4E0B\u5DE6\u53F3\u56DB\u4E2A\u52A8\u6001\u8FB9\u754C\uFF0C\u5F53\u7ED3\u679C\u6570\u7EC4res\u957F\u5EA6\u5C0F\u4E8Em*n\u65F6\uFF0C\u5FAA\u73AF\u5224\u65AD\u56DB\u4E2A\u8FB9\u754C\u662F\u5426\u6536\u7F29\u5B8C\u6210\uFF0C\u82E5\u6CA1\u6709\u5B8C\u6210\u5219\u5728\u8FB9\u754C\u5185\u904D\u5386\u5BF9\u5E94\u7684\u884C\u6216\u5217\uFF0C\u6700\u540E\u8FD4\u56DEres\u6570\u7EC4\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>matrix<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> upper_bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lower_bound <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left_bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right_bound <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> m<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>upper_bound <span class="token operator">&lt;=</span> lower_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> left_bound<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> right_bound<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>upper_bound<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      upper_bound<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left_bound <span class="token operator">&lt;=</span> right_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> upper_bound<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lower_bound<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right_bound<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      right_bound<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>upper_bound <span class="token operator">&lt;=</span> lower_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> right_bound<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> left_bound<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>lower_bound<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      lower_bound<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left_bound <span class="token operator">&lt;=</span> right_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> lower_bound<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> upper_bound<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left_bound<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      left_bound<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 59 \u87BA\u65CB\u77E9\u96352</li></ul><p>\u7ED9\u5B9A\u6574\u6570n\uFF0C\u751F\u6210\u5305\u542B1\u5230n^2\u6240\u6709\u5143\u7D20\uFF0C\u4E14\u6309\u987A\u65F6\u9488\u87BA\u65CB\u6392\u5217\u7684n*n\u77E9\u9635matrix</p><p>\u601D\u8DEF\uFF1A\u539F\u7406\u540C\u4E0A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> matrix<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> upper_bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lower_bound <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left_bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right_bound <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>upper_bound <span class="token operator">&lt;=</span> lower_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> left_bound<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> right_bound<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> matrix<span class="token punctuation">[</span>upper_bound<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
    upper_bound<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left_bound <span class="token operator">&lt;=</span> right_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> upper_bound<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lower_bound<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right_bound<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      right_bound<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>upper_bound <span class="token operator">&lt;=</span> lower_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> right_bound<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> left_bound<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        matrix<span class="token punctuation">[</span>lower_bound<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      lower_bound<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left_bound <span class="token operator">&lt;=</span> right_bound<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> lower_bound<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> upper_bound<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left_bound<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      left_bound<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> matrix
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u6269\u5C55-rabin-karp\u5B57\u7B26\u5339\u914D\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u6269\u5C55-rabin-karp\u5B57\u7B26\u5339\u914D\u7B97\u6CD5" aria-hidden="true">#</a> \u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u6269\u5C55: RABIN KARP\u5B57\u7B26\u5339\u914D\u7B97\u6CD5</h2><ul><li>leetcode 187 \u91CD\u590D\u7684DNA\u5E8F\u5217</li></ul><p>DNA\u5E8F\u5217\u4EC5\u5305\u542BACGT\u5B57\u7B26\uFF0C\u7ED9\u5B9A\u4E00\u4E2A\u8868\u793A DNA\u5E8F\u5217 \u7684\u5B57\u7B26\u4E32 s \uFF0C\u8FD4\u56DE\u6240\u6709\u5728 DNA \u5206\u5B50\u4E2D\u51FA\u73B0\u4E0D\u6B62\u4E00\u6B21\u7684 \u957F\u5EA6\u4E3A 10 \u7684\u5E8F\u5217(\u5B50\u5B57\u7B26\u4E32)\u3002\u4F60\u53EF\u4EE5\u6309 \u4EFB\u610F\u987A\u5E8F \u8FD4\u56DE\u7B54\u6848\u3002</p><p>\u601D\u8DEF\uFF1A\u9996\u5148\u60F3\u5230\u7684\u65F6\u66B4\u529B\u89E3\u6CD5\uFF0C\u53D6\u51FAs\u4E2D\u957F\u5EA6\u4E3A10\u7684\u5B50\u4E32\u653E\u5165\u54C8\u5E0C\u8868\u4E2D\uFF0C\u904D\u5386s\u53D6\u51FA\u5E76\u4E0E\u54C8\u5E0C\u8868\u8FDB\u884C\u6BD4\u8F83\uFF0C\u53D1\u73B0\u91CD\u590D\u5219\u653E\u5165\u7ED3\u679C\u6570\u7EC4\u4E2D\uFF0C\u4E0D\u91CD\u590D\u5219\u52A0\u5165\u54C8\u5E0C\u8868\u4E2D\uFF0C\u904D\u5386\u5B8C\u6210\u540E\u8FD4\u56DE\u7ED3\u679C\u5373\u53EF</p><p>\u4F18\u5316\u89E3\u6CD5\uFF0C\u53D6\u51FA\u957F\u5EA6\u4E3A10\u7684\u5B50\u4E32\u64CD\u4F5C\u7C7B\u4F3C\u4E8E\u6ED1\u52A8\u7A97\u53E3\uFF0C\u800C\u53D6\u51FA\u5B50\u4E32\u64CD\u4F5C\u53EF\u4EE5\u4F18\u5316\u4E3A\u52A8\u6001\u54C8\u5E0C\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A<code>O(1)</code><br> \u52A8\u6001\u54C8\u5E0C\uFF1A\u5C06\u56DB\u79CD\u5B57\u7B26\u7F16\u7801\u4E3A4\u8FDB\u5236\u6570\uFF0C\u7A97\u53E3\u6ED1\u52A8\u65F6\u4EC5\u9700\u8981\u589E\u52A0\u6700\u4F4E\u4F4D\uFF0C\u5220\u9664\u6700\u9AD8\u4F4D\u64CD\u4F5C\u5373\u53EF\u83B7\u53D6\u65B0\u76844\u8FDB\u5236\u7F16\u7801\u6570\uFF0C\u540C\u65F610\u4F4D4\u8FDB\u5236\u6570\u53EF\u4EE5\u75288\u4F4D10\u8FDB\u5236\u5B8C\u6210\u8868\u793A\uFF0C\u56E0\u6B64\u4E0D\u5B58\u5728\u6EA2\u51FA\u95EE\u9898</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findRepeatedDnaSequences</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> sNums <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// \u5C06\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u6570\u7EC4\u4FBF\u4E8E\u7D22\u5F15\uFF0C\u540C\u65F6\u8FDB\u884C4\u8FDB\u5236\u7F16\u7801</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unexpected char </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// \u4F7F\u7528set\u6536\u96C6\u91CD\u590D\u7684\u5B57\u7B26\u4E32\uFF0C\u907F\u514D\u51FA\u73B03\u6B21\u53CA\u4EE5\u4E0A\u7684\u5B57\u7B26\u4E32\u88AB\u591A\u6B21\u6536\u96C6</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> windowHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u4F4D\u6570\uFF0C\u8FDB\u5236\u6570\uFF0C\u4EE5\u53CA\u5F53\u524D\u7A97\u53E3\u54C8\u5E0C\u72B6\u6001</span>
  <span class="token keyword">const</span> cacheLR <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8BA1\u7B97\u6700\u9AD8\u4F4D\u4E58\u6570</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hashList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u5DE6\u53F3\u6307\u9488\u548C\u67E5\u91CD\u8868</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5F53\u53F3\u6307\u9488\u904D\u5386\u5230\u672B\u5C3E\u65F6\u9000\u51FA\uFF0Cright\u4ECE0\u5F00\u59CB\u5305\u542B\u4E86\u521D\u59CB\u7A97\u53E3\u54C8\u5E0C\u503C\u7684\u8BA1\u7B97</span>
    windowHash <span class="token operator">=</span> windowHash<span class="token operator">*</span><span class="token constant">R</span> <span class="token operator">+</span> sNums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u8BA1\u7B97\u5F53\u524D\u7A97\u53E3\u54C8\u5E0C\u503C</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u5411\u53F3\u6269\u5927\u7A97\u53E3\uFF0C\u6B64\u524D\u7A97\u53E3\u533A\u95F4[left, right)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">===</span> <span class="token constant">L</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u7A97\u53E3\u6269\u5927\u524D\u7684\u5927\u5C0F\u7B49\u4E8EL\u65F6\u8FDB\u884C\u54C8\u5E0C\u5224\u65AD</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>hashList<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>windowHash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u53D1\u73B0\u91CD\u590D\u5B57\u7B26\u4E32</span>
        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// right\u5DF2\u7ECF\u6269\u5927\uFF0C\u56E0\u6B64\u4E0D\u5FC5\u52A01</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E0D\u91CD\u590D\u5219\u5C06\u54C8\u5E0C\u6DFB\u52A0\u5230\u67E5\u91CD\u8868</span>
        hashList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>windowHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token comment">// \u6536\u7F29\u7A97\u53E3\uFF0C\u5220\u9664\u6700\u9AD8\u4F4D\u5B57\u7B26</span>
      windowHash <span class="token operator">=</span> windowHash <span class="token operator">-</span> sNums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> cacheLR<span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8FD4\u56DEArray</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 28 \u627E\u51FA\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807</li></ul><p>\u7ED9\u4F60\u4E24\u4E2A\u5B57\u7B26\u4E32 haystack \u548C needle \uFF0C\u8BF7\u4F60\u5728 haystack \u5B57\u7B26\u4E32\u4E2D\u627E\u51FA needle \u5B57\u7B26\u4E32\u7684\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807\uFF08\u4E0B\u6807\u4ECE 0 \u5F00\u59CB\uFF09\u3002\u5982\u679C needle \u4E0D\u662F haystack \u7684\u4E00\u90E8\u5206\uFF0C\u5219\u8FD4\u56DE -1 \u3002</p><p>\u601D\u8DEF\uFF1A\u6709\u4E86\u4E0A\u8FF0\u7ECF\u9A8C\uFF0C\u66B4\u529B\u89E3\u6CD5\u53EF\u4EE5\u662F\u4ECEhaystack\u4E2D\u53D6\u51FAneedle\u957F\u5EA6\u7684\u5B50\u4E32\uFF0C\u7136\u540E\u9010\u4E00\u6BD4\u8F83\uFF0C\u8FD4\u56DE\u7B2C\u4E00\u4E2A\u5339\u914D\u7684\u7D22\u5F15</p><p>\u501F\u9274\u4E0A\u9898\u601D\u8DEF\uFF0C\u53EF\u4EE5\u4F7F\u7528\u6ED1\u52A8\u5E84\u53E3\u548C\u81EA\u5B9A\u4E49\u52A8\u6001\u54C8\u5E0C\u4E5F\u5373Rabin-Karp\u6307\u7EB9\u5B57\u7B26\u4E32\u67E5\u627E\u7B97\u6CD5\uFF1B<br> \u7531\u4E8E\u5B57\u7B26\u5BF9\u5E94\u7684ASCII\u7801\u4E3A256\u8FDB\u5236\uFF0C\u76F4\u63A5\u7F16\u7801\u5F88\u53EF\u80FD\u9020\u6210\u6574\u578B\u6EA2\u51FA\uFF0C\u56E0\u6B64\u53EF\u4EE5\u91C7\u7528\u9664Q\u53D6\u4F59\u7684\u65B9\u5F0F\u7EA6\u675F\u5728<code>[0, Q-1]</code>\u8303\u56F4\uFF0C \u82E5\u53D1\u751F\u54C8\u5E0C\u51B2\u7A81\uFF0C\u5219\u624B\u52A8\u8C03\u7528\u4E00\u6B21\u66B4\u529B\u6BD4\u8F83\u5373\u53EF\u3002\u5176\u4E2DQ\u5E94\u53D6\u5C3D\u53EF\u80FD\u5927\u7684\u7D20\u6570</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">strStr</span><span class="token punctuation">(</span>haystack<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> needle<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token constant">L</span> <span class="token operator">=</span> needle<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token constant">Q</span> <span class="token operator">=</span> <span class="token number">1658598167</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token constant">RL</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token constant">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5BF9\u6700\u9AD8\u4F4D\u4E58\u6570\u9632\u6EA2\u51FA</span>
    <span class="token constant">RL</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">RL</span> <span class="token operator">*</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">Q</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> needleHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u8BA1\u7B97\u76EE\u6807\u5B57\u7B26\u4E32hash</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> needle<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    needleHash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">*</span>needleHash <span class="token operator">+</span> needle<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">Q</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> windowHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> haystack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    windowHash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">R</span> <span class="token operator">*</span> windowHash<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">Q</span> <span class="token operator">+</span> haystack<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">Q</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">===</span> <span class="token constant">L</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>windowHash <span class="token operator">===</span> needleHash<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u54C8\u5E0C\u5339\u914D\u8FD8\u9700\u8FDB\u4E00\u6B65\u6BD4\u8F83</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>needle <span class="token operator">===</span> haystack<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> left<span class="token punctuation">;</span> <span class="token comment">// \u53D1\u73B0\u76EE\u6807\u5219\u76F4\u63A5\u8FD4\u56DE</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token comment">// \u5220\u9664\u9AD8\u4F4D\u6570\uFF0C\u7F29\u5C0F\u7A97\u53E3</span>
      windowHash <span class="token operator">=</span> <span class="token punctuation">(</span> windowHash <span class="token operator">-</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token constant">RL</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">Q</span> <span class="token operator">+</span> <span class="token constant">Q</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">Q</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5E26\u6743\u91CD\u7684\u968F\u673A\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5E26\u6743\u91CD\u7684\u968F\u673A\u7B97\u6CD5" aria-hidden="true">#</a> \u5E26\u6743\u91CD\u7684\u968F\u673A\u7B97\u6CD5</h2><ul><li>leetcode 528 \u6309\u6743\u91CD\u968F\u673A\u9009\u62E9</li></ul><p>\u7ED9\u4F60\u4E00\u4E2A \u4E0B\u6807\u4ECE 0 \u5F00\u59CB \u7684\u6B63\u6574\u6570\u6570\u7EC4 w \uFF0C\u5176\u4E2D w[i] \u4EE3\u8868\u7B2C i \u4E2A\u4E0B\u6807\u7684\u6743\u91CD\u3002</p><p>\u8BF7\u4F60\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570 pickIndex \uFF0C\u5B83\u53EF\u4EE5 \u968F\u673A\u5730 \u4ECE\u8303\u56F4 [0, w.length - 1] \u5185\uFF08\u542B 0 \u548C w.length - 1\uFF09\u9009\u51FA\u5E76\u8FD4\u56DE\u4E00\u4E2A\u4E0B\u6807\u3002\u9009\u53D6\u4E0B\u6807 i \u7684 \u6982\u7387 \u4E3A w[i] / sum(w) \u3002</p><p>\u601D\u8DEF\uFF1A\u6B64\u9898\u53EF\u4F7F\u7528\u524D\u7F00\u548C\u6570\u7EC4\u548C\u4E8C\u5206\u67E5\u627E\u6CD5\uFF0C\u9996\u5148\u5229\u7528\u524D\u7F00\u548C\u6570\u7EC4preSum\u6A21\u62DF\u6743\u91CD\u6982\u7387\u533A\u57DF\uFF0C\u751F\u6210\u8303\u56F4\u4E3A<code>[0,preSum[n-1])</code>\u7684\u968F\u673A\u6570rand\uFF0C\u901A\u8FC7\u4E8C\u5206\u67E5\u627E\u6CD5\uFF0C\u5728preSum\u4E2D\u627E\u5230\u521A\u597D\u5927\u4E8Erand\u7684\u5143\u7D20\u7684\u7D22\u5F15\uFF0C\u800C\u540E\u6839\u636E\u7D22\u5F15\u5373\u53EF\u53D6\u51FA\u5BF9\u5E94\u6743\u91CD\u7684\u6570\u5B57</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  preSum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u58F0\u660E\u524D\u7F00\u548C\u6570\u7EC4</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>w<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6784\u9020\u524D\u7F00\u548C\u6570\u7EC4</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> w<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">pickIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> target <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u751F\u6210\u968F\u673A\u6570</span>
    <span class="token comment">// \u4E8C\u5206\u67E5\u627E\uFF0C\u8FD4\u56DE\u4E0B\u6807\uFF0C\u56E0\u4E3ApreSum\u4E0B\u6807\u4ECE0\u5F00\u59CB\uFF0C1\u5BF9\u9F50\uFF0C\u9700\u8981\u51CF1\u540E\u8FD4\u56DE</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">left_bound</span><span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span> <span class="token comment">// \u5DE6\u8FB9\u754C\u7684\u4E8C\u5206\u67E5\u627E</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u67E5\u627E\u5DE6\u8FB9\u754C\uFF0C\u56E0\u6B64\u5411\u4E0B\u53D6\u6574</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7279\u6B8A\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u7279\u6B8A\u7B97\u6CD5" aria-hidden="true">#</a> \u7279\u6B8A\u7B97\u6CD5</h2><h3 id="\u7530\u5FCC\u8D5B\u9A6C\u4E2D\u7684\u51B3\u7B56\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u7530\u5FCC\u8D5B\u9A6C\u4E2D\u7684\u51B3\u7B56\u7B97\u6CD5" aria-hidden="true">#</a> \u7530\u5FCC\u8D5B\u9A6C\u4E2D\u7684\u51B3\u7B56\u7B97\u6CD5</h3><ul><li>leetcode 870 \u4F18\u52BF\u6D17\u724C</li></ul><p>\u7C7B\u4F3C\u4E8E\u7530\u5FCC\u8D5B\u9A6C\uFF0C\u8F93\u5165\u957F\u5EA6\u76F8\u7B49\u7684\u6570\u7EC4nums1\u548Cnums2\uFF0C\u91CD\u65B0\u7EC4\u7EC7nums1\u5143\u7D20\u7684\u4F4D\u7F6E\uFF0C\u4F7Fnums1\u4E2D\u7684\u4F18\u52BF\u6700\u5927\u5316</p><p>\u601D\u8DEF\uFF1A\u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\uFF0C\u82E5\u53CC\u65B9\u6700\u5F3A\u5BF9\u51B3\u4F18\u52BF\uFF0C\u5219\u76F4\u63A5\u6D3E\u51FA\u5373\u53EF\uFF0C\u82E5\u52A3\u52BF\uFF0C\u5219\u6D3E\u51FA\u6700\u5F31\u9876\u66FF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">advantageCount</span><span class="token punctuation">(</span>nums1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> nums2Cache <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u53EF\u4FEE\u6539nums2\uFF0C\u6545\u751F\u6210[val, index]\u6570\u7EC4\uFF0C\u5E76\u964D\u5E8F\u6392\u5E8F</span>
  nums1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5347\u5E8F\u6392\u5E8Fnums1</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u53CC\u6307\u9488</span>
  <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u6392\u5E8F\u540E\u7684nums2</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> index<span class="token punctuation">]</span> <span class="token operator">=</span> nums2Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u53D6\u51FAnums2\u5F53\u524D\u6700\u5927\u503C\u548C\u5BF9\u5E94\u7684\u7D22\u5F15\u4F4D\u7F6E</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">&lt;</span> nums1<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u201C\u6700\u5F3A\u9A6C\u5BF9\u51B3\u4F18\u52BF\u201D\uFF0C\u5219\u76F4\u63A5\u5728\u5BF9\u5E94\u7D22\u5F15\u5904\u586B\u5165\u503C(\u5217\u5165\u5BF9\u6218\u4F4D\u7F6E)</span>
      res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u6536\u7F29\u53F3\u8FB9\u754C</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u201C\u5F53\u524D\u6700\u5F3A\u9A6C\u52A3\u52BF\uFF0C\u5C06\u6700\u5F31\u7684\u9A6C\u5217\u5165\u5BF9\u6218\u4F4D\u201D</span>
      res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E38\u91CF\u53D6\u968F\u673A\u6570" tabindex="-1"><a class="header-anchor" href="#\u5E38\u91CF\u53D6\u968F\u673A\u6570" aria-hidden="true">#</a> \u5E38\u91CF\u53D6\u968F\u673A\u6570</h3><ul><li>leetcode 380 O(1)\u65F6\u95F4\u63D2\u5165\u3001\u5220\u9664\u3001\u83B7\u53D6\u968F\u673A\u5143\u7D20</li></ul><p>\u8BBE\u8BA1\u5E73\u5747\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\u6267\u884C\u63D2\u5165\u3001\u5220\u9664\uFF0C\u83B7\u53D6\u968F\u673A\u5143\u7D20\u7684\u6570\u636E\u7ED3\u6784</p><p>\u601D\u8DEF\uFF1A\u5E38\u91CF\u65F6\u95F4\u83B7\u53D6\u968F\u673A\u5143\u7D20\u53EA\u80FD\u7531\u7D27\u51D1\u578B\u6570\u7EC4\u6765\u5B58\u50A8\u6570\u5B57\uFF0C\u800C\u6570\u7EC4\u4EC5\u80FD\u5728\u672B\u5C3E\u5B9E\u73B0\u5E38\u91CF\u65F6\u95F4\u7684\u63D2\u5165\u548C\u5220\u9664\u64CD\u4F5C\uFF0C\u56E0\u6B64\u53EF\u4EE5\u589E\u52A0\u8F85\u52A9\u54C8\u5E0C\u8868\u7528\u4E8E\u8BB0\u5F55\u6BCF\u4E2A\u5143\u7D20\u5BF9\u5E94\u7D22\u5F15\uFF0C\u5C06\u6570\u7EC4\u4E2D\u95F4\u7684\u5143\u7D20\u642C\u8FD0\u5230\u5C3E\u90E8\u5B9E\u73B0\u5E38\u91CF\u65F6\u95F4\u7684\u63D2\u5165\u548C\u5220\u9664</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">RandomizedSet</span> <span class="token punctuation">{</span>
  nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u58F0\u660E\u5E76\u521D\u59CB\u5316\u6570\u7EC4\u548C\u8F85\u52A9hash</span>
  indexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>

  <span class="token function">insert</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span> <span class="token comment">// \u63D2\u5165\u65F6\u5728\u6570\u7EC4\u672B\u5C3E\u63D2\u5165\uFF0C\u5E76\u66F4\u65B0\u8F85\u52A9hash</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">remove</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6\u8981\u5220\u9664\u503C\u5BF9\u5E94\u7684\u7D22\u5F15</span>
    <span class="token comment">// \u5728\u8F85\u52A9hash\u4E2D\u4E0E\u6570\u7EC4\u672B\u5C3E\u4EA4\u6362\u7D22\u5F15\u4F4D\u7F6E\uFF0C\u5E76\u5220\u9664val\u7684\u8F85\u52A9hash</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// val\u53EF\u76F4\u63A5\u5220\u9664\u65E0\u9700\u6267\u884C\u4EA4\u6362\u52A8\u4F5C\uFF0C\u5220\u9664\u503C\u65F6\u540C\u7406</span>
    <span class="token comment">// \u5728\u5B58\u50A8\u6570\u7EC4\u4E2D\u4E0E\u6570\u7EC4\u672B\u5C3E\u4EA4\u6362\u503C\uFF0C\u5E76\u4ECE\u6570\u7EC4\u672B\u5C3E\u5220\u9664val</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span> <span class="token comment">// \u751F\u6210\u533A\u95F4\u5185\u968F\u673A\u7D22\u5F15\uFF0C\u8FD4\u56DE\u968F\u673A\u6570</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 710 \u9ED1\u540D\u5355\u4E2D\u7684\u968F\u673A\u6570</li></ul><p>\u7ED9\u5B9A\u6574\u6570n\u548C\u9ED1\u540D\u5355\u6570\u7EC4blacklist\uFF0C\u7B49\u6982\u7387\u7684\u9009\u53D6[0, n)\u8303\u56F4\u5185\u4E14\u4E0D\u5305\u542Bblacklist\u7684\u6574\u6570</p><p>\u601D\u8DEF\uFF1A\u4E0E\u4E0A\u9898\u7C7B\u4F3C\uFF0C\u901A\u8FC7\u8F85\u52A9hash\u5C06blacklist\u7D22\u5F15\u6620\u5C04\u5230\u8303\u56F4\u672B\u5C3E\uFF0C\u7136\u540E\u968F\u673A\u9009\u53D6\u524D\u65B9\u6570\u636E\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  indexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sz<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> blacklist<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sz <span class="token operator">=</span> n <span class="token operator">-</span> blacklist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// \u6709\u6548\u6570\u5B57\u533A\u95F4[0, this.sz)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> blacklist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u5C06\u9ED1\u540D\u5355\u90FD\u6807\u8BB0\uFF0C\u6DFB\u52A0\u5230\u8F85\u52A9hash\u4E2D</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> last <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// last\u6307\u9488\u59CB\u7EC8\u6307\u5411\u4E0D\u4E3A\u975E\u9ED1\u540D\u5355\u4E2D\u7684\u672B\u5C3E\u5143\u7D20</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> blacklist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sz<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// \u9ED1\u540D\u5355\u5728\u8303\u56F4\u5916\uFF0C\u4E0D\u7528\u505A\u4EFB\u4F55\u5904\u7406</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span> last<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u79FB\u52A8last\u76F4\u5230\u4E0D\u6307\u5411\u9ED1\u540D\u5355</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8BBE\u7F6E\u9ED1\u540D\u5355\u7D22\u5F15\u6620\u5C04</span>
      last<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u79FB\u52A8last\u6307\u9488</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">pick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span> <span class="token comment">// \u5728\u533A\u95F4[0,this.sz)\u751F\u6210\u968F\u673A\u7D22\u5F15, \u672C\u9898\u4E2D\u65E2\u662F\u7D22\u5F15\u4E5F\u662F\u503C</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> index<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5355\u8C03\u6808\u6570\u7EC4\u53BB\u91CD" tabindex="-1"><a class="header-anchor" href="#\u5355\u8C03\u6808\u6570\u7EC4\u53BB\u91CD" aria-hidden="true">#</a> \u5355\u8C03\u6808\u6570\u7EC4\u53BB\u91CD</h3><ul><li>leetcode 316 \u53BB\u9664\u91CD\u590D\u7684\u5B57\u6BCD</li></ul><p>\u7ED9\u5B9A\u4EC5\u5305\u542B\u5C0F\u5199\u5B57\u6BCD\u7684\u5B57\u7B26\u4E32\uFF0C\u53BB\u9664\u5B57\u7B26\u4E32\u4E2D\u7684\u91CD\u590D\u5B57\u6BCD\uFF0C\u4FDD\u8BC1\u8FD4\u56DE\u7ED3\u679C\u4E2D\u5B57\u5178\u5E8F\u6700\u5C0F\uFF0C\u4E5F\u4E0D\u80FD\u6253\u4E71\u5176\u4ED6\u5B57\u7B26\u7684\u76F8\u5BF9\u4F4D\u7F6E</p><p>\u601D\u8DEF\uFF1A\u5229\u7528\u4E24\u4E2A\u8F85\u52A9hash\u5206\u522B\u7528\u4E8E\u6807\u8BB0\u53BB\u91CD\u548Ccount\u6B21\u6570\u4FDD\u8BC1\u5B57\u5178\u5E8F\uFF0C\u540C\u65F6\u901A\u8FC7\u6808\u627F\u63A5\u7ED3\u679C\uFF0C\u7EC4\u5408\u8D77\u6765\u5373\u4E3A\u5355\u8C03\u6808 \u5148\u5229\u7528\u8F85\u52A9hash\u6570\u7EC4count\u8BB0\u5F55\u6BCF\u4E2A\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570<br> \u904D\u5386\u5B57\u7B26\u4E32\uFF0C\u6BCF\u6B21\u904D\u5386\u65F6\u5C06\u5B57\u7B26\u51FA\u73B0\u6B21\u6570\u51CF1\uFF0C\u5224\u65AD\u5B57\u7B26\u662F\u5426\u51FA\u73B0\u5728hash\u6570\u7EC4inStack\u4E2D\uFF0C\u82E5\u6709\u5219\u8DF3\u8FC7\uFF0C\u82E5\u65E0\u5219\u8FDB\u4E00\u6B65\u5904\u7406\u3002<br> \u5FAA\u73AF\u6BD4\u8F83\uFF0C\u5F53\u5F53\u524D\u5B57\u7B26c\u5B57\u5178\u5E8F\u5C0F\u4E8E\u7ED3\u679C\u6808res\u6808\u9876\u4E14\u8BA1\u6570\u5927\u4E8E0\u65F6(\u5373\u5176\u540E\u8FD8\u6709\u76F8\u540C\u5143\u7D20)\uFF0C\u5F39\u51FA\u6808\u9876\uFF0C\u5E76\u6E05\u9664inStack\u4E2D\u5BF9\u5E94\u7684\u6807\u8BB0\uFF0C\u6B64\u6B65\u7528\u4E8E\u53BB\u91CD\u7684\u540C\u65F6\u4FDD\u8BC1\u5B57\u5178\u5E8F<br> \u5C06c\u63A8\u5165\u7ED3\u679C\u6808\uFF0C\u5E76\u5728inStack\u4E2D\u6807\u8BB0<br> \u7EC4\u5408\u7ED3\u679C\u6808res\u4E2D\u7684\u5B57\u7B26\u5373\u53EF\u83B7\u5F97\u7ED3\u679C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> count<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// count\u8F85\u52A9hash\u58F0\u660E</span>
  <span class="token keyword">let</span> inStack<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inStack\u53BB\u91CDhash\u58F0\u660E</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// count\u521D\u59CB\u5316</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u5B57\u7B26\u4E32\uFF0C\u6BCF\u6B21\u9700\u5148\u5C06\u5BF9\u5E94count\u51CF1</span>
    count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u66F4\u65B0i\u5904\u4E4B\u540E\u76F8\u540C\u7684\u5B57\u7B26\u4E32\u6570\u91CF</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inStack<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// \u5B57\u7B26\u4E32\u5DF2\u88AB\u6807\u8BB0\u8FC7\u5219\u8DF3\u8FC7\u672C\u8F6E\u5FAA\u73AF</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5F53\u524D\u5B57\u7B26\u5B57\u5178\u5E8F\u5C0F\u4E8E\u6808\u9876\u5B57\u7B26\u65F6\uFF0C\u5904\u7406\u6700\u5C0F\u5B57\u5178\u5E8F</span>
      <span class="token comment">// \u5F80\u540E\u518D\u65E0\u6808\u9876\u76F8\u540C\u5143\u7D20\u65F6\uFF0C\u5219\u4E0D\u505A\u8C03\u6574\u8DF3\u51FA\u5FAA\u73AF</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token comment">// \u5F80\u540E\u6709\u6808\u9876\u76F8\u540C\u5143\u7D20\u65F6\uFF0C\u6808\u9876\u51FA\u6808\uFF0C\u540C\u65F6\u5C06\u5BF9\u5E94\u5143\u7D20\u6807\u8BB0\u6E05\u9664</span>
      inStack<span class="token punctuation">[</span>res<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5F53\u524D\u5143\u7D20\u65E0\u91CD\u590D\uFF0C\u5165\u6808\u5E76\u6E05\u9664\u6807\u8BB0</span>
    inStack<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7EC4\u5408\u5E76\u8FD4\u56DE\u53BB\u91CD\u540E\u7684\u5B57\u7B26\u4E32</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>leetcode 1081 \u4E0D\u540C\u5B57\u7B26\u7684\u6700\u5C0F\u5B50\u5E8F\u5217</li></ul><p>\u6B64\u9898\u4E0E\u4E0A\u9898\u76F8\u540C\u590D\u5236\u7C98\u8D34\u4EE3\u7801\u5373\u53EF\u901A\u8FC7</p><h2 id="\u56FE\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56FE\u7B97\u6CD5" aria-hidden="true">#</a> \u56FE\u7B97\u6CD5</h2><h3 id="\u56FE\u8BBA\u57FA\u7840\u53CA\u904D\u5386\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56FE\u8BBA\u57FA\u7840\u53CA\u904D\u5386\u7B97\u6CD5" aria-hidden="true">#</a> \u56FE\u8BBA\u57FA\u7840\u53CA\u904D\u5386\u7B97\u6CD5</h3>`,110),R={href:"https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/tu-lun-ji--d55b2/",target:"_blank",rel:"noopener noreferrer"},E=p(`<ul><li>leetcode 797 \u6240\u6709\u53EF\u80FD\u7684\u8DEF\u5F84</li></ul><p>\u7ED9\u5B9An\u4E2A\u8282\u70B9\u7684\u6709\u5411\u65E0\u73AF\u56FE\uFF0C\u627E\u5230\u4ECE\u8282\u70B90\u5230\u8282\u70B9n-1\u7684\u6240\u6709\u8DEF\u5F84\uFF0C\u5E76\u8F93\u51FA</p><p>\u8F93\u5165\uFF1A<code>graph = [[1,2],[3],[3],[]]</code><br> \u8F93\u51FA\uFF1A<code>[[0,1,3],[0,2,3]]</code><br> \u89E3\u91CA\uFF1A\u6709\u4E24\u6761\u8DEF\u5F84 <code>0 -&gt; 1 -&gt; 3</code> \u548C <code>0 -&gt; 2 -&gt; 3</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">allPathsSourceTarget</span><span class="token punctuation">(</span>graph<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> demo  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  demo<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">.</span>res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  res<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// \u6536\u96C6\u7ED3\u679C</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>graph<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> path<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// DFS</span>
    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6536\u96C6\u8DEF\u5F84</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5230\u8FBE\u7EC8\u70B9\uFF0C\u6536\u96C6\u7ED3\u679C</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token comment">// \u5BF9\u6BCF\u4E2A\u76F8\u90BB\u7684\u8282\u70B9\u8FED\u4EE3DFS</span>
    <span class="token punctuation">}</span>
    path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9000\u51FA\u8DEF\u5F84</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u73AF\u68C0\u6D4B\u53CA\u62D3\u6251\u6392\u5E8F\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u73AF\u68C0\u6D4B\u53CA\u62D3\u6251\u6392\u5E8F\u7B97\u6CD5" aria-hidden="true">#</a> \u73AF\u68C0\u6D4B\u53CA\u62D3\u6251\u6392\u5E8F\u7B97\u6CD5</h3><ul><li>leetcode 207 \u8BFE\u7A0B\u8868</li><li>leetcode 210 \u8BFE\u7A0B\u8868 \u4E8C</li></ul><h2 id="\u52A8\u6001\u89C4\u5212\u6C47\u603B" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212\u6C47\u603B" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212\u6C47\u603B</h2><h3 id="\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217" aria-hidden="true">#</a> \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217</h3><ul><li>leetcode 300 \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217</li></ul><p>\u9898\u76EE\uFF1A\u8F93\u5165\u4E00\u4E2A\u65E0\u5E8F\u7684\u6574\u6570\u6570\u7EC4\uFF0C\u8BF7\u4F60\u627E\u5230\u5176\u4E2D\u6700\u957F\u7684\u4E25\u683C\u9012\u589E\u5B50\u5E8F\u5217\u7684\u957F\u5EA6</p><p>\u5B50\u5E8F\u5217\u4E0D\u540C\u4E8E\u5B50\u4E32\uFF0C\u5B50\u5E8F\u5217\u5143\u7D20\u4E0D\u4E00\u5B9A\u8FDE\u7EED\uFF0C\u6211\u4EEC\u5B9A\u4E49\u4E00\u4E2Adp\u6570\u7EC4\uFF0C<code>dp[i]</code>\u8868\u793A\u4EE5<code>nums[i]</code>\u8FD9\u4E2A\u6570\u7ED3\u5C3E\u7684\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u957F\u5EA6<br> \u5373\u5BF9\u95EE\u9898\u8FDB\u884C\u5206\u89E3\uFF0C\u7531\u4E4B\u524D\u7684\u72B6\u6001\u63A8\u5BFC\u5F53\u524D\u7684\u72B6\u6001\uFF0C\u7531<code>dp[0...i-1]</code>\u63A8\u51FA<code>dp[i]</code><br> \u56E0\u6B64base case <code>dp[0]</code>\u4E3A1<br> \u6C42<code>dp[i]</code>\u5373\u627E\u5230\u7ED3\u5C3E\u6BD4<code>nums[i]</code>\u5C0F\u7684\u5B50\u5E8F\u5217\uFF0C\u5C06<code>nums[i]</code>\u62FC\u63A5\u5230\u8FD9\u4E9B\u5B50\u5E8F\u5217\u672B\u5C3E\uFF0C\u5C31\u53EF\u4EE5\u5F62\u6210\u4E00\u4E2A\u65B0\u7684\u9012\u589E\u5B50\u5E8F\u5217\uFF0C\u5E76\u4E14\u65B0\u7684\u5B50\u5E8F\u5217\u957F\u5EA6+1</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dp<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316dp</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u4ECE\u4E4B\u524D\u7684\u5E8F\u5217\u672B\u5C3E\u4E2D\u53D1\u73B0\u6BD4\u5F53\u524D\u5143\u7D20\u5C0F\u7684\u60C5\u51B5\uFF0C\u6DFB\u52A0\u5230\u672B\u5C3E</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u66F4\u65B0\u5F53\u524D\u5E8F\u5217\u957F\u5EA6</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u53D6\u51FAdp\u6570\u7EC4\u4E2D\u6700\u5927\u7684\u957F\u5EA6\u5373\u4E3A\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u957F\u5EA6</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528\u4E8C\u5206\u67E5\u627E\u6CD5\u6C42\u89E3\uFF1A\u5904\u7406\u6570\u7EC4\uFF0C\u5206\u6210\u82E5\u5E72\u5806\uFF0C\u8F83\u5C0F\u7684\u6570\u53EA\u80FD\u653E\u5230\u8F83\u5927\u6570\u540E\u65B9\uFF0C\u6216\u5F53\u524D\u8F83\u5927\u6570\u6CA1\u6709\u53EF\u4EE5\u653E\u7684\u4F4D\u7F6E\uFF0C\u5219\u65B0\u5EFA\u4E00\u4E2A\u5806\u5C06\u5F53\u524D\u6570\u653E\u8FDB\u53BB\uFF0C\u82E5\u5F53\u524D\u6570\u5B57\u6709\u591A\u4E2A\u5806\u53EF\u9009\u5219\uFF0C\u9009\u62E9\u6700\u5DE6\u4FA7\u7684\u4E00\u4E2A\u5806\u653E\u7F6E<br> \u800C\u7531\u4E8E\u9009\u62E9\u6700\u5DE6\u4FA7\u653E\u7F6E\uFF0C\u5806\u9876\u5FC5\u5B9A\u6709\u5E8F\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528\u4E8C\u5206\u67E5\u627E<br> \u6267\u884C\u5B8C\u4E0A\u8FF0\u64CD\u4F5C\u540E\uFF0C\u5806\u7684\u6570\u91CF\u5C31\u662F\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u957F\u5EA6</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4EC5\u5B58\u50A8\u5806\u9876\u5143\u7D20</span>
  <span class="token keyword">let</span> piles <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u5806\u6570\u521D\u59CB\u5316\u4E3A0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> piles<span class="token punctuation">;</span> <span class="token comment">// \u4E8C\u5206\u67E5\u627E\u5F53\u524D\u6570\u8981\u653E\u5165\u7684\u5806</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> num<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">// left\u9700\u6307\u5411\u521A\u597D\u53EF\u586B\u5145\u7684\u7B2C\u4E00\u4E2A\u4F4D\u7F6E</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> piles<span class="token punctuation">)</span> piles<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u6CA1\u6709\u627E\u5230\u5408\u9002\u7684\u5806\u5219\u65B0\u5EFA\u4E00\u4E2A</span>
    top<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">// \u5C06\u5F53\u524D\u6570\u653E\u5165\u5806\u9876</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> piles<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS:\u4E0E\u4E4B\u5173\u8054\u7684\uFF0Cvue3\u4E2D\u7684\u5FEB\u901Fdiff\u7B97\u6CD5\u4F7F\u7528\u4E86\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\uFF0C\u4F46\u9700\u8981\u6C42\u51FA\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u800C\u4E0D\u662F\u4EC5\u8FD4\u56DE\u4E00\u4E2A\u957F\u5EA6</p><ul><li>leetcode 354 \u4FC4\u7F57\u65AF\u5957\u5A03\u4FE1\u5C01\u95EE\u9898</li></ul><p>\u7ED9\u5B9A\u4E8C\u7EF4\u6574\u6570\u6570\u7EC4envelopes\uFF0C<code>envelopes[i] = [wi,hi]</code>\u8868\u793A\u7B2Ci\u4E2A\u4FE1\u5C01\u7684\u5BBD\u5EA6\u548C\u9AD8\u5EA6<br> \u5F53\u53E6\u4E00\u4E2A\u4FE1\u5C01\u7684\u5BBD\u9AD8\u90FD\u5927\u4E8E\u8FD9\u4E2A\u4FE1\u5C01\u65F6\uFF0C\u8FD9\u4E2A\u4FE1\u5C01\u5C31\u53EF\u4EE5\u653E\u8FDB\u53E6\u4E00\u4E2A\u4FE1\u5C01\u4E2D\uFF0C\u5982\u540C\u4FC4\u7F57\u65AF\u5957\u5A03\u4E00\u6837\uFF0C\u8BA1\u7B97\u6700\u591A\u80FD\u6709\u591A\u5C11\u4E2A\u4FE1\u5C01\u7EC4\u6210\u4E00\u7EC4\u201C\u4FC4\u7F57\u65AF\u5957\u5A03\u201D\u4FE1\u5C01 PS\uFF1A\u4FE1\u5C01\u4E0D\u53EF\u65CB\u8F6C</p><p>\u8BE5\u9898\u672C\u8D28\u662F\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E8C\u7EF4\u7248\u672C\uFF0C\u957F\u5EA6\u4E3A\u6700\u591A\u80FD\u5D4C\u5957\u7684\u4FE1\u5C01\u4E2A\u6570\uFF0C \u57FA\u672C\u601D\u8DEF\u4E3A\u5148\u5BF9W\u5347\u5E8F\u6392\u5E8F(\u4FDD\u8BC1W\u80FD\u5D4C\u5957)\uFF0C\u9047\u5230W\u76F8\u540C\u7684\u60C5\u51B5\u5BF9H\u964D\u5E8F\u6392\u5E8F(W\u76F8\u540C\u65F6\u4E0D\u80FD\u76F8\u4E92\u5305\u542B\uFF0C\u56E0\u6B64\u5BF9H\u964D\u5E8F\u6392\u5E8F)\uFF0C\u64CD\u4F5C\u5B8C\u6210\u540E\u95EE\u9898\u8F6C\u6362\u4E3A\u5BF9H\u7EC4\u6210\u7684\u6570\u7EC4\u6C42\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u95EE\u9898</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxEnvelopes</span><span class="token punctuation">(</span>envelopes<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> envelopes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  envelopes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u9AD8\u5EA6\u964D\u5E8F</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5BBD\u5EA6\u5347\u5E8F</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6784\u9020h\u9AD8\u5EA6\u5E8F\u5217</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> envelopes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5FC5\u987B\u8C03\u7528\u4E8C\u5206\u6CD5\u7684\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u51FD\u6570\uFF0C\u5426\u5219\u4E0D\u80FD\u901A\u8FC7\u65F6\u95F4\u590D\u6742\u5EA6\u68C0\u67E5</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function I(q,D){const t=e("ExternalLinkIcon"),o=e("RouterLink");return u(),i("div",null,[v,s("p",null,[n("labuladong\u6587\u6863\u4E2D\u4EE3\u7801\u6CA1\u6709\u4F7F\u7528js\uFF0C\u6545\u8FD9\u7BC7\u5B66\u4E60\u7B14\u8BB0\u4E3B\u8981\u7528\u4E8E\u8BB0\u5F55\u4F7F\u7528js/ts\u5B9E\u73B0\u5BF9\u5E94\u90E8\u5206\u7684\u4EE3\u7801\uFF0C\u8BE6\u7EC6\u7B97\u6CD5\u89E3\u6790\u7B49\u63A8\u8350\u914D\u5408\u539F\u8457\u9605\u8BFB"),s("a",b,[n("labuladong\u7684github\u7AD9"),a(t)]),n("|"),s("a",w,[n("labuladong\u7684gitee\u7AD9"),a(t)])]),y,s("p",null,[s("a",f,[n("\u5FAE\u4FE1\u6587\u6863"),a(t)])]),h,s("p",null,[s("a",g,[n("\u5FAE\u4FE1\u6587\u6863"),a(t)])]),x,s("p",null,[n("\u6587\u7AE0\u5730\u5740"),s("a",N,[n("GIT\u539F\u7406\u4E4B\u6700\u8FD1\u516C\u5171\u7956\u5148"),a(t)])]),S,s("p",null,[n("\u6587\u7AE0\u5730\u5740"),s("a",_,[n("\u9898\u76EE\u4E0D\u8BA9\u6211\u505A\u4EC0\u4E48\uFF0C\u6211\u5C31\u504F\u8981\u53BB\u505A\u4EC0\u4E48"),a(t)])]),T,s("p",null,[n("\u8003\u8651\u5404\u94FE\u8868\u4E3A\u5347\u5E8F\uFF0C\u6B64\u9898\u4EC5\u9700\u8FED\u4EE3\u6BD4\u8F83\u5404\u94FE\u8868\u5934\u90E8\uFF0C\u53D6\u51FA\u8F83\u5C0F\u7684\u8282\u70B9"),A,n(" \u5229\u7528"),a(o,{to:"/algorithm/common/#%E6%9C%80%E5%B0%8F%E5%A4%A7%E5%A0%86"},{default:c(()=>[n("\u6700\u5C0F\u5806Heap")]),_:1}),n(", \u5B58\u50A8\u6BCF\u4E2A\u94FE\u8868\u5934\u90E8\uFF0C\u6BCF\u6B21\u5F39\u51FA\u6700\u5C0F\u7684\u8282\u70B9\uFF0C\u653E\u5165\u7ED3\u679C\u94FE\u8868\u4E2D"),j,n(" \u540C\u65F6\u5C06\u5F39\u51FA\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u975E\u7A7A\u8282\u70B9\u63A8\u5165\u6570\u7EC4\uFF0C\u6700\u5C0F\u5806\u6BCF\u6B21\u90FD\u80FD\u4FDD\u8BC1\u5F39\u51FA\u5806\u4E2D\u7684\u6700\u5C0F\u8282\u70B9")]),M,s("p",null,[a(o,{to:"/algorithm/common.html#n%E6%95%B0%E4%B9%8B%E5%92%8C"},{default:c(()=>[n("N\u6570\u4E4B\u548C")]),_:1})]),L,s("p",null,[n("\u63A8\u8350\u5148\u89C2\u770B"),s("a",R,[n("\u539F\u6587"),a(t)]),n("\u5BF9\u56FE\u7684\u5206\u6790\uFF0C\u7136\u540E\u518D\u5F00\u59CB\u89E3\u9898")]),E])}const H=l(m,[["render",I],["__file","labuladongNote.html.vue"]]);export{H as default};
